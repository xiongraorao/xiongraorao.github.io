<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>在路上</title>
  
  <subtitle>stay hungry, stay foolish!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiongraorao.github.io/"/>
  <updated>2018-06-08T09:10:07.339Z</updated>
  <id>https://xiongraorao.github.io/</id>
  
  <author>
    <name>Xiong Raorao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>k8s学习-1</title>
    <link href="https://xiongraorao.github.io/2018/04/27/k8s%E5%AD%A6%E4%B9%A0-1/"/>
    <id>https://xiongraorao.github.io/2018/04/27/k8s学习-1/</id>
    <published>2018-04-27T09:30:43.000Z</published>
    <updated>2018-06-08T09:10:07.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h1><h2 id="references"><a href="#references" class="headerlink" title="references:"></a>references:</h2><p><a href="http://vernlium.github.io/2017/08/09/kubernetes%E7%AE%80%E4%BB%8B-k8s-1/" target="_blank" rel="noopener">1.k8s简介</a><br><a href="https://blog.csdn.net/liyingke112/article/details/76022267" target="_blank" rel="noopener">2.使用kube-proxy让外部网络访问K8S service的ClusterIP</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1 简介&quot;&gt;&lt;/a&gt;1 简介&lt;/h1&gt;&lt;h2 id=&quot;references&quot;&gt;&lt;a href=&quot;#references&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="k8s" scheme="https://xiongraorao.github.io/categories/k8s/"/>
    
    
      <category term="k8s" scheme="https://xiongraorao.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>大数据平台维护笔记</title>
    <link href="https://xiongraorao.github.io/2017/06/09/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E7%BB%B4%E6%8A%A4%E7%AC%94%E8%AE%B0/"/>
    <id>https://xiongraorao.github.io/2017/06/09/大数据平台维护笔记/</id>
    <published>2017-06-09T04:47:59.000Z</published>
    <updated>2018-06-08T09:10:07.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-hdfs文件迁移方法："><a href="#1-hdfs文件迁移方法：" class="headerlink" title="1.hdfs文件迁移方法："></a>1.hdfs文件迁移方法：</h2><p>参考链接：<br><a href="http://blog.csdn.net/bigkeen/article/details/51034902" target="_blank" rel="noopener">http://blog.csdn.net/bigkeen/article/details/51034902</a><br><a href="http://www.cnblogs.com/juncaoit/p/6178747.html" target="_blank" rel="noopener">http://www.cnblogs.com/juncaoit/p/6178747.html</a><br><a href="http://blog.csdn.net/weipanp/article/details/42713149" target="_blank" rel="noopener">http://blog.csdn.net/weipanp/article/details/42713149</a></p><ul><li>可以相互通信的两个集群<br>在老的hadoop集群中开启yarn和hdfs服务，新的集群开启hdfs服务即可<br>执行以下命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop distcp -i hftp://old cluster ip:50070/src directory hdfs://192.168.91.130:8020/new cluster directory</span><br></pre></td></tr></table></figure><ul><li>删除老集群的hdfs文件<br>使用hdfs命令删除文件后执行<br>hadoop dfs -expunge<br>删除对应的DataNode和namenode路径下的文件夹</li></ul><h3 id="2-多次格式化NameNode导致无法启动DataNode的解决方案"><a href="#2-多次格式化NameNode导致无法启动DataNode的解决方案" class="headerlink" title="2.多次格式化NameNode导致无法启动DataNode的解决方案"></a>2.多次格式化NameNode导致无法启动DataNode的解决方案</h3><p><a href="http://www.cnblogs.com/yeahwell/p/5642798.html" target="_blank" rel="noopener">http://www.cnblogs.com/yeahwell/p/5642798.html</a></p><h3 id="3-查看某端口被映射到端口上"><a href="#3-查看某端口被映射到端口上" class="headerlink" title="3.查看某端口被映射到端口上"></a>3.查看某端口被映射到端口上</h3><p>iptables -t nat -L -n  | grep 80<br>iptables -t nat –list   //检查nat列表信息<br>iptables -t nat -D PREROUTING 1    /Nat列表信息删除：序号从1 开始，后边以此+1.</p><p>参考链接：<a href="http://blog.csdn.net/xin_yu_xin/article/details/46416101" target="_blank" rel="noopener">http://blog.csdn.net/xin_yu_xin/article/details/46416101</a></p><h3 id="4-安装mysql"><a href="#4-安装mysql" class="headerlink" title="4.安装mysql"></a>4.安装mysql</h3><p><a href="http://blog.csdn.net/chenpy/article/details/50344085" target="_blank" rel="noopener">http://blog.csdn.net/chenpy/article/details/50344085</a></p><h3 id="5-storm-并行度"><a href="#5-storm-并行度" class="headerlink" title="5.storm 并行度"></a>5.storm 并行度</h3><p>rebalance操作：<a href="http://blog.csdn.net/jmppok/article/details/17243857" target="_blank" rel="noopener">http://blog.csdn.net/jmppok/article/details/17243857</a><br>storm并行度理解：<a href="http://www.cnblogs.com/catkins/p/5254377.html" target="_blank" rel="noopener">http://www.cnblogs.com/catkins/p/5254377.html</a></p><h3 id="6-自定义系统"><a href="#6-自定义系统" class="headerlink" title="6.自定义系统"></a>6.自定义系统</h3><p>定制Ubuntu镜像：<a href="https://www.zybuluo.com/fanisfun/note/802272" target="_blank" rel="noopener">https://www.zybuluo.com/fanisfun/note/802272</a></p><h3 id="7-cloudera-agent-启动报错解决方法"><a href="#7-cloudera-agent-启动报错解决方法" class="headerlink" title="7.cloudera-agent 启动报错解决方法"></a>7.cloudera-agent 启动报错解决方法</h3><p>错误1：ERROR    Failed to connect to previous supervisor.<br>通常是由于之前已经启动了agent残留下来的进程产生的影响，因此需要将之前的进程清除掉<br>执行命令</p><pre><code>kill -9 $(pgrep -f supervisord)然后重启，除了第一次安装要求复制cloudera-agent到系统/etc/init.d/目录下，建议放置到rc.local文件启动吧</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-hdfs文件迁移方法：&quot;&gt;&lt;a href=&quot;#1-hdfs文件迁移方法：&quot; class=&quot;headerlink&quot; title=&quot;1.hdfs文件迁移方法：&quot;&gt;&lt;/a&gt;1.hdfs文件迁移方法：&lt;/h2&gt;&lt;p&gt;参考链接：&lt;br&gt;&lt;a href=&quot;http://b
      
    
    </summary>
    
      <category term="笔记" scheme="https://xiongraorao.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="hadoop" scheme="https://xiongraorao.github.io/categories/%E7%AC%94%E8%AE%B0/hadoop/"/>
    
    
      <category term="hadoop" scheme="https://xiongraorao.github.io/tags/hadoop/"/>
    
      <category term="大数据" scheme="https://xiongraorao.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>caffe相关博客</title>
    <link href="https://xiongraorao.github.io/2017/06/04/caffe%E7%9B%B8%E5%85%B3%E5%8D%9A%E5%AE%A2/"/>
    <id>https://xiongraorao.github.io/2017/06/04/caffe相关博客/</id>
    <published>2017-06-04T01:31:57.000Z</published>
    <updated>2018-06-08T09:10:07.336Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="http://blog.csdn.net/hjimce/article/details/48933813" target="_blank" rel="noopener">深度学习（六）caffe入门学习</a></li><li><a href="http://m.blog.csdn.net/blog/wu010555688/24487301" target="_blank" rel="noopener">Deep Learning模型之：CNN卷积神经网络（一）深度解析CNN - 莫小 - 博客园</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/hjimce/article/details/48933813&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深度学习（六）caffe入门学习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href
      
    
    </summary>
    
      <category term="笔记" scheme="https://xiongraorao.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="caffe" scheme="https://xiongraorao.github.io/categories/%E7%AC%94%E8%AE%B0/caffe/"/>
    
    
      <category term="caffe" scheme="https://xiongraorao.github.io/tags/caffe/"/>
    
  </entry>
  
  <entry>
    <title>理解Linux系统/etc/init.d目录和/etc/rc.local脚本</title>
    <link href="https://xiongraorao.github.io/2017/05/24/%E7%90%86%E8%A7%A3Linux%E7%B3%BB%E7%BB%9F-etc-init-d%E7%9B%AE%E5%BD%95%E5%92%8C-etc-rc-local%E8%84%9A%E6%9C%AC/"/>
    <id>https://xiongraorao.github.io/2017/05/24/理解Linux系统-etc-init-d目录和-etc-rc-local脚本/</id>
    <published>2017-05-24T01:56:35.000Z</published>
    <updated>2018-06-08T09:10:07.353Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、关于-etc-init-d"><a href="#一、关于-etc-init-d" class="headerlink" title="一、关于/etc/init.d"></a>一、关于/etc/init.d</h2><p>如果你使用过Linux系统，那么你一定听说过init.d目录。这个目录到底是干嘛的呢？它归根结底只做了一件事情，但这件事情非同小可，是为整个系统做的，因此它非常重要。init.d目录包含许多系统各种服务的启动和停止脚本。它控制着所有从acpid到x11-common的各种事务。当然，init.d远远没有这么简单。（译者注：acpid 是linux操作系统新型电源管理标准 ；X11也叫做X Window系统，X Window系统 (X11或X)是一种位图显示的 视窗系统 。它是在 Unix 和 类Unix 操作系统 ，以及 OpenVMS 上建立图形用户界面 的标准工具包和协议，并可用于几乎已有的现代操作系统）。</p><p>当你查看/etc目录时，你会发现许多rc#.d 形式存在的目录（这里#代表一个指定的初始化级别，范围是0~6）。在这些目录之下，包含了许多对进程进行控制的脚本。这些脚本要么以”K”开头，要么以”S”开头。以K开头的脚本运行在以S开头的脚本之前。这些脚本放置的地方，将决定这些脚本什么时候开始运行。在这些目录之间，系统服务一起合作，就像运行状况良好的机器一样。然而，有时候你希望能在不使用kill 或killall 命令的情况下，能干净的启动或杀死一个进程。这就是/etc/init.d能够派上用场的地方了！</p><p>如果你在使用Fedora系统，你可以找到这个目录：/etc/rc.d/init.d。实际上无论init.d放在什么地方，它都发挥着相同的作用。</p><p>为了能够使用init.d目录下的脚本，你需要有root权限或sudo权限。每个脚本都将被作为一个命令运行，该命令的结构大致如下所示：</p><p>/etc/init.d/command 选项<br>comand是实际运行的命令，选项可以有如下几种：</p><ul><li>start</li><li>stop</li><li>reload</li><li>restart</li><li>force-reload</li></ul><p>大多数的情况下，你会使用start,stop,restart选项。例如，如果你想关闭网络，你可以使用如下形式的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> /etc/init.d/networking stop</span><br><span class="line">又比如，你改变了网络设置，并且需要重启网络。你可以使用如下命令：</span><br><span class="line">/etc/init.d/networking restart</span><br><span class="line">init.d目录下常用初始化脚本有：</span><br><span class="line"></span><br><span class="line">networking</span><br><span class="line">samba</span><br><span class="line">apache2</span><br><span class="line">ftpd</span><br><span class="line">sshd</span><br><span class="line">dovecot</span><br><span class="line">mysql</span><br></pre></td></tr></table></figure></p><p>当然，你可能有其他更多常用的脚本，这个取决于你安装了什么linux操作系统。</p><h2 id="二、关于-etc-rc-local"><a href="#二、关于-etc-rc-local" class="headerlink" title="二、关于/etc/rc.local"></a>二、关于/etc/rc.local</h2><p>rc.local也是我经常使用的一个脚本。该脚本是在系统初始化级别脚本运行之后再执行的，因此可以安全地在里面添加你想在系统启动之后执行的脚本。常见的情况是你可以再里面添加nfs挂载/mount脚本。此外，你也可以在里面添加一些调试用的脚本命令。例如，我就碰到过这种情况：samba服务总是无法正常运行，而检查发现，samba是在系统启动过程中就该启动执行的，也就是说，samba守护程序配置保证了这种功能本应该正确执行。碰到这种类似情况，一般我也懒得花大量时间去查为什么，我只需要简单的在/etc/rc.local脚本里加上这么一行：</p><pre><code>/etc/init.d/samba start</code></pre><p>这样就成功的解决了samba服务异常的问题。</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>Linux是灵活的。正因为它的灵活性，我们总是可以找到许多不同的办法来解决同一个问题。启动系统服务的例子就是一个很好的佐证。有了/etc/init.d目录下的脚本，再加上/etc/rc.local这个利器，你可以放心的确保你的服务可以完美的启动和运行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、关于-etc-init-d&quot;&gt;&lt;a href=&quot;#一、关于-etc-init-d&quot; class=&quot;headerlink&quot; title=&quot;一、关于/etc/init.d&quot;&gt;&lt;/a&gt;一、关于/etc/init.d&lt;/h2&gt;&lt;p&gt;如果你使用过Linux系统，那么你一
      
    
    </summary>
    
      <category term="IT" scheme="https://xiongraorao.github.io/categories/IT/"/>
    
      <category term="linux" scheme="https://xiongraorao.github.io/categories/IT/linux/"/>
    
    
      <category term="linux" scheme="https://xiongraorao.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu系统操作命令笔记（持续更新...）</title>
    <link href="https://xiongraorao.github.io/2017/05/24/%E5%8E%9F-Ubuntu%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0-%EF%BC%89/"/>
    <id>https://xiongraorao.github.io/2017/05/24/原-Ubuntu系统操作命令笔记（持续更新-）/</id>
    <published>2017-05-24T01:14:21.000Z</published>
    <updated>2018-06-08T09:10:07.348Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、修改用户密码"><a href="#1、修改用户密码" class="headerlink" title="1、修改用户密码"></a>1、修改用户密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd  =&gt;&gt;输入new-root-password</span><br></pre></td></tr></table></figure><h3 id="2、切换用户"><a href="#2、切换用户" class="headerlink" title="2、切换用户"></a>2、切换用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su username  =&gt;&gt;输入待切换用户的密码</span><br></pre></td></tr></table></figure><h3 id="3、提升权限"><a href="#3、提升权限" class="headerlink" title="3、提升权限"></a>3、提升权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su root (临时提升权限)</span><br><span class="line">sudo gedit /etc/passwd (永久提升权限)</span><br></pre></td></tr></table></figure><h3 id="4、设置环境变量"><a href="#4、设置环境变量" class="headerlink" title="4、设置环境变量"></a>4、设置环境变量</h3><ul><li>为单个用户设置（～/.bashrc）</li><li>全局设置（/etc/profile）</li><li>/etc/bashrc. 该文件是为每一个运行的shell用户执行操作，当bashshell被打开是，文件被读取</li><li>～/bash_profile: 每个用户可以使用该文件输入专用于自己的shell信息</li><li>/etc/environment: 在登录的时候操作系统使用的的第二个文件，系统在读取你的profile之前，设置文件的环境变量</li></ul><h3 id="5、ssh使用"><a href="#5、ssh使用" class="headerlink" title="5、ssh使用"></a>5、ssh使用</h3><p>1.登录远程主机<br>ssh username@host [-p port]  =&gt;input your host password<br>equals (ssh -l username host)<br>2.文件传输<br>scp username@serverhost:/serverfile /save path (download from server)<br>scp /local file username@serverhost:/server save path(upload to server)<br>从服务器下载或者上传整个目录<br>scp -r username@serverhost:/remote directory /local directory<br>scp -r /local directory username@serverhost:/remote directory<br>3.开启无密码ssh登录<br>client A; server B</p><ul><li>A: ssh-keygen -t rsa (三次回车，在～/.ssh目录下生成id_ras，id_rsa.pub两个文件，分别是私钥和公钥)</li><li>A: cat ~/.ssh/id_ras.pub &gt;&gt; ~/.ssh/authorized-keys（复制公钥到文件authorized-keys）</li><li>A: scp ~/.ssh/id_rsa.pub XXX@remotehost:/home/XXX/id_rsa.pub</li><li>B: cat ~/id_rsa.pub &gt;&gt;~/.ssh/authorized_keys(追加公钥到服务器的authorizied_keys文件中，<strong>注意登录到远程服务器操作此步骤</strong>)</li><li>A: ssh-add  ~/.ssh/id_rsa (添加私钥)</li><li>更改权限: chmod 700 ~/.ssh; chmod 600 ~/.ssh/authorized_keys</li></ul><h3 id="6、更改文件权限和所有者"><a href="#6、更改文件权限和所有者" class="headerlink" title="6、更改文件权限和所有者"></a>6、更改文件权限和所有者</h3><p>chmod [options] mode files/directory<br>mode=u,g,o 7=4读+2写+1执行，u用户，g，用户组，o，其他<br>+，-表示增加或者删除权限r,w,x表示读，写，执行三种权限，对应上面的三个数字。加上-R参数后就可以修改整个目录的文件的权限了。<br>chown username file/directory 更改文件的所有者</p><h3 id="7、系统查看指令"><a href="#7、系统查看指令" class="headerlink" title="7、系统查看指令"></a>7、系统查看指令</h3><p>tail -n number file 查看文件末尾number行<br>cat file 查看文件所有内容<br>ls -lh查看文件详细情<br>du -lh查看单独文件的大小<br>df -lh查看磁盘分区<br>gnome-system-monitor 查看资源管理器</p><h3 id="8、用户和用户组管理"><a href="#8、用户和用户组管理" class="headerlink" title="8、用户和用户组管理"></a>8、用户和用户组管理</h3><p><a href="http://www.cnblogs.com/xd502djj/archive/2011/11/23/2260094.html" target="_blank" rel="noopener">http://www.cnblogs.com/xd502djj/archive/2011/11/23/2260094.html</a></p><h3 id="9、修改locale"><a href="#9、修改locale" class="headerlink" title="9、修改locale"></a>9、修改locale</h3><p><a href="http://dgd2010.blog.51cto.com/1539422/1684813" target="_blank" rel="noopener">http://dgd2010.blog.51cto.com/1539422/1684813</a><br><a href="http://blog.csdn.net/myweishanli/article/details/23576847" target="_blank" rel="noopener">http://blog.csdn.net/myweishanli/article/details/23576847</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、修改用户密码&quot;&gt;&lt;a href=&quot;#1、修改用户密码&quot; class=&quot;headerlink&quot; title=&quot;1、修改用户密码&quot;&gt;&lt;/a&gt;1、修改用户密码&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="IT" scheme="https://xiongraorao.github.io/categories/IT/"/>
    
      <category term="linux" scheme="https://xiongraorao.github.io/categories/IT/linux/"/>
    
    
      <category term="ubuntu" scheme="https://xiongraorao.github.io/tags/ubuntu/"/>
    
      <category term="笔记" scheme="https://xiongraorao.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu端口转发</title>
    <link href="https://xiongraorao.github.io/2017/05/23/ubuntu%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
    <id>https://xiongraorao.github.io/2017/05/23/ubuntu端口转发/</id>
    <published>2017-05-23T13:11:44.000Z</published>
    <updated>2018-06-08T09:10:07.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-内网有一台公网服务器"><a href="#1-内网有一台公网服务器" class="headerlink" title="1. 内网有一台公网服务器"></a>1. 内网有一台公网服务器</h1><p><a href="http://blog.csdn.net/gobitan/article/details/50696641" target="_blank" rel="noopener">iptables方法</a></p><h1 id="2-内网没有公网服务器，只有云服务器"><a href="#2-内网没有公网服务器，只有云服务器" class="headerlink" title="2. 内网没有公网服务器，只有云服务器"></a>2. 内网没有公网服务器，只有云服务器</h1><blockquote><p>思路：利用ssh反向代理实现内网穿透</p></blockquote><p>准备工作：<br>假设内网有机器A(192.168.1.2),机器B(192.168.1.3),机器A机器B在一个局域网内，但是只有机器A能够访问互联网，本身没有静态公网IP,机器B可以访问机器A，但是无法访问互联网。另外有一台可访问的云服务器C(公网IP: 104.28.39.108)</p><p>目的：实现在任意有网络的地方访问服务器A和服务器B</p><ol><li>将机器A的ssh公钥复制到机器C的authorized_keys，实现A到C的免密码登陆</li><li>在机器A执行如下脚本：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch /home/hadoop/autossh/monitor-auto-ssh.sh &amp;&amp; chmod +x /home/hadoop/autossh/monitor-auto-ssh.sh</span><br><span class="line">vim /home/hadoop/autossh/monitor-auto-ssh.sh</span><br></pre></td></tr></table></figure><p>monitor-auto-ssh.sh内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check every 30 seconds</span></span><br><span class="line"><span class="comment"># crontab -e</span></span><br><span class="line"><span class="comment"># */1 * * * * bash /home/hadoop/autossh/monitor-auto-ssh.sh</span></span><br><span class="line"><span class="comment"># * * * * * sleep 30; bash /home/hadoop/autossh/monitor-auto-ssh.sh</span></span><br><span class="line"></span><br><span class="line">PROCESS_NAME=<span class="string">'55566'</span></span><br><span class="line">PROCESS_PATH=<span class="string">'/home/hadoop/autossh'</span></span><br><span class="line">START_PROCESS=<span class="string">"autossh -f -M 55567 -NR 55566:localhost:22 hadoop@104.28.39.108"</span></span><br><span class="line">VPN_PROCESS=<span class="string">"autossh -f -M 55577 -NR 10012:localhost:13838 hadoop@104.28.39.108"</span></span><br><span class="line">VPN_PROCESS_NAME=<span class="string">"10012"</span></span><br><span class="line"><span class="comment">#PORT_TRANS="ssh -C -f -N -g -R 8888:127.0.0.1:8888 hadoop@39.108.120.127"</span></span><br><span class="line"><span class="comment">#PORT_TRANS_NAME="8888:127.0.0.1:8888"</span></span><br><span class="line"></span><br><span class="line">proc_num()                      <span class="comment">#查询进程数量  </span></span><br><span class="line">&#123;  </span><br><span class="line">    num=`ps -ef | grep <span class="variable">$&#123;PROCESS_NAME&#125;</span> | grep -v grep | wc -l`  </span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$num</span>  </span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line">proc_num2()</span><br><span class="line">&#123;</span><br><span class="line">    num=`ps -ef | grep <span class="variable">$&#123;VPN_PROCESS_NAME&#125;</span> | grep -v grep | wc -l`  </span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$num</span></span><br><span class="line">&#125;</span><br><span class="line">proc_num    </span><br><span class="line">number=$?</span><br><span class="line">proc_num2</span><br><span class="line">number2=$?</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$number</span> -eq 0 ]            <span class="comment">#如果进程数量为0  </span></span><br><span class="line"><span class="keyword">then</span>                            <span class="comment">#重新启动服务</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Restarting <span class="variable">$&#123;PROCESS_NAME&#125;</span> ..."</span></span><br><span class="line">    <span class="built_in">echo</span> $(date <span class="string">'+%Y-%m-%d %T'</span>) &gt;&gt; <span class="variable">$&#123;PROCESS_PATH&#125;</span>/restart.log</span><br><span class="line">    (<span class="variable">$&#123;START_PROCESS&#125;</span>) &amp;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"over"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$number2</span> -eq 2 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"ssh proxy has been started!"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$number2</span> -eq 0 ]            <span class="comment">#如果进程数量为0  </span></span><br><span class="line"><span class="keyword">then</span>                            <span class="comment">#重新启动服务</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Restarting <span class="variable">$&#123;VPN_PROCESS_NAME&#125;</span> ..."</span></span><br><span class="line">    <span class="built_in">echo</span> $(date <span class="string">'+%Y-%m-%d %T'</span>) &gt;&gt; <span class="variable">$&#123;PROCESS_PATH&#125;</span>/restart.log</span><br><span class="line">    (<span class="variable">$&#123;VPN_PROCESS&#125;</span>) &amp;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"over"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$number</span> -eq 2 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"shadow proxy has been started!"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><ol start="3"><li>机器A执行定时检查任务，确保ssh隧道断开自动重连</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># check every 30 seconds</span></span><br><span class="line">crontab -e</span><br><span class="line">*/1 * * * * bash /home/hadoop/autossh/monitor-auto-ssh.sh</span><br><span class="line">* * * * * sleep 30; bash /home/hadoop/autossh/monitor-auto-ssh.sh</span><br></pre></td></tr></table></figure><ol start="4"><li>服务器C需要在云网络安全组开放55566和10012两个端口，这两个端口分别通过隧道反向代理A机器的22号端口和13838端口</li></ol><h3 id="外网访问方式"><a href="#外网访问方式" class="headerlink" title="外网访问方式"></a>外网访问方式</h3><ol><li><p>ssh 指定机器C的55566端口就可以连接到A机器了，通过A机器可以跳转到B机器，实现间接链接</p></li><li><p>搭建VPN。在机器A上安装<a href="https://shadowsocks.be/9.html" target="_blank" rel="noopener">shadowsocks服务器端</a>，并且设置端口为13838（要和脚本中的端口保持一致），然后客户端机器安装<a href="https://github.com/shadowsocks/shadowsocks/releases" target="_blank" rel="noopener">shadowsocks客户端</a>,代理服务器地址为104.28.39.108，端口为10012，用户名和密码从A机器上获取。</p></li></ol><p>至此，代理服务器搭建完毕，设置shadowsocks全局代理模式，默认将本地127.0.0.1的1080端口的请求全部转发到C服务器上的10012端口，而C服务器的10012端口通过autossh反向代理到了A机器的13838端口，从而实现了从外网任何一台可以上网的设备远程连接到没有公网环境的内网服务器A和服务器B，能够访问内网的任何服务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-内网有一台公网服务器&quot;&gt;&lt;a href=&quot;#1-内网有一台公网服务器&quot; class=&quot;headerlink&quot; title=&quot;1. 内网有一台公网服务器&quot;&gt;&lt;/a&gt;1. 内网有一台公网服务器&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.ne
      
    
    </summary>
    
      <category term="解决方案" scheme="https://xiongraorao.github.io/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="ubuntu" scheme="https://xiongraorao.github.io/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/ubuntu/"/>
    
    
      <category term="ubuntu" scheme="https://xiongraorao.github.io/tags/ubuntu/"/>
    
      <category term="iptable" scheme="https://xiongraorao.github.io/tags/iptable/"/>
    
      <category term="端口转发" scheme="https://xiongraorao.github.io/tags/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu14.04下 Cloudera Manager和CDH5.11的配置</title>
    <link href="https://xiongraorao.github.io/2017/05/23/Cloudera%20Manager%E5%92%8CCDH5-11%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>https://xiongraorao.github.io/2017/05/23/Cloudera Manager和CDH5-11的配置/</id>
    <published>2017-05-23T03:25:25.000Z</published>
    <updated>2018-06-08T09:10:07.333Z</updated>
    
    <content type="html"><![CDATA[<p>本教程用于搭建Clodera Manager和CDH5的大数据分析平台的搭建工作</p><h2 id="1-参考链接："><a href="#1-参考链接：" class="headerlink" title="1.参考链接："></a>1.参考链接：</h2><p><a href="http://www.cnblogs.com/codedevelop/p/6762555.html" target="_blank" rel="noopener">http://www.cnblogs.com/codedevelop/p/6762555.html</a> （博客园）<br><a href="http://blog.csdn.net/a921122/article/details/51939692" target="_blank" rel="noopener">http://blog.csdn.net/a921122/article/details/51939692</a> （csdn）<br><a href="http://blog.csdn.net/hualiu163/article/details/46659375" target="_blank" rel="noopener">http://blog.csdn.net/hualiu163/article/details/46659375</a> （CDH5.33 详细）<br><a href="http://www.aboutyun.com/thread-9075-1-1.html" target="_blank" rel="noopener">http://www.aboutyun.com/thread-9075-1-1.html</a> （在线安装，不推荐）</p><p>基本思路：<br>集群主机ip配置，关闭防火墙，设置ssh无密码登录，统一root密码，集群时间同步，安装oracle jdk，主节点安装mysql，并初始化scm数据库，下载parcel包，进入控制台设置等</p><h2 id="2-注意的问题："><a href="#2-注意的问题：" class="headerlink" title="2.注意的问题："></a>2.注意的问题：</h2><p>jdbc的问题：<br>安装hive时，需要将mysql驱动包复制到/opt/cloudera/parcels/CDH/lib/hive/lib/目录下，并且需要把mysql驱动复制到/usr/share/java/mysql-connector-java.jar下</p><p>目录权限问题，ssh免密码登录问题，mysql远程访问设置。。。</p><p>注意要添加root用户的访问host，不然后面初始化会出问题<br>grant all privileges on <em>.</em> to ‘root‘@’n1’ identified by ‘xxxx’ with grant option;</p><h2 id="3、官方安装教程"><a href="#3、官方安装教程" class="headerlink" title="3、官方安装教程"></a>3、官方安装教程</h2><p>官方手动安装教程（强烈建议按照官方教程来操作，可以少走很多坑，阿西吧）：<br><a href="https://www.cloudera.com/documentation/enterprise/latest/topics/cm_ig_install_path_c.html#id_v4k_pnn_25" target="_blank" rel="noopener">https://www.cloudera.com/documentation/enterprise/latest/topics/cm_ig_install_path_c.html#id_v4k_pnn_25</a><br>system requirement:<br><a href="https://www.cloudera.com/downloads/manager/5-11-0.html" target="_blank" rel="noopener">https://www.cloudera.com/downloads/manager/5-11-0.html</a></p><h2 id="4-主节点安装mysql5-6"><a href="#4-主节点安装mysql5-6" class="headerlink" title="4.主节点安装mysql5.6"></a>4.主节点安装mysql5.6</h2><p>在线安装：<a href="http://blog.csdn.net/chenpy/article/details/50344085" target="_blank" rel="noopener">http://blog.csdn.net/chenpy/article/details/50344085</a><br>离线安装：<a href="http://blog.csdn.net/linlinv3/article/details/51774040" target="_blank" rel="noopener">http://blog.csdn.net/linlinv3/article/details/51774040</a><br>注意要设置远程登录（具体参照官方教程：<a href="https://www.cloudera.com/documentation/enterprise/latest/topics/cm_ig_mysql.html#cmig_topic_5_5_2" target="_blank" rel="noopener">MySQL设置</a>）</p><p>创建数据库：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> amon <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> amon.* <span class="keyword">to</span> <span class="string">'amon'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'amon'</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> rman <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> rman.* <span class="keyword">to</span> <span class="string">'rman'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'rman'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> metastore <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> metastore.* <span class="keyword">to</span> <span class="string">'hive'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'hive'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> sentry <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> sentry.* <span class="keyword">to</span> <span class="string">'sentry'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'sentry'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">nav</span> <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> nav.* <span class="keyword">to</span> <span class="string">'nav'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'nav'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> navms <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> navms.* <span class="keyword">to</span> <span class="string">'navms'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'navms'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> hue <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8 <span class="keyword">default</span> <span class="keyword">collate</span> utf8_general_ci;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> hue.* <span class="keyword">to</span> <span class="string">'hue'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'hue'</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.schemata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> oozie;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> oozie.* <span class="keyword">to</span> <span class="string">'oozie'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'oozie'</span>;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> oozie.* <span class="keyword">to</span> <span class="string">'oozie'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'oozie'</span>;</span><br></pre></td></tr></table></figure></p><p>master节点交换内存设置：<br><a href="http://blog.chinaunix.net/uid-20051192-id-3557817.html" target="_blank" rel="noopener">http://blog.chinaunix.net/uid-20051192-id-3557817.html</a></p><p>这里注意下，官网教程上面的reboot后自动启动的命令有点问题，直接启动和命令启动的时候运行的进程不一致<br>update-rc.d -f cloudera-scm-server remove<br>update-rc.d -f cloudera-scm-agent remove<br>貌似不能随便去掉这个过程，否则后面又会出现这个问题</p><p>安装kafka的问题：<br>首先参考官方教程，分配kafka parcel包，然后安装，第一次安装会遇到问题，解决方案如下：<br><a href="http://www.aboutyun.com/thread-19903-1-1.html" target="_blank" rel="noopener">http://www.aboutyun.com/thread-19903-1-1.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本教程用于搭建Clodera Manager和CDH5的大数据分析平台的搭建工作&lt;/p&gt;
&lt;h2 id=&quot;1-参考链接：&quot;&gt;&lt;a href=&quot;#1-参考链接：&quot; class=&quot;headerlink&quot; title=&quot;1.参考链接：&quot;&gt;&lt;/a&gt;1.参考链接：&lt;/h2&gt;&lt;p&gt;&lt;a
      
    
    </summary>
    
      <category term="解决方案" scheme="https://xiongraorao.github.io/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="hadoop" scheme="https://xiongraorao.github.io/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/hadoop/"/>
    
    
      <category term="hadoop" scheme="https://xiongraorao.github.io/tags/hadoop/"/>
    
      <category term="CDH5" scheme="https://xiongraorao.github.io/tags/CDH5/"/>
    
      <category term="Cloudera Manager" scheme="https://xiongraorao.github.io/tags/Cloudera-Manager/"/>
    
  </entry>
  
  <entry>
    <title>linux服务器时间同步</title>
    <link href="https://xiongraorao.github.io/2017/04/25/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/"/>
    <id>https://xiongraorao.github.io/2017/04/25/linux服务器时间同步/</id>
    <published>2017-04-25T10:57:24.000Z</published>
    <updated>2018-06-08T09:10:07.340Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ubuntu下服务器时间同步"><a href="#Ubuntu下服务器时间同步" class="headerlink" title="Ubuntu下服务器时间同步"></a>Ubuntu下服务器时间同步</h3><h4 id="1-时间服务器配置"><a href="#1-时间服务器配置" class="headerlink" title="1.时间服务器配置"></a>1.时间服务器配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#服务器cloud01,cloud02,cloud03都安装ntp服务</span></span><br><span class="line">sudo apt-get install ntp</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看服务是否启动</span></span><br><span class="line">service --status-all</span><br><span class="line">[+]表示启动</span><br><span class="line"></span><br><span class="line"><span class="comment">#选择cloud01作为时间同步服务器</span></span><br><span class="line">ssh cloud01</span><br><span class="line">sudo vi /etc/ntp.conf</span><br><span class="line">=====</span><br><span class="line">1. 修改server</span><br><span class="line">server [IP or hostname] [prefer]</span><br><span class="line">在 server 后端可以接 IP 或主机名，个人比较喜欢使用 IP 来设定， perfer 表示『优先使用』的服务器。</span><br><span class="line">server 2.cn.pool.ntp.org prefer</span><br><span class="line">server 0.asia.pool.ntp.org prefer</span><br><span class="line">server 3.asia.pool.ntp.org prefer</span><br><span class="line"></span><br><span class="line">2. 修改本地server</span><br><span class="line"><span class="comment">#让NTP Server和其自身保持同步，如果在/etc/ntp.conf中定义的server都不可用时，将使用local时间作为ntp服务提供给ntp客户端</span></span><br><span class="line">server 127.127.1.0</span><br><span class="line">fudge 127.127.1.0 stratum 5</span><br><span class="line"></span><br><span class="line">3.  restrict管理时间服务器权限</span><br><span class="line"><span class="comment">#不允许来自公网上ipv4和ipv6客户端的访问</span></span><br><span class="line">restrict -4 default kod notrap nomodify nopeer noquery</span><br><span class="line">restrict -6 default kod notrap nomodify nopeer noquery</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">restrict 192.168.1.0 mask 255.255.255.0 nomodify notrap</span><br><span class="line">=====</span><br></pre></td></tr></table></figure><h4 id="2-请求对时客户端配置"><a href="#2-请求对时客户端配置" class="headerlink" title="2.请求对时客户端配置"></a>2.请求对时客户端配置</h4><p>这里cloud02和cloud03分别是客户端<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装ntp服务</span></span><br><span class="line">sudo apt-get install ntp</span><br><span class="line">sudo vi /etc/ntp.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#去掉之前默认的server</span></span><br><span class="line">server 192.168.1.1（时间服务器的ip）</span><br><span class="line">fudge 192.168.1.1 stratum 5</span><br></pre></td></tr></table></figure></p><h4 id="3-客户端和时间服务器同步"><a href="#3-客户端和时间服务器同步" class="headerlink" title="3.客户端和时间服务器同步"></a>3.客户端和时间服务器同步</h4><ul><li><p>使用ntpdate更新时间</p><h1 id="注意要停止ntp服务才能使用ntpdate更新时间"><a href="#注意要停止ntp服务才能使用ntpdate更新时间" class="headerlink" title="注意要停止ntp服务才能使用ntpdate更新时间"></a>注意要停止ntp服务才能使用ntpdate更新时间</h1><p>sudo ntpdate 192.168.1.1<br>sudo hwclock –systohc #将系统时间写入硬件时间<br>sudo hwclock –hctosys #将硬件时间写入系统时间</p></li><li><p>使用ntpd更新时间<br>sudo service ntp start #启动ntp进程，自动逐渐同步时间</p></li></ul><h4 id="4-查看时间状态"><a href="#4-查看时间状态" class="headerlink" title="4.查看时间状态"></a>4.查看时间状态</h4><p>timedatectl status<br>sudo ntpq -p</p><h4 id="5-更换时区"><a href="#5-更换时区" class="headerlink" title="5.更换时区"></a>5.更换时区</h4><p>sudo tzselect</p><h3 id="常见错误解决方案"><a href="#常见错误解决方案" class="headerlink" title="常见错误解决方案"></a>常见错误解决方案</h3><ol><li>no server suitable for synchronization found<br>参考链接：<a href="http://www.blogjava.net/spray/archive/2008/07/10/213964.html" target="_blank" rel="noopener">http://www.blogjava.net/spray/archive/2008/07/10/213964.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Ubuntu下服务器时间同步&quot;&gt;&lt;a href=&quot;#Ubuntu下服务器时间同步&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu下服务器时间同步&quot;&gt;&lt;/a&gt;Ubuntu下服务器时间同步&lt;/h3&gt;&lt;h4 id=&quot;1-时间服务器配置&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="解决方案" scheme="https://xiongraorao.github.io/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="linux" scheme="https://xiongraorao.github.io/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/linux/"/>
    
    
      <category term="linux" scheme="https://xiongraorao.github.io/tags/linux/"/>
    
      <category term="ntp" scheme="https://xiongraorao.github.io/tags/ntp/"/>
    
  </entry>
  
  <entry>
    <title>mysql命令</title>
    <link href="https://xiongraorao.github.io/2017/04/24/mysql%E5%91%BD%E4%BB%A4/"/>
    <id>https://xiongraorao.github.io/2017/04/24/mysql命令/</id>
    <published>2017-04-24T11:50:40.000Z</published>
    <updated>2018-06-08T09:10:07.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、mysql的安装"><a href="#1、mysql的安装" class="headerlink" title="1、mysql的安装"></a>1、mysql的安装</h2><p><a href="https://www.cnblogs.com/xinjing-jingxin/p/8025805.html" target="_blank" rel="noopener">linux下mysql安装-博客园</a></p><h2 id="2、用户管理"><a href="#2、用户管理" class="headerlink" title="2、用户管理"></a>2、用户管理</h2><p>启动服务：<br>net start mysqld<br>链接数据库：<br>mysql -uroot -p<br>修改root用户密码：<br>mysqladmin -u root password “new_password”;</p><h3 id="2-1新建用户"><a href="#2-1新建用户" class="headerlink" title="2.1新建用户"></a>2.1新建用户</h3><p>mysql -uroot -p //登录mysql<br>mysql&gt; insert into mysql.user(Host,User,Password) values(“localhost”,”test”,password(“1234”));<br>//localhost表示只能在本机登录，改为”%”则可以远程登录</p><p>或者：<br>mysql&gt; CREATE USER ‘username‘@’host’ IDENTIFIED BY ‘password’;</p><h3 id="2-2用户授权"><a href="#2-2用户授权" class="headerlink" title="2.2用户授权"></a>2.2用户授权</h3><p>grant 权限 on 数据库.* to ‘username‘@’host’ identified by ‘password’<br>权限：select, update, all, delete, create, drop</p><h3 id="2-3删除用户"><a href="#2-3删除用户" class="headerlink" title="2.3删除用户"></a>2.3删除用户</h3><p>Delete FROM user Where User=’test’ and Host=’localhost’;<br>flush privileges;<br>drop database 用户数据库名;<br>drop user 用户名@’%’<br>drop user 用户名@‘localhost’</p><h3 id="2-4修改用户密码"><a href="#2-4修改用户密码" class="headerlink" title="2.4修改用户密码"></a>2.4修改用户密码</h3><p>mysql&gt;update mysql.user set password=password(‘新密码’) where User=”test” and Host=”localhost”;<br>mysql&gt;flush privileges;</p><p>在5.7版本的mysql中，没有“password”这个字段，因此需要使用“authentication_string”这个字段来替换“password”字段</p><p>或者采用以下命令：ALTER USER ‘root‘@’localhost’IDENTIFIED<br> BY ‘<strong><em>**</em></strong>‘</p><h3 id="2-5撤销用户权限"><a href="#2-5撤销用户权限" class="headerlink" title="2.5撤销用户权限"></a>2.5撤销用户权限</h3><p>REVOKE 权限 ON databasename.tablename FROM ‘username‘@’host’;</p><h3 id="2-6常用命令"><a href="#2-6常用命令" class="headerlink" title="2.6常用命令"></a>2.6常用命令</h3><p>show databases;//列出所有数据库<br>use ‘databasename’;//切换数据库<br>show tables;//列出所有表<br>describe tablename;//显示数据表结构<br>drop database 数据库名;//删除数据库<br>drop database 表名;//删除表</p><h3 id="2-7重置root密码"><a href="#2-7重置root密码" class="headerlink" title="2.7重置root密码"></a>2.7重置root密码</h3><ul><li>修改安装目录下的my.ini文件，添加一行：skip-grant-tables</li><li><p>重启mysql服务：<br>windows(管理员模式):net stop mysql; net start mysql;</p></li><li><p>mysql -uroot -p(直接回车登录)</p></li><li>update mysql.user set authentication_string=password(‘新密码’) where User=”root”</li><li>注释my.ini文件中skip-grant-tables这一行</li><li>重启mysql服务</li></ul><h2 id="3-常见问题"><a href="#3-常见问题" class="headerlink" title="3.常见问题"></a>3.常见问题</h2><ul><li><p>远程连接问题：</p><blockquote><p>解决方案如下：<br>1、授权<br>mysql&gt;grant all privileges on <em>.</em>  to  ‘root‘@’%’  identified by ‘youpassword’  with grant option;<br>mysql&gt;flush privileges;<br>2、修改/etc/mysql/my.conf<br>找到bind-address = 127.0.0.1这一行,注释即可</p></blockquote></li><li><p>重启mysql服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># service mysqld start (5.0版本是mysqld)</span></span><br><span class="line">[root@szxdb etc]<span class="comment"># service mysql start (5.5.7版本是mysql)</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、mysql的安装&quot;&gt;&lt;a href=&quot;#1、mysql的安装&quot; class=&quot;headerlink&quot; title=&quot;1、mysql的安装&quot;&gt;&lt;/a&gt;1、mysql的安装&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/xinji
      
    
    </summary>
    
      <category term="笔记" scheme="https://xiongraorao.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="mysql" scheme="https://xiongraorao.github.io/categories/%E7%AC%94%E8%AE%B0/mysql/"/>
    
    
      <category term="mysql" scheme="https://xiongraorao.github.io/tags/mysql/"/>
    
      <category term="数据库" scheme="https://xiongraorao.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>java核心技术（一）</title>
    <link href="https://xiongraorao.github.io/2017/04/21/java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://xiongraorao.github.io/2017/04/21/java核心技术（一）/</id>
    <published>2017-04-21T01:06:51.000Z</published>
    <updated>2018-06-08T09:10:07.337Z</updated>
    
    <content type="html"><![CDATA[<h3 id="java基本程序设计结构"><a href="#java基本程序设计结构" class="headerlink" title="java基本程序设计结构"></a>java基本程序设计结构</h3><h4 id="1-java字符串"><a href="#1-java字符串" class="headerlink" title="1.java字符串"></a>1.java字符串</h4><ol><li><p>java编译器让不可变的字符串共享，所有的不可变字符串会存放在公共的存储池中，字符串变量指向存储池中的字符串的相应位置。类似于c++中的字符串指针，一旦字符串没人用，java自动回收机制会自动回收该字符串。</p></li><li><p>如何判断String字符串是否为空？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">1</span>: 判断java字符串是否为空</span><br><span class="line">======</span><br><span class="line"><span class="keyword">if</span>(str.length()==<span class="number">0</span>)</span><br><span class="line">或 <span class="keyword">if</span>(str.equals(<span class="string">""</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: 判断是否为<span class="keyword">null</span></span><br><span class="line">======</span><br><span class="line"><span class="keyword">if</span>(str == <span class="keyword">null</span>)</span><br><span class="line">这两种方式不一样，<span class="keyword">null</span>表示当前的String变量没有与对象关联。</span><br></pre></td></tr></table></figure></li><li><p>常用String API</p><ul><li>trim() 去掉原始字符串头尾空格</li><li>lasetIndexOf(String str) 返回str匹配的第一个子串的开始位置</li><li>toLowerCase() toUpperCase()</li></ul></li></ol><h4 id="2-java输入输出"><a href="#2-java输入输出" class="headerlink" title="2.java输入输出"></a>2.java输入输出</h4><ol><li><p>读取文本输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String name = in.nextLine();<span class="comment">//输入如果有空格采用该种方法</span></span><br><span class="line">String sex = in.next();<span class="comment">//输入空格隔开调用该方法</span></span><br><span class="line"><span class="keyword">int</span> age = in.nextInt();<span class="comment">//读取整数,nextDouble类似返回双精度浮点数</span></span><br></pre></td></tr></table></figure></li><li><p>读取密码输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Console cons = System.console();<span class="comment">//console对象每次只能读取一行输入</span></span><br><span class="line">String user = cons.readLine(<span class="string">"User name: "</span>);</span><br><span class="line"><span class="keyword">char</span>[] passwd = cons.readPassword(<span class="string">"Password: "</span>);</span><br></pre></td></tr></table></figure></li><li><p>大数值的计算<br>java的基本数据类型：</p></li></ol><table><thead><tr><th>类型</th><th>字节</th></tr></thead><tbody><tr><td>int</td><td>4</td></tr><tr><td>short</td><td>2</td></tr><tr><td>logn</td><td>8</td></tr><tr><td>byte</td><td>1</td></tr><tr><td>float</td><td>4</td></tr><tr><td>double</td><td>8</td></tr></tbody></table><p>NaN：当数据溢出时显示无穷大</p><p>java提供了BigInteger和BigDecimal两个类，可以处理包含任意长度数字序列的数值，分别实现了任意精度的整数运算和浮点数运算。</p><ol start="4"><li>java数组<br>for each循环: for(T element: collection<t>){};<br>匿名数组 new String[] {“ss”,”rr”};<br><strong>java中允许数组长度为0，但数组长度为0不等于null</strong><br>new elementType[0];// 不是null<br>数组拷贝：Arrays.copyOf(T[] arrayVar, int lenth);</t></li></ol><h4 id="java对象和类"><a href="#java对象和类" class="headerlink" title="java对象和类"></a>java对象和类</h4><ol><li><p>java运行内存管理<br><a href="http://www.importnew.com/21463.html" target="_blank" rel="noopener">http://www.importnew.com/21463.html</a><br><a href="http://www.cnblogs.com/gw811/archive/2012/10/18/2730117.html" target="_blank" rel="noopener">http://www.cnblogs.com/gw811/archive/2012/10/18/2730117.html</a><br><a href="http://blog.csdn.net/hairetz/article/details/4141043/" target="_blank" rel="noopener">堆和栈的区别</a></p></li><li><p>访问时间<br>Date()类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">date.getTime();<span class="comment">// = System.currentTimeMillis()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//还可以使用 LocalDate()和Calendar()这两个类</span></span><br></pre></td></tr></table></figure></li><li><p>java编译<br>javac 类名.java<br>java有两种编译方式：显示编译和隐式编译。显示编译某个文件时，如果该文件调用了其他的类，则会对引用的类进行编译操作，如果被引用的类被修改了，则会重新编译新版本的.class文件</p></li><li><p>java封装<br>java类的成员都应该设置为私有的，否则很危险。通常使用共有的方法来对私有成员进行读写。成员方法大部分设计为共有方法，一旦设计成公有的，不能随便删除，因为其他的代码可能依赖它。</p></li><li><p>静态导入包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.*;</span><br><span class="line">out.println(<span class="string">"hello world!"</span>);<span class="comment">//静态导入包，不用加类名前缀就可以直接访问方法。</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;java基本程序设计结构&quot;&gt;&lt;a href=&quot;#java基本程序设计结构&quot; class=&quot;headerlink&quot; title=&quot;java基本程序设计结构&quot;&gt;&lt;/a&gt;java基本程序设计结构&lt;/h3&gt;&lt;h4 id=&quot;1-java字符串&quot;&gt;&lt;a href=&quot;#1-ja
      
    
    </summary>
    
      <category term="笔记" scheme="https://xiongraorao.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="java" scheme="https://xiongraorao.github.io/categories/%E7%AC%94%E8%AE%B0/java/"/>
    
    
      <category term="java" scheme="https://xiongraorao.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java设计模式（三）：行为型模式</title>
    <link href="https://xiongraorao.github.io/2017/04/07/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://xiongraorao.github.io/2017/04/07/java设计模式（三）：行为型模式/</id>
    <published>2017-04-07T14:39:29.000Z</published>
    <updated>2018-06-08T09:10:07.338Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/u013142781/article/details/50825301" target="_blank" rel="noopener">参考链接：http://blog.csdn.net/u013142781/article/details/50825301</a></p><p>行为型模式细分为如下11种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/u013142781/article/details/50825301&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考链接：http://blog.csdn.net/u013142781/ar
      
    
    </summary>
    
      <category term="笔记" scheme="https://xiongraorao.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="java" scheme="https://xiongraorao.github.io/categories/%E7%AC%94%E8%AE%B0/java/"/>
    
    
      <category term="java" scheme="https://xiongraorao.github.io/tags/java/"/>
    
      <category term="设计模式" scheme="https://xiongraorao.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>java设计模式（二）：结构型模式</title>
    <link href="https://xiongraorao.github.io/2017/04/07/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://xiongraorao.github.io/2017/04/07/java设计模式（二）：结构型模式/</id>
    <published>2017-04-07T14:39:19.000Z</published>
    <updated>2018-06-08T09:10:07.338Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/u013142781/article/details/50821155" target="_blank" rel="noopener">参考链接：http://blog.csdn.net/u013142781/article/details/50821155</a></p><h2 id="一、结构型模式分类："><a href="#一、结构型模式分类：" class="headerlink" title="一、结构型模式分类："></a>一、结构型模式分类：</h2><p>一共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。其中适配器模式主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式。其中的对象的适配器模式是各种结构型模式的起源。</p><h2 id="二、适配器模式："><a href="#二、适配器模式：" class="headerlink" title="二、适配器模式："></a>二、适配器模式：</h2><p>适配器模式主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式。</p><p>适配器模式将某个类的接口转换成客户端期望的另一个接口表示，目的是消除由于接口不匹配所造成的类的兼容性问题。有点抽象，我们来看看详细的内容。</p><h2 id="三、装饰模式："><a href="#三、装饰模式：" class="headerlink" title="三、装饰模式："></a>三、装饰模式：</h2><p>装饰模式：在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。</p><p>装饰模式的特点：</p><p>（1） 装饰对象和真实对象有相同的接口。这样客户端对象就能以和真实对象相同的方式和装饰对象交互。<br>（2） 装饰对象包含一个真实对象的引用（reference）<br>（3） 装饰对象接受所有来自客户端的请求。它把这些请求转发给真实的对象。<br>（4） 装饰对象可以在转发这些请求以前或以后增加一些附加功能。这样就确保了在运行时，不用修改给定对象的结构就可以在外部增加附加的功能。在面向对象的设计中，通常是通过继承来实现对给定类的功能扩展。继承不能做到这一点，继承的功能是静态的，不能动态增删。</p><h2 id="四、代理模式："><a href="#四、代理模式：" class="headerlink" title="四、代理模式："></a>四、代理模式：</h2><p>代理模式就是多一个代理类出来，替原对象进行一些操作。代理类就像中介，它比我们掌握着更多的信息。</p><h2 id="五、外观模式："><a href="#五、外观模式：" class="headerlink" title="五、外观模式："></a>五、外观模式：</h2><p>外观模式是为了解决类与类之间的依赖关系的，像spring一样，可以将类和类之间的关系配置到配置文件中，而外观模式就是将他们的关系放在一个Facade类中，降低了类类之间的耦合度，该模式中没有涉及到接口。</p><h2 id="六、桥接模式："><a href="#六、桥接模式：" class="headerlink" title="六、桥接模式："></a>六、桥接模式：</h2><p>在软件系统中，某些类型由于自身的逻辑，它具有两个或多个维度的变化，那么如何应对这种“多维度的变化”？如何利用面向对象的技术来使得该类型能够轻松的沿着多个方向进行变化，而又不引入额外的复杂度？这就要使用Bridge模式。</p><p>在提出桥梁模式的时候指出，桥梁模式的用意是”将抽象化(Abstraction)与实现化(Implementation)脱耦，使得二者可以独立地变化”。这句话有三个关键词，也就是抽象化、实现化和脱耦。</p><ul><li>抽象化：存在于多个实体中的共同的概念性联系，就是抽象化。作为一个过程，抽象化就是忽略一些信息，从而把不同的实体当做同样的实体对待。</li><li>实现化：抽象化给出的具体实现，就是实现化。</li><li>脱耦：所谓耦合，就是两个实体的行为的某种强关联。而将它们的强关联去掉，就是耦合的解脱，或称脱耦。在这里，脱耦是指将抽象化和实现化之间的耦合解脱开，或者说是将它们之间的强关联改换成弱关联</li></ul><h2 id="七、组合模式"><a href="#七、组合模式" class="headerlink" title="七、组合模式"></a>七、组合模式</h2><p>组合模式，将对象组合成树形结构以表示“部分-整体”的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。掌握组合模式的重点是要理解清楚 “部分/整体” 还有 ”单个对象“ 与 “组合对象” 的含义。</p><p>组合模式让你可以优化处理递归或分级数据结构。</p><p>《设计模式》：将对象组合成树形结构以表示“部分整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p><p>涉及角色：</p><p>Component：是组合中的对象声明接口，在适当的情况下，实现所有类共有接口的默认行为。声明一个接口用于访问和管理Component子部件。</p><p>Leaf：在组合中表示叶子结点对象，叶子结点没有子结点。</p><p>Composite：定义有枝节点行为，用来存储子部件，在Component接口中实现与子部件有关操作，如增加(add)和删除(remove)等。</p><p>比如现实中公司内各部门的层级关系，请看代码：</p><p>Component：是组合中的对象声明接口，在适当的情况下，实现所有类共有接口的默认行为。声明一个接口用于访问和管理Component子部件。</p><h2 id="八、享元模式"><a href="#八、享元模式" class="headerlink" title="八、享元模式"></a>八、享元模式</h2><p>享元模式的主要目的是实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，通常与工厂模式一起使用。</p><p>一提到共享池，我们很容易联想到Java里面的JDBC连接池，想想每个连接的特点，我们不难总结出：适用于作共享的一些个对象，他们有一些共有的属性，就拿数据库连接池来说，url、driverClassName、username、password及dbname，这些属性对于每个连接来说都是一样的，所以就适合用享元模式来处理，建一个工厂类，将上述类似属性作为内部数据，其它的作为外部数据，在方法调用时，当做参数传进来，这样就节省了空间，减少了实例的数量。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/u013142781/article/details/50821155&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考链接：http://blog.csdn.net/u013142781/ar
      
    
    </summary>
    
      <category term="笔记" scheme="https://xiongraorao.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="java" scheme="https://xiongraorao.github.io/categories/%E7%AC%94%E8%AE%B0/java/"/>
    
    
      <category term="java" scheme="https://xiongraorao.github.io/tags/java/"/>
    
      <category term="设计模式" scheme="https://xiongraorao.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>java设计模式（一）：创建型模式</title>
    <link href="https://xiongraorao.github.io/2017/04/07/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://xiongraorao.github.io/2017/04/07/java设计模式（一）：创建型模式/</id>
    <published>2017-04-07T14:39:05.000Z</published>
    <updated>2018-06-08T09:10:07.337Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/maowang1991/archive/2013/04/15/3023236.html" target="_blank" rel="noopener">参考链接：http://www.cnblogs.com/maowang1991/archive/2013/04/15/3023236.html</a><br><a href="http://blog.csdn.net/u013142781/article/details/50816245" target="_blank" rel="noopener">http://blog.csdn.net/u013142781/article/details/50816245</a></p><h2 id="一、设计模式分类"><a href="#一、设计模式分类" class="headerlink" title="一、设计模式分类"></a>一、设计模式分类</h2><p>总体来说设计模式分为三大类：</p><p>创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p><p>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p><p>行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p><p>其实还有两类：并发型模式和线程池模式。用一个图片来整体描述一下：<br><img src="/images/java设计模式（一）：创建型模式-1.jpg" alt="java设计模式之间的关系"></p><h2 id="二、设计模式的六大原则"><a href="#二、设计模式的六大原则" class="headerlink" title="二、设计模式的六大原则"></a>二、设计模式的六大原则</h2><ul><li><p>开闭原则（Open Close Principle）<br>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p></li><li><p>里氏代换原则（Liskov Substitution Principle）<br>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。</p></li><li><p>依赖倒转原则（Dependence Inversion Principle）<br>这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。</p></li><li><p>接口隔离原则（Interface Segregation Principle）<br>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</p></li><li><p>迪米特法则（最少知道原则）（Demeter Principle）<br>一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</p></li><li><p>合成复用原则（Composite Reuse Principle）<br>原则是尽量使用合成/聚合的方式，而不是使用继承。</p></li></ul><h2 id="三、工厂方法模式"><a href="#三、工厂方法模式" class="headerlink" title="三、工厂方法模式"></a>三、工厂方法模式</h2><h3 id="1、普通工厂模式"><a href="#1、普通工厂模式" class="headerlink" title="1、普通工厂模式"></a>1、普通工厂模式</h3><p>建立一个工厂类，对实现了同一接口的类进行实例的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># 创建类的共同接口</span><br><span class="line">======</span><br><span class="line">Active.java</span><br><span class="line">======</span><br><span class="line"><span class="keyword">public</span> Interface Active&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">spark</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 创建实现类</span><br><span class="line">======</span><br><span class="line">Cat.java</span><br><span class="line">======</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Active</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function">pubic <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"I eat fish!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">======</span><br><span class="line">Dog.java</span><br><span class="line">======</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Active</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function">pubic <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"I eat meat!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 创建工厂类</span><br><span class="line">======</span><br><span class="line">ActiveFactory.java</span><br><span class="line">======</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveFactory</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Active <span class="title">produce</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(type.equals(<span class="string">"cat"</span>))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.equals(<span class="string">"dog"</span>))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">"Error! please intput correct type!"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  # test</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    ActiveFactory activeFactory = <span class="keyword">new</span> ActiveFactory();</span><br><span class="line">    Active active = activeFactory.produce(<span class="string">"cat"</span>);</span><br><span class="line">    active.eat(); <span class="comment">//output ===&gt; "I eat fish!"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-多个工厂方法模式"><a href="#2-多个工厂方法模式" class="headerlink" title="2.多个工厂方法模式"></a>2.多个工厂方法模式</h3><p>在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">======</span><br><span class="line">ActiveFactory.java</span><br><span class="line">======</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveFactory</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Active <span class="title">produceCat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Active <span class="title">produceDog</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  # test</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    ActiveFactory activeFactory = <span class="keyword">new</span> ActiveFactory();</span><br><span class="line">    Active active = activeFactory.produceCat(<span class="string">"cat"</span>);</span><br><span class="line">    active.eat(); <span class="comment">//output ===&gt; "I eat fish!"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-静态工厂模式"><a href="#3-静态工厂模式" class="headerlink" title="3.静态工厂模式"></a>3.静态工厂模式</h3><p>将多个工厂方法模式中的方法置为静态的，不需要创建实例，直接调用即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">======</span><br><span class="line">ActiveFactory.java</span><br><span class="line">======</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveFactory</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Active <span class="title">produceCat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Active <span class="title">produceDog</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  # test</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Active active = ActiveFactory.produceCat(<span class="string">"cat"</span>);</span><br><span class="line">    active.eat(); <span class="comment">//output ===&gt; "I eat fish!"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="四、抽象工厂模式"><a href="#四、抽象工厂模式" class="headerlink" title="四、抽象工厂模式"></a>四、抽象工厂模式</h2><p>在一般的工厂模式中，类的创建依赖工厂类，如果要扩展程序，必须对工厂类进行修改，违背了闭包原则，因此<br>需要用抽象工厂模式，创建多个工厂类，一旦需要增加新的功能，直接增加新的工厂类就可以<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">======</span><br><span class="line">Provider.java</span><br><span class="line">======</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Provider</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Active <span class="title">produce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">======</span><br><span class="line">ActiveCatFactory.java</span><br><span class="line">======</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveCatFactory</span> <span class="keyword">implements</span> <span class="title">Provider</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Active <span class="title">produce</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">======</span><br><span class="line">ActiveDogFactory.java</span><br><span class="line">======</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveDogFactory</span> <span class="keyword">implements</span> <span class="title">Provider</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Active <span class="title">produce</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="五、单例模式"><a href="#五、单例模式" class="headerlink" title="五、单例模式"></a>五、单例模式</h2><p>在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">======</span><br><span class="line">Singleton.java</span><br><span class="line">======</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 持有私有静态实例，防止被引用，此处赋值为null，目的是实现延迟加载 */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 私有构造方法，防止被实例化 */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 静态工程方法，创建实例 */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类可以满足基本要求，但是，像这样毫无线程安全保护的类，如果我们把它放入多线程的环境下，肯定就会出现问题了，如何解决？我们首先会想到对getInstance方法加synchronized关键字，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>但是，synchronized关键字锁住的是这个对象，这样的用法，在性能上会有所下降，因为每次调用getInstance()，都要对对象上锁，事实上，只有在第一次创建对象的时候需要加锁，之后就不需要了，所以，这个地方需要改进。我们改成下面这个：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">synchronized</span> (instance) &#123;  </span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>改程序在多线程的时候还是有可能发生错误，因此需要进一步改善<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFactory</span></span>&#123;           </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();           </span><br><span class="line">    &#125;           </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;           </span><br><span class="line">        <span class="keyword">return</span> SingletonFactory.instance;           </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><a href="http://www.cnblogs.com/maowang1991/archive/2013/04/15/3023236.html" target="_blank" rel="noopener">参考链接</a></p><h2 id="六、建造者模式"><a href="#六、建造者模式" class="headerlink" title="六、建造者模式"></a>六、建造者模式</h2><p>工厂类模式提供的是创建单个类的模式，而建造者模式则是将各种产品集中起来进行管理，用来创建复合对象，所谓复合对象就是指某个类具有不同的属性，其实建造者模式就是前面抽象工厂模式和最后的Test结合起来得到的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Active&gt; list = <span class="keyword">new</span> ArrayList&lt;Active&gt;();  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceCatActive</span><span class="params">(<span class="keyword">int</span> count)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;count; i++)&#123;  </span><br><span class="line">            list.add(<span class="keyword">new</span> Cat());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceDogActive</span><span class="params">(<span class="keyword">int</span> count)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;count; i++)&#123;  </span><br><span class="line">            list.add(<span class="keyword">new</span> Dog());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      Builder builder = <span class="keyword">new</span> Builder();  </span><br><span class="line">      builder.produceMailSender(<span class="number">10</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、原型模式"><a href="#七、原型模式" class="headerlink" title="七、原型模式"></a>七、原型模式</h2><p>原型模式虽然是创建型的模式，但是与工程模式没有关系，从名字即可看出，该模式的思想就是将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象。本小结会通过对象的复制，进行讲解。在Java中，复制对象是通过clone()实现的，先创建一个原型类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;  </span><br><span class="line">        Prototype proto = (Prototype) <span class="keyword">super</span>.clone();  </span><br><span class="line">        <span class="keyword">return</span> proto;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>深浅复制的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;  </span><br><span class="line">    <span class="keyword">private</span> String string;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SerializableObject obj;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 浅复制 */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;  </span><br><span class="line">        Prototype proto = (Prototype) <span class="keyword">super</span>.clone();  </span><br><span class="line">        <span class="keyword">return</span> proto;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 深复制 */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deepClone</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;  </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 写入当前对象的二进制流 */</span>  </span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();  </span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos);  </span><br><span class="line">        oos.writeObject(<span class="keyword">this</span>);  </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 读出二进制流产生的新对象 */</span>  </span><br><span class="line">        ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());  </span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bis);  </span><br><span class="line">        <span class="keyword">return</span> ois.readObject();  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> string;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setString</span><span class="params">(String string)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.string = string;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SerializableObject <span class="title">getObj</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObj</span><span class="params">(SerializableObject obj)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.obj = obj;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SerializableObject</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/maowang1991/archive/2013/04/15/3023236.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考链接：http://www.cnblogs.com/m
      
    
    </summary>
    
      <category term="笔记" scheme="https://xiongraorao.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="java" scheme="https://xiongraorao.github.io/categories/%E7%AC%94%E8%AE%B0/java/"/>
    
    
      <category term="java" scheme="https://xiongraorao.github.io/tags/java/"/>
    
      <category term="设计模式" scheme="https://xiongraorao.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>storm学习笔记-storm.yaml配置项</title>
    <link href="https://xiongraorao.github.io/2017/03/18/storm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-storm-yaml%E9%85%8D%E7%BD%AE%E9%A1%B9/"/>
    <id>https://xiongraorao.github.io/2017/03/18/storm学习笔记-storm-yaml配置项/</id>
    <published>2017-03-18T13:32:10.000Z</published>
    <updated>2018-06-08T09:10:07.343Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>配置项</th><th>配置说明</th></tr></thead><tbody><tr><td>storm.zookeeper.servers</td><td>Zookeeper服务器列表</td></tr><tr><td>storm.zookeeper.port</td><td>zookeeper 连接端口</td></tr><tr><td>storm.local.dir</td><td>storm使用的本地文件系统目录（必须存在并且storm进程可读写）</td></tr><tr><td>storm.cluster.mode</td><td>Storm集群运行模式([distributedllocall)</td></tr><tr><td>storm.local.mode.zmq</td><td>Local模式下是否使用ZeroMQ作消息系统，如果设置为false则使用java消息系统默认为false</td></tr><tr><td>storm.zookeeper.root</td><td>ZooKeeper中Storm的根目录位置</td></tr><tr><td>storm.zookeeper.session.timeout</td><td>客户端连接ZooKeeper超时时间</td></tr><tr><td>storm.id</td><td>运行中拓扑的id,由stormname和一个唯随机数组成</td></tr><tr><td>nimbus.host</td><td>nimbus服务器地址</td></tr><tr><td>nimbus.thrift.port</td><td>nimbus的thrift监听端口</td></tr><tr><td>nimbus.childopts</td><td>通过storm-deploy项目部署时指定给nimbus进程的jvm选项</td></tr><tr><td>nimbus.task.timeout.secs</td><td>心跳超时时间，超时后nimbus会认为task死掉并重分配给另一个地址</td></tr><tr><td>nimbus.monitor. freq .secs</td><td>nimbu归心跳和重分配任务的时间间隔注意如果是机器宫掉nimbus会立即接管并处理</td></tr><tr><td>nimbus.supervisor.timeout.secs</td><td>supervisor的心跳超时时间，一旦超过nimbus会认为该supervisor已死并停止为它分发新任务</td></tr><tr><td>nimbus.task.launch.secs</td><td>task启动时的一个特殊超时设置在启动后第一次心跳前会使用该值来临时 替代nimbus.task.timeout.secs.</td></tr><tr><td>nimbus.reassign</td><td>当发现task失败是nimbus是否重新分配执行，默认为真</td></tr><tr><td>nimbus.file.copy.expiration.secs</td><td>nimbus判断上传I下载链接的超时时间，当空闲时间超过该设定时nimbus会认为链接死掉并主动断开</td></tr><tr><td>ui.port</td><td>Storm UI的服务端口</td></tr><tr><td>drpc.servers</td><td>DRPC服务器列表，以便DRPCSpout知道和谁通讯</td></tr><tr><td>drpc.port</td><td>Storm DRPC的服务端口</td></tr><tr><td>supervisor.slots.ports</td><td>supervisor上能够运行workers的端口列表.每个worker占用一个端口,且每个端口只运行一个worker.通过这项配置可以调整每台机器上运行的worker数.(调整slot数/每机)</td></tr><tr><td>supervisor.childopts</td><td>在storm-deploy项目中使用,用来配置supervisor守护进程的jvm选项</td></tr><tr><td>supervisor.worker.timeout.secs</td><td>supervisor中的worker心跳超时时间,一旦超时supervisor会尝试重启worker进程.</td></tr><tr><td>supervisor.worker.start.timeout.secs</td><td>supervisor初始启动时，worker的心跳超时时间，当超过该时间supervisor会尝试重启worker。因为JVM初始启动和配置会带来的额外消耗，从而使得第一次心跳会超过supervisor.worker.timeout.secs的设定</td></tr><tr><td>supervisor.enable</td><td>supervisor是否应当运行分配给他的workers.默认为true,该选项用来进行Storm的单元测试,一般不应修改.</td></tr><tr><td>supervisor.heartbeat.frequency.secs</td><td>supervisor心跳发送频率(多久发送一次)</td></tr><tr><td>supervisor.monitor.frequency.secs    supervisor</td><td>检查worker心跳的频率</td></tr><tr><td>worker.childopts</td><td>supervisor启动worker时使用的jvm选项.所有的”%ID%”字串会被替换为对应worker的标识符</td></tr><tr><td>worker.heartbeat.frequency.secs</td><td>worker的心跳发送时间间隔</td></tr><tr><td>task.heartbeat.frequency.secs</td><td>task汇报状态心跳时间间隔</td></tr><tr><td>task.refresh.poll.secs</td><td>task与其他tasks之间链接同步的频率.(如果task被重分配,其他tasks向它发送消息需要刷新连接).一般来讲，重分配发生时其他tasks会理解得到通知。该配置仅仅为了防止未通知的情况。</td></tr><tr><td>topology.debug</td><td>如果设置成true，Storm将记录发射的每条信息。</td></tr><tr><td>topology.optimize</td><td>master是否在合适时机通过在单个线程内运行多个task以达到优化topologies的目的.</td></tr><tr><td>topology.workers</td><td>执行该topology集群中应当启动的进程数量.每个进程内部将以线程方式执行一定数目的tasks.topology的组件结合该参数和并行度提示来优化性能</td></tr><tr><td>topology.ackers</td><td>topology中启动的acker任务数.Acker保存由spout发送的tuples的记录，并探测tuple何时被完全处理.当Acker探测到tuple被处理完毕时会向spout发送确认信息.通常应当根据topology的吞吐量来确定acker的数目，但一般不需要太多.当设置为0时,相当于禁用了消息可靠性,storm会在spout发送tuples后立即进行确认.</td></tr><tr><td>topology.message.timeout.secs</td><td>topology中spout发送消息的最大处理超时时间.如果一条消息在该时间窗口内未被成功ack,Storm会告知spout这条消息失败。而部分spout实现了失败消息重播功能。</td></tr><tr><td>topology.kryo.register</td><td>注册到Kryo(Storm底层的序列化框架)的序列化方案列表.序列化方案可以是一个类名,或者是com.esotericsoftware.kryo.Serializer的实现.</td></tr><tr><td>topology.skip.missing.kryo.registrations</td><td>Storm是否应该跳过它不能识别的kryo序列化方案.如果设置为否task可能会装载失败或者在运行时抛出错误.</td></tr><tr><td>topology.max.task.parallelism</td><td>在一个topology中能够允许的最大组件并行度.该项配置主要用在本地模式中测试线程数限制.</td></tr><tr><td>topology.max.spout.pending</td><td>一个spout task中处于pending状态的最大的tuples数量.该配置应用于单个task,而不是整个spouts或topology.</td></tr><tr><td>topology.state.synchronization.timeout.secs</td><td>组件同步状态源的最大超时时间(保留选项,暂未使用)</td></tr><tr><td>topology.stats.sample.rate</td><td>用来产生task统计信息的tuples抽样百分比</td></tr><tr><td>topology.fall.back.on.java.serialization</td><td>topology中是否使用java的序列化方案</td></tr><tr><td>zmq.threads</td><td>每个worker进程内zeromq通讯用到的线程数</td></tr><tr><td>zmq.linger.millis</td><td>当连接关闭时,链接尝试重新发送消息到目标主机的持续时长.这是一个不常用的高级选项,基本上可以忽略.</td></tr><tr><td>java.library.path</td><td>JVM启动(如Nimbus,Supervisor和workers)时的java.library.path设置.该选项告诉JVM在哪些路径下定位本地库.</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;配置说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;storm.zookeeper.servers&lt;/td&gt;
&lt;td&gt;Zookeeper服务器列表&lt;/td&gt;
&lt;/tr&gt;
&lt;
      
    
    </summary>
    
      <category term="笔记" scheme="https://xiongraorao.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="storm" scheme="https://xiongraorao.github.io/categories/%E7%AC%94%E8%AE%B0/storm/"/>
    
    
      <category term="storm" scheme="https://xiongraorao.github.io/tags/storm/"/>
    
  </entry>
  
  <entry>
    <title>linux下U盘分区</title>
    <link href="https://xiongraorao.github.io/2017/03/18/linux%E4%B8%8BU%E7%9B%98%E5%88%86%E5%8C%BA/"/>
    <id>https://xiongraorao.github.io/2017/03/18/linux下U盘分区/</id>
    <published>2017-03-18T02:34:44.000Z</published>
    <updated>2018-06-08T09:10:07.340Z</updated>
    
    <content type="html"><![CDATA[<p>转载自：<a href="https://www.zybuluo.com/fanisfun/note/677301" target="_blank" rel="noopener">https://www.zybuluo.com/fanisfun/note/677301</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载自：&lt;a href=&quot;https://www.zybuluo.com/fanisfun/note/677301&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zybuluo.com/fanisfun/note/677301&lt;/a
      
    
    </summary>
    
      <category term="解决方案" scheme="https://xiongraorao.github.io/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="linux" scheme="https://xiongraorao.github.io/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/linux/"/>
    
    
      <category term="分区" scheme="https://xiongraorao.github.io/tags/%E5%88%86%E5%8C%BA/"/>
    
      <category term="U盘" scheme="https://xiongraorao.github.io/tags/U%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>linux磁盘分区和挂载</title>
    <link href="https://xiongraorao.github.io/2017/03/18/linux%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E5%92%8C%E6%8C%82%E8%BD%BD/"/>
    <id>https://xiongraorao.github.io/2017/03/18/linux磁盘分区和挂载/</id>
    <published>2017-03-18T02:11:57.000Z</published>
    <updated>2018-06-08T09:10:07.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h2><h3 id="显示磁盘和分区情况"><a href="#显示磁盘和分区情况" class="headerlink" title="显示磁盘和分区情况"></a>显示磁盘和分区情况</h3><p>sudo fdisk -l</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Disk /dev/xvda: 42.9 GB, 42949672960 bytes</span><br><span class="line">255 heads, 63 sectors/track, 5221 cylinders, total 83886080 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x00054506</span><br><span class="line"></span><br><span class="line">    Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/xvda1   *        2048    75495423    37746688   83  Linux</span><br><span class="line">/dev/xvda2        75497470    83884031     4193281    5  Extended</span><br><span class="line">/dev/xvda5        75497472    83884031     4193280   82  Linux swap / Solaris</span><br><span class="line"></span><br><span class="line">Disk /dev/xvdb: 107.4 GB, 107374182400 bytes</span><br><span class="line">255 heads, 63 sectors/track, 13054 cylinders, total 209715200 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x00000000</span><br><span class="line"></span><br><span class="line">Disk /dev/xvdb doesn\<span class="string">'t contain a valid partition table</span></span><br></pre></td></tr></table></figure><h3 id="对磁盘进行分区操作"><a href="#对磁盘进行分区操作" class="headerlink" title="对磁盘进行分区操作"></a>对磁盘进行分区操作</h3><p>sudo fdisk /dev/xvdb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): m     <span class="comment">## 打印命令列表</span></span><br><span class="line">Command action</span><br><span class="line">   a   toggle a bootable flag   <span class="comment"># 将分区标记为可启动盘</span></span><br><span class="line">   b   edit bsd disklabel</span><br><span class="line">   c   toggle the dos compatibility flag</span><br><span class="line">   d   delete a partition       <span class="comment"># 删除一个分区</span></span><br><span class="line">   l   list known partition types</span><br><span class="line">   m   <span class="built_in">print</span> this menu</span><br><span class="line">   n   add a new partition</span><br><span class="line">   o   create a new empty DOS partition table</span><br><span class="line">   p   <span class="built_in">print</span> the partition table</span><br><span class="line">   q   quit without saving changes</span><br><span class="line">   s   create a new empty Sun disklabel</span><br><span class="line">   t   change a partition\<span class="string">'s system id</span></span><br><span class="line"><span class="string">   u   change display/entry units</span></span><br><span class="line"><span class="string">   v   verify the partition table</span></span><br><span class="line"><span class="string">   w   write table to disk and exit</span></span><br><span class="line"><span class="string">   x   extra functionality (experts only)</span></span><br></pre></td></tr></table></figure><p>输入n，增加硬盘一个新分区<br>选择e，指定分区为扩展分区（extended）<br>出现Partition number(1-4)时，输入１表示只分一个区<br>输入p，打印分区表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Disk /dev/xvdb: 107.4 GB, 107374182400 bytes</span><br><span class="line">255 heads, 63 sectors/track, 13054 cylinders, total 209715200 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0xf88fabb6</span><br><span class="line"></span><br><span class="line">    Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/xvdb1            2048   209715199   104856576    5  Extended</span><br></pre></td></tr></table></figure></p><h3 id="硬盘格式化操作"><a href="#硬盘格式化操作" class="headerlink" title="硬盘格式化操作"></a>硬盘格式化操作</h3><p>sudo mkfs -t ext4 /dev/xvdb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkfs 命令的语法如下：</span><br><span class="line">mkfs [-V] [-t fstype] [fs-options] filesys</span><br><span class="line">说明：</span><br><span class="line">-V   显示简要的使用方法。</span><br><span class="line">-t    指定要建立何种文件系统，如：ext3, ext4。</span><br><span class="line">fs   指定建立文件系统时的参数。</span><br><span class="line">-v   显示版本信息与详细的使用方法。</span><br></pre></td></tr></table></figure><h3 id="挂载硬盘分区"><a href="#挂载硬盘分区" class="headerlink" title="挂载硬盘分区"></a>挂载硬盘分区</h3><p>sudo mount -t ext4 /dev/xvdb /deb/sdb #指定硬盘分区文件系统为ext4，将/dev/xvdb 分区挂载到/dev/sdb</p><p>sudo df -h #查看分区挂载情况<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/xvda1       36G  2.3G   32G   7% /</span><br><span class="line">none            4.0K     0  4.0K   0% /sys/fs/cgroup</span><br><span class="line">udev            476M   12K  476M   1% /dev</span><br><span class="line">tmpfs            98M  392K   97M   1% /run</span><br><span class="line">none            5.0M  4.0K  5.0M   1% /run/lock</span><br><span class="line">none            486M     0  486M   0% /run/shm</span><br><span class="line">none            100M     0  100M   0% /run/user</span><br><span class="line">/dev/xvdb        99G   60M   94G   1% /dev/sdb</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mount命令详解</span></span><br><span class="line">mount [-afFnrsvw] [-t vfstype] [-L label]  [-o options] device dir</span><br><span class="line">mount [-lhv]</span><br><span class="line">说明：</span><br><span class="line">-a    加载文件/etc/fstab中设置的所有设备。</span><br><span class="line">-f     不实际加载设备。可与-v等参数同时使用以查看mount的执行过程。</span><br><span class="line">-F    需与-a参数同时使用。所有在/etc/fstab中设置的设备会被同时加载，可加快执行速度。</span><br><span class="line">-t vfstype   指定加载的文件系统类型，如：ext3, ext4。</span><br><span class="line">-L label      给挂载点指定一个标签名称。</span><br><span class="line">-l     显示分区的label。</span><br><span class="line">-h    显示帮助信息。</span><br><span class="line">-v    显示mount的版本信息。</span><br><span class="line">device       要挂载的分区或文件。如果device是一个文件，挂载时须加上 -o loop参数。</span><br><span class="line">dir             分区的挂载点。</span><br></pre></td></tr></table></figure><h3 id="设置开机自动挂载"><a href="#设置开机自动挂载" class="headerlink" title="设置开机自动挂载"></a>设置开机自动挂载</h3><p>sudo vi /etc/fstab</p><p>UUID=XXXXX /dev/sdb ext4 defaults 0 3</p><p>UUID获取命令： ls -l /dev/disk/by-uuid/  或者 blkid /dev/xvdb</p><p>fstab配置详解：<br>/etc/fstab 中一共有６列：</p><ul><li>file system：指定要挂载的文件系统的设备名称（如：/dev/sdb）。也可以采用UUID，UUID可以通过使用blkid命令来查看（如：blkid  /dev/sdb）指定设备的UUID号。</li><li>mount point：挂载点。就是自己手动创建一个目录，然后把分区挂载到这个目录下。</li><li>type：用来指定文件系统的类型。如：ext3, ext4, ntfs等。</li><li>option dump：0表示不备份；１表示要将整个中的内容备份。此处建议设置为0。</li><li>pass：用来指定fsck如何来检查硬盘。0表示不检查；挂载点为分区／（根分区）必须设置为1，其他的挂载点不能设置为1；如果有挂载ass设置成大于1的值，则在检查完根分区后，然后按pass的值从小到大依次检查，相同数值的同时检查。如：/home　和 /boot　的pass 设置成2，/devdata 的pass 设置成3，则系统在检查完根分区，接着同时检查/boot和/home，再检查/devdata。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;磁盘分区&quot;&gt;&lt;a href=&quot;#磁盘分区&quot; class=&quot;headerlink&quot; title=&quot;磁盘分区&quot;&gt;&lt;/a&gt;磁盘分区&lt;/h2&gt;&lt;h3 id=&quot;显示磁盘和分区情况&quot;&gt;&lt;a href=&quot;#显示磁盘和分区情况&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="解决方案" scheme="https://xiongraorao.github.io/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="linux" scheme="https://xiongraorao.github.io/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/linux/"/>
    
    
      <category term="linux" scheme="https://xiongraorao.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>kafka操作命令</title>
    <link href="https://xiongraorao.github.io/2017/03/16/kafka%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
    <id>https://xiongraorao.github.io/2017/03/16/kafka操作命令/</id>
    <published>2017-03-16T08:45:49.000Z</published>
    <updated>2018-06-08T09:10:07.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kafka常用操作命令"><a href="#kafka常用操作命令" class="headerlink" title="kafka常用操作命令"></a>kafka常用操作命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">## 1 创建新的topic</span></span><br><span class="line">kafka-topic --create --zookeeper zkhost:2181/kafka --replication-factor 1 --partitions 3 --topic topic-name</span><br><span class="line"></span><br><span class="line"><span class="comment">## 2 查询所有的topic</span></span><br><span class="line">kafka-topics --list --zookeeper zkhost:2181/kafka</span><br><span class="line"></span><br><span class="line"><span class="comment">## 3 查看topic详细信息</span></span><br><span class="line">kafka-topics --describe --zookeeper zkhost:2181/kafka --topic topicname</span><br><span class="line"></span><br><span class="line"><span class="comment">## 4 生产消息</span></span><br><span class="line">kafka-console-producer --broker-list kafkahost:9092 --topic topicname</span><br><span class="line"></span><br><span class="line"><span class="comment">## 5 消费消息</span></span><br><span class="line">kafka-console-consumer --bootstrap-server kafkahost:9092 --topic topicname</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;kafka常用操作命令&quot;&gt;&lt;a href=&quot;#kafka常用操作命令&quot; class=&quot;headerlink&quot; title=&quot;kafka常用操作命令&quot;&gt;&lt;/a&gt;kafka常用操作命令&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table
      
    
    </summary>
    
      <category term="笔记" scheme="https://xiongraorao.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="kafka" scheme="https://xiongraorao.github.io/categories/%E7%AC%94%E8%AE%B0/kafka/"/>
    
    
      <category term="kafka" scheme="https://xiongraorao.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Hbase基本操作命令</title>
    <link href="https://xiongraorao.github.io/2017/03/09/Hbase%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
    <id>https://xiongraorao.github.io/2017/03/09/Hbase基本操作命令/</id>
    <published>2017-03-09T05:28:27.000Z</published>
    <updated>2018-06-08T09:10:07.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、基本命令："><a href="#一、基本命令：" class="headerlink" title="一、基本命令："></a>一、基本命令：</h1><ul><li><p>建表：create ‘testtable’,’coulmn1’,’coulmn2’</p></li><li><p>也可以建表时加coulmn的属性如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="string">'testtable'</span>,&#123;<span class="keyword">NAME</span> =&gt; <span class="string">'coulmn1'</span>, BLOOMFILTER =&gt; <span class="string">'NONE'</span>, REPLICATION_SCOPE =&gt; <span class="string">'0'</span>, <span class="keyword">VERSIONS</span> =&gt; <span class="string">'10'</span>, COMPRESSION =&gt; <span class="string">'LZO'</span>, TTL =&gt; <span class="string">'30000'</span>, IN_MEMORY =&gt; <span class="string">'false'</span>, BLOCKCACHE =&gt; <span class="string">'false'</span>&#125;, &#123;<span class="keyword">NAME</span> =&gt; <span class="string">'coulmn'</span>, BLOOMFILTER =&gt; <span class="string">'NONE'</span>, REPLICATION_SCOPE =&gt; <span class="string">'0'</span>, <span class="keyword">VERSIONS</span> =&gt; <span class="string">'30'</span>, COMPRESSION =&gt; <span class="string">'LZO'</span>, TTL =&gt; <span class="string">'30000'</span>, IN_MEMORY =&gt; <span class="string">'true'</span>&#125;  (其中的属性有<span class="keyword">versions</span>：设置历史版本数，TTL：过期时间，COMPRESSION：压缩方式，当配置lzo的情况)</span><br></pre></td></tr></table></figure></li><li><p>删除表：drop ‘testtable’   （删除表之前先要禁用表，命令disable ‘testtable’）</p></li><li><p>启用和禁用表： enable ‘testtable’ 和disable ‘testtable’</p></li><li><p>其它的基本命令：describe ‘testtable’（查看表结构），alert 修改表结构，list 列出所有表。</p></li><li><p>查询前10条数据:</p><pre><code>scan&apos;testtable&apos;,{COLUMNS=&gt;&apos;info&apos;,LIMIT=&gt;10,STARTROW=&gt;&apos;666632331200000020160305&apos;,STOPROW=&gt;&apos;666632331200000020160308&apos;}</code></pre></li></ul><h2 id="分区合并"><a href="#分区合并" class="headerlink" title="分区合并"></a>分区合并</h2><p>合并两个预分区，合并预分区要提供该区encode值，该值在16010hbase管理web可查</p><pre><code>merge_region &apos;region1的encode值&apos;,&apos;region2的encode值&apos;</code></pre><h2 id="手动触发major-compact动作"><a href="#手动触发major-compact动作" class="headerlink" title="手动触发major_compact动作"></a>手动触发major_compact动作</h2><p>cd /opt/hbase-1.2.1/bin<br>./hbase shell<br>major_compact ‘table’<br>quit</p><h2 id="手动触发flush动作"><a href="#手动触发flush动作" class="headerlink" title="手动触发flush动作"></a>手动触发flush动作</h2><p>cd /opt/hbase-1.2.1/bin<br>./hbase shell<br>flush ‘table1’<br>flush ‘table2’<br>quit</p><h2 id="每次hbase启动，最好设置一下参数，让hbase区自动均衡"><a href="#每次hbase启动，最好设置一下参数，让hbase区自动均衡" class="headerlink" title="每次hbase启动，最好设置一下参数，让hbase区自动均衡"></a>每次hbase启动，最好设置一下参数，让hbase区自动均衡</h2><p>cd /opt/hbase-1.2.1/bin<br>./hbase shell<br>balance_switch true</p><h1 id="二、日常维护的命令"><a href="#二、日常维护的命令" class="headerlink" title="二、日常维护的命令"></a>二、日常维护的命令</h1><p>1，major_compact ‘testtable’，通常生产环境会关闭自动major_compact(配置文件中hbase.hregion.majorcompaction设为0)，选择一个晚上用户少的时间窗口手工major_compact，如果hbase更新不是太频繁，可以一个星期对所有表做一次major_compact，这个可以在做完一次major_compact后，观看所有的storefile数量，如果storefile数量增加到major_compact后的storefile的近二倍时，可以对所有表做一次major_compact，时间比较长，操作尽量避免高锋期。</p><p>2，flush ‘testtable’，将所有memstore刷新到hdfs，通常如果发现regionserver的内存使用过大，造成该机的regionserver很多线程block，可以执行一下flush操作，这个操作会造成hbase的storefile数量剧增，应尽量避免这个操作，还有一种情况，在hbase进行迁移的时候，如果选择拷贝文件方式，可以先停写入，然后flush所有表，拷贝文件。</p><p>3，balance_switch true或者balance_switch flase，配置master是否执行平衡各个regionserver的region数量，当我们需要维护或者重启一个regionserver时，会关闭balancer，这样就使得region在regionserver上的分布不均，这个时候需要手工的开启balance。</p><h1 id="三、重启一个regionserver"><a href="#三、重启一个regionserver" class="headerlink" title="三、重启一个regionserver"></a>三、重启一个regionserver</h1><p>bin/graceful_stop.sh –restart –reload –debug nodename</p><p>这个操作是平滑的重启regionserver进程，对服务不会有影响，他会先将需要重启的regionserver上面的所有region迁移到其它的服务器，然后重启，最后又会将之前的region迁移回来，但我们修改一个配置时，可以用这种方式重启每一台机子，这个命令会关闭balancer，所以最后我们要在hbase shell里面执行一下balance_switch true，对于hbase regionserver重启，不要直接kill进程，这样会造成在zookeeper.session.timeout这个时间长的中断，也不要通过bin/hbase-daemon.sh stop regionserver去重启，如果运气不太好，-ROOT-或者.META.表在上面的话，所有的请求会全部失败。</p><h1 id="四、关闭下线一台regionserver"><a href="#四、关闭下线一台regionserver" class="headerlink" title="四、关闭下线一台regionserver"></a>四、关闭下线一台regionserver</h1><p>bin/graceful_stop.sh –stop  nodename</p><p>和上面一样，系统会在关闭之前迁移所有region，然后stop进程，同样最后我们要手工balance_switch true，开启master的region均衡。</p><h1 id="五、检查region是否正常以及修复"><a href="#五、检查region是否正常以及修复" class="headerlink" title="五、检查region是否正常以及修复"></a>五、检查region是否正常以及修复</h1><p>bin/hbase hbck  (检查)</p><p>bin/hbase hbck -fix  （修复）</p><p>会返回所有的region是否正常挂载，如没有正常挂载可以使用下一条命令修复，如果还是不能修复，那需要看日志为什么失败，手工处理。</p><h1 id="六、hbase的迁移"><a href="#六、hbase的迁移" class="headerlink" title="六、hbase的迁移"></a>六、hbase的迁移</h1><p>1，copytable方式</p><p>bin/hbase org.apache.hadoop.hbase.mapreduce.CopyTable –peer.adr=zookeeper1,zookeeper2,zookeeper3:/hbase ‘testtable’</p><p>目前0.92之前的版本的不支持多版本的复制，0.94已经支持多个版本的复制。当然这个操作需要添加hbase目录里的conf/mapred-site.xml，可以复制hadoop的过来。</p><p>2，Export/Import</p><p>bin/hbase org.apache.hadoop.hbase.mapreduce.Export testtable /user/testtable [versions] [starttime] [stoptime]</p><p>bin/hbase org.apache.hadoop.hbase.mapreduce.Import testtable  /user/testtable</p><p>跨版本的迁移，我觉得是一个不错的选择，而且copytable不支持多版本，而export支持多版本，比copytable更实用一些。</p><p>3，直接拷贝hdfs对应的文件</p><p>首先拷贝hdfs文件，如bin/hadoop distcp hdfs://srcnamenode:9000/hbase/testtable/ hdfs://distnamenode:9000/hbase/testtable/</p><p>然后在目的hbase上执行bin/hbase org.jruby.Main bin/add_table.rb /hbase/testtable</p><p>生成meta信息后，重启hbase</p><p>这个操作是简单的方式，操作之前可以关闭hbase的写入，执行flush所有表（上面有介绍）,再distcp拷贝，如果hadoop版本不一致，可以用hftp接口的方式，我推荐使用这种方式，成本低。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、基本命令：&quot;&gt;&lt;a href=&quot;#一、基本命令：&quot; class=&quot;headerlink&quot; title=&quot;一、基本命令：&quot;&gt;&lt;/a&gt;一、基本命令：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;建表：create ‘testtable’,’coulmn1’,’coulmn2’
      
    
    </summary>
    
      <category term="笔记" scheme="https://xiongraorao.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="hbase" scheme="https://xiongraorao.github.io/categories/%E7%AC%94%E8%AE%B0/hbase/"/>
    
    
      <category term="hbase" scheme="https://xiongraorao.github.io/tags/hbase/"/>
    
      <category term="命令" scheme="https://xiongraorao.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>分布式大数据分析平台环境搭建</title>
    <link href="https://xiongraorao.github.io/2017/03/07/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%B9%B3%E5%8F%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://xiongraorao.github.io/2017/03/07/大数据分析平台环境搭建/</id>
    <published>2017-03-07T02:29:58.000Z</published>
    <updated>2018-06-08T09:10:07.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装ubuntu"><a href="#安装ubuntu" class="headerlink" title="安装ubuntu"></a>安装ubuntu</h2><p>在windows上使用ultraISO软件来刻录Ubuntu系统安装盘，设置U盘启动，安装系统<br>参考链接：<a href="https://xiongraorao.github.io/2017/01/14/%E5%8E%9F-Ubuntu-14-04-64%E4%BD%8D%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85cuda8-0-cudnn7-5-opencv-caffe-%E8%A1%80%E6%B3%AA%E6%95%99%E7%A8%8B/">Ubuntu 14.04 64位系统安装cuda8.0+cudnn7.5+opencv+caffe 血泪教程</a></p><h2 id="安装NVIDIA驱动"><a href="#安装NVIDIA驱动" class="headerlink" title="安装NVIDIA驱动"></a>安装NVIDIA驱动</h2><p><a href="http://www.nvidia.cn/Download/index.aspx?lang=cn" target="_blank" rel="noopener">http://www.nvidia.cn/Download/index.aspx?lang=cn</a><br>选择合适型号，下载驱动包</p><ul><li>首先按Ctrl+Alt+F1，进入text mode，关闭显示驱动<br> sudo service lightdm stop</li><li><p>增加执行权限</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x NVIDIA-Linux-x86_64-375.39.run</span><br><span class="line">sudo ./NVIDIA-Linux-x86_64-375.39.run</span><br></pre></td></tr></table></figure></li><li><p>安装成功后，重启图像界面服务<br> sudo service lightdm start</p></li></ul><h2 id="安装cuda-cudnn-opencv-caffe"><a href="#安装cuda-cudnn-opencv-caffe" class="headerlink" title="安装cuda+cudnn+opencv+caffe"></a>安装cuda+cudnn+opencv+caffe</h2><p>参考这个链接：<a href="https://xiongraorao.github.io/2017/01/14/%E5%8E%9F-Ubuntu-14-04-64%E4%BD%8D%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85cuda8-0-cudnn7-5-opencv-caffe-%E8%A1%80%E6%B3%AA%E6%95%99%E7%A8%8B/">原-Ubuntu-14-04-64位系统安装cuda8-0-cudnn7-5-opencv-caffe-血泪教程</a></p><p>caffe_github_link:<a href="https://github.com/BVLC/caffe.git" target="_blank" rel="noopener">https://github.com/BVLC/caffe.git</a><br>opencv_github_link:<a href="https://github.com/opencv/opencv" target="_blank" rel="noopener">https://github.com/opencv/opencv</a></p><h2 id="配置静态ip-安装ssh-server"><a href="#配置静态ip-安装ssh-server" class="headerlink" title="配置静态ip + 安装ssh-server"></a>配置静态ip + 安装ssh-server</h2><h3 id="静态ip"><a href="#静态ip" class="headerlink" title="静态ip"></a>静态ip</h3><p>ubuntu14.04设置静态ip</p><ol><li>找到文件并作如下修改：</li></ol><p>sudo vim /etc/network/interfaces</p><p>修改如下部分：</p><p>auto eth0<br>iface eth0 inet static<br>address 192.168.1.4<br>gateway 192.168.1.1 #这个地址你要确认下 网关是不是这个地址<br>netmask 255.255.255.0</p><p>#network 192.168.0.0</p><p>#broadcast 192.168.0.255</p><ol start="2"><li>修改dns解析</li></ol><p>因为以前是dhcp解析，所以会自动分配dns服务器地址</p><p>而一旦设置为静态ip后就没有自动获取到的dns服务器了</p><p>要自己设置一个</p><p>sudo vim /etc/resolv.conf</p><p>写上一个公网的DNS</p><p>nameserver 202.114.0.131(公网dns服务器)<br>nameserver 202.114.0.242（公网dns服务器）<br>nameserver 192.168.1.1（局域网内可以访问外网的机器，非网关服务器放在前面）</p><p>sudo vim /etc/resolvconf/resolv.d/base</p><p>nameserver 202.114.0.131(公网dns服务器)<br>nameserver 202.114.0.242（公网dns服务器）<br>nameserver 192.168.1.1（局域网内可以访问外网的机器，非网关服务器放在前面）</p><ol start="3"><li>重启网卡：</li></ol><p>sudo /etc/init.d/network restart</p><h3 id="安装ssh-server"><a href="#安装ssh-server" class="headerlink" title="安装ssh-server"></a>安装ssh-server</h3><ul><li>判断是否安装ssh服务<br>Ubuntu系统默认安装ssh-client，如果想远程登录主机，就需要安装ssh-server，如下命令：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -e|grep sshps -e|grep ssh</span><br></pre></td></tr></table></figure></li></ul><p>ssh-agent表示ssh-client启动，sshd表示ssh-server启动了</p><p>如果缺少sshd，说明ssh服务没有启动或者没有安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-client <span class="comment">#安装ssh-client命令</span></span><br><span class="line">sudo apt-get install openssh-server <span class="comment">#安装ssh-server命令</span></span><br><span class="line">sudo /etc/init.d/ssh start <span class="comment">#启动服务</span></span><br><span class="line">ps -e|grep sshps -e|grep ssh <span class="comment">#查看是否正确启动。</span></span><br></pre></td></tr></table></figure></p><ul><li><p>配置ssh服务端口<br>默认端口是 22<br>sudo gedit /etc/ssh/sshd_config<br>sudo /etc/init.d/ssh restart #重启ssh服务生效</p></li><li><p>设置开机自动启动</p></li></ul><h2 id="安装storm-kafka-zookeeper-hdfs-hbase-jdk"><a href="#安装storm-kafka-zookeeper-hdfs-hbase-jdk" class="headerlink" title="安装storm+kafka+zookeeper+hdfs+hbase+jdk"></a>安装storm+kafka+zookeeper+hdfs+hbase+jdk</h2><h3 id="前期准备工作"><a href="#前期准备工作" class="headerlink" title="前期准备工作"></a>前期准备工作</h3><ol><li>首先下载好这几个文件，这里用的版本分别是：</li></ol><ul><li>storm <strong><em>0.9.6</em></strong></li><li>zookeeper <strong><em>3.4.0</em></strong></li><li>jdk <strong><em>1.8.0.92</em></strong></li><li>kafka <strong><em>2.11.0.10.0.0</em></strong></li><li>hadoop <strong><em>2.6.4</em></strong></li><li>hbase <strong><em>1.2.4</em></strong></li></ul><ol start="2"><li>设置ip地址映射<br>sudo vi /etc/hosts</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test</span></span><br><span class="line">192.168.0.136   pc1080</span><br><span class="line">192.168.0.116   pcwrp</span><br><span class="line">192.168.0.117   pcxrr</span><br><span class="line"></span><br><span class="line">192.168.0.136   cloud01</span><br><span class="line">192.168.0.116   cloud02</span><br><span class="line">192.168.0.117   cloud03</span><br><span class="line"></span><br><span class="line">192.168.0.136   hadoop01</span><br><span class="line">192.168.0.116   hadoop02</span><br><span class="line">192.168.0.117   hadoop03</span><br><span class="line"></span><br><span class="line">192.168.0.136   zk01</span><br><span class="line">192.168.0.116   zk02</span><br><span class="line">192.168.0.117   zk03</span><br><span class="line"></span><br><span class="line">192.168.0.136   kafka01</span><br><span class="line">192.168.0.116   kafka02</span><br><span class="line">192.168.0.117   kafka03</span><br><span class="line"></span><br><span class="line">192.168.0.136   kafka01</span><br><span class="line">192.168.0.116   kafka02</span><br><span class="line">192.168.0.117   kafka03</span><br><span class="line"></span><br><span class="line">192.168.0.136   storm01</span><br><span class="line">192.168.0.116   storm02</span><br><span class="line">192.168.0.117   storm03</span><br><span class="line"></span><br><span class="line">192.168.0.136   hbase01</span><br><span class="line">192.168.0.116   hbase02</span><br><span class="line">192.168.0.117   hbase03</span><br><span class="line"></span><br><span class="line"><span class="comment"># end test</span></span><br></pre></td></tr></table></figure><p><span style="color:red">这里面需要注意一下，之所以需要配置多组ip映射，是因为在相应的软件中很多默认参数需要用到这些映射</span></p><ol start="3"><li><p>三台机机器实现互相ssh免密码登录，并且实现自身环回登录<br>参考链接：<a href="https://xiongraorao.github.io/2017/02/17/ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/">ssh免密码登录</a></p></li><li><p>设置环境变量<br>vi ~/.bashrc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># java</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/home/hadoop/cloud/jdk1.8.0_92/</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin</span><br><span class="line"><span class="comment"># hadoop</span></span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME=/home/hadoop/cloud/apache-maven-3.3.9/</span><br><span class="line"><span class="built_in">export</span> ZOOKEEPER_HOME=/home/hadoop/cloud/zookeeper-3.4.9/</span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/home/hadoop/cloud/hadoop-2.6.4/</span><br><span class="line"><span class="built_in">export</span> HBASE_HOME=/home/hadoop/cloud/hbase-1.2.4/</span><br><span class="line"><span class="built_in">export</span> FLUME_HOME=/home/hadoop/cloud/apache-flume-1.6.0/</span><br><span class="line"><span class="built_in">export</span> KAFKA_HOME=/home/hadoop/cloud/kafka_2.11-0.10.0.0/</span><br><span class="line"><span class="built_in">export</span> STORM_HOME=/home/hadoop/cloud/apache-storm-0.9.6/</span><br><span class="line"><span class="built_in">export</span> HIVE_HOME=/home/hadoop/cloud/apache-hive-1.2.1/</span><br><span class="line"><span class="built_in">export</span> HADOOP_INSTALL=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_PREFIX=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_MAPRED_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_COMMON_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HDFS_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> YARN_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_COMMON_LIB_NATIVE_DIR=<span class="variable">$HADOOP_HOME</span>/lib/native</span><br><span class="line"><span class="built_in">export</span> HADOOP_OPTS=<span class="string">"-Djava.library.path=<span class="variable">$HADOOP_PREFIX</span>/lib/native"</span></span><br><span class="line"><span class="comment">#export CHUKWA_HOME=/home/hadoop/cloud/chukwa-0.8.0/</span></span><br><span class="line"><span class="comment">#export CHUKWA_CONF_DIR=$CHUKWA_HOME/etc/chukwa</span></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin</span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin/:<span class="variable">$PATH</span></span><br><span class="line">PATH=<span class="variable">$MAVEN_HOME</span>/bin/:<span class="variable">$PATH</span></span><br><span class="line">PATH=<span class="variable">$ZOOKEEPER_HOME</span>/bin/:<span class="variable">$PATH</span></span><br><span class="line">PATH=<span class="variable">$HBASE_HOME</span>/bin/:<span class="variable">$PATH</span></span><br><span class="line">PATH=<span class="variable">$FLUME_HOME</span>/bin/:<span class="variable">$PATH</span></span><br><span class="line">PATH=<span class="variable">$KAFKA_HOME</span>/bin/:<span class="variable">$PATH</span></span><br><span class="line">PATH=<span class="variable">$STORM_HOME</span>/bin/:<span class="variable">$PATH</span></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/sbin:<span class="variable">$HADOOP_HOME</span>/bin</span><br><span class="line">PATH=<span class="variable">$HIVE_HOME</span>/bin/:<span class="variable">$PATH</span></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$CHUKWA_HOME</span>/bin:<span class="variable">$CHUKWA_HOME</span>/sbin</span><br><span class="line"><span class="built_in">export</span> PATH</span><br></pre></td></tr></table></figure></li></ol><h3 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h3><ul><li>下载安装包，解压到 /home/hadoop/cloud 目录下</li><li>添加环境变量</li><li><strong>配置/etc/hosts 文件，做好ip地址映射</strong></li><li>cat zoo_sample.cfg &gt;&gt; zoo.cfg</li><li><p>编辑 zoo.cfg文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line"><span class="comment"># zookeeper数据保存路径</span></span><br><span class="line">dataDir=/home/hadoop/cloud/zookeeper-3.4.9/data/</span><br><span class="line">clientPort=2181</span><br><span class="line">maxClientCnxns=150</span><br><span class="line">maxSessionTimeout=100000</span><br><span class="line">autopurge.snapRetainCount=6</span><br><span class="line">autopurge.purgeInterval=48</span><br><span class="line">server.1=zk01:2888:3888</span><br><span class="line">server.2=zk02:2888:3888</span><br><span class="line">server.3=zk03:2888:3888</span><br></pre></td></tr></table></figure></li><li><p>在节点配置的dataDir目录中创建一个myid文件，里面内容为一个数字，用来标识当前主机，$ZOOKEEPER_HOME/conf/zoo.cfg文件中配置的server.X，则myid文件中就输入这个数字X。（即在每个节点上新建并设置文件myid，其内容与zoo.cfg中的id相对应）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/hadoop/cloud/zookeeper-3.4.9/data/</span><br><span class="line">mkdir myid</span><br><span class="line">vi myid</span><br></pre></td></tr></table></figure></li><li><p>启动zookeeper</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ZOOKEEPER_HOME</span>/bin/zkServer.sh start</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装storm"><a href="#安装storm" class="headerlink" title="安装storm"></a>安装storm</h3><ul><li>下载安装包，解压到 /home/hadoop/cloud 目录下</li><li>设置环境变量</li><li><p>修改 storm 主目录下conf/storm.yaml文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">storm.zookeeper.servers:</span><br><span class="line"> - <span class="string">"zk01"</span></span><br><span class="line"> - <span class="string">"zk02"</span></span><br><span class="line"> - <span class="string">"zk03"</span></span><br><span class="line">storm.zookeeper.port: 2181</span><br><span class="line">storm.zookeeper.root: <span class="string">"/storm"</span></span><br><span class="line">nimbus.host: <span class="string">"storm01"</span></span><br><span class="line"></span><br><span class="line">supervisor.slots.ports:</span><br><span class="line"> - 6700</span><br><span class="line"> - 6701</span><br><span class="line"> - 6702</span><br><span class="line"> - 6703</span><br><span class="line"> - 6704</span><br><span class="line"> - 6705</span><br><span class="line"> - 6706</span><br><span class="line"> - 6707</span><br><span class="line"> - 6708</span><br><span class="line">storm.local.dir: <span class="string">"/home/hadoop/cloud/apache-storm-0.9.6/local"</span></span><br><span class="line"></span><br><span class="line">drpc.servers:</span><br><span class="line"> - <span class="string">"storm01"</span></span><br><span class="line">drpc.port: 3772</span><br><span class="line">drpc.worker.threads: 100</span><br><span class="line">drpc.queue.size: 1024</span><br><span class="line">drpc.invocations.port: 3773</span><br><span class="line">drpc.request.timeout.secs: 800</span><br><span class="line">drpc.childopts: <span class="string">"-Xmx2048m"</span></span><br><span class="line">drpc.port: 3772</span><br><span class="line">drpc.worker.threads: 100</span><br><span class="line">drpc.queue.size: 1024</span><br><span class="line">drpc.invocations.port: 3773</span><br><span class="line">drpc.request.timeout.secs: 800</span><br><span class="line">drpc.childopts: <span class="string">"-Xmx2048m"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#JVM options of worker</span></span><br><span class="line"><span class="comment">#edited by persist</span></span><br><span class="line">superivisor.childopts: <span class="string">"-Xmx2048m"</span></span><br><span class="line">worker.childopts: <span class="string">"-Xmx2048m"</span></span><br><span class="line"><span class="comment">#JVM options of worker</span></span><br><span class="line"><span class="comment">#edited by persist</span></span><br><span class="line">superivisor.childopts: <span class="string">"-Xmx2048m"</span></span><br><span class="line">worker.childopts: <span class="string">"-Xmx2048m"</span></span><br></pre></td></tr></table></figure></li><li><p>启动storm命令（<strong>启动storm之前需要启动zookeeper</strong>）</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nimubs-host: nohup bin/storm nimbus&amp;</span><br><span class="line">nimubs-host: nohup bin/storm ui&amp;</span><br><span class="line">superivisor-hosts: nohup bin/storm superivisor&amp;</span><br></pre></td></tr></table></figure><ul><li>浏览器输入：<a href="http://pc1080:8080" target="_blank" rel="noopener">http://pc1080:8080</a> 查看storm UI界面</li></ul><h3 id="安装hadoop"><a href="#安装hadoop" class="headerlink" title="安装hadoop"></a>安装hadoop</h3><ul><li>下载安装包，解压到 /home/hadoop/cloud 目录下</li><li>设置环境变量</li><li><p>修改主目录下 etc/hadoop-env.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/home/hadoop/cloud/jdk1.8.0_92/</span><br></pre></td></tr></table></figure></li><li><p>修改主目录下 etc/yarn-env.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/home/hadoop/cloud/jdk1.8.0_92/</span><br></pre></td></tr></table></figure></li><li><p>修改 etc/hadoop/mapred-env.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/home/hadoop/cloud/jdk1.8.0_92/</span><br></pre></td></tr></table></figure></li><li><p>修改主目录下 etc/core-site.xml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">            &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;hdfs://hadoop01:9000&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">                &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;file:/home/hadoop/cloud/hadoop-2.6.4/data/tmp&lt;/value&gt;</span><br><span class="line">                &lt;description&gt;Abase <span class="keyword">for</span> other temporary directories.&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;ha.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;zk01:2181,zk02:2181,zk03:2181&lt;/value&gt;</span><br><span class="line">        &lt;description&gt;这里是ZooKeeper集群的地址和端口。注意，数量一定是奇数，且不少于三个节点&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    <span class="comment"># add ours here</span></span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.proxyuser.hadoop.groups&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">        &lt;description&gt;允许所有用户组用户代理&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.proxyuser.hadoop.hosts&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hadoop01&lt;/value&gt;</span><br><span class="line">        &lt;description&gt;允许挂载的主机域名&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改主目录下 etc/hdfs-site.xml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.nfs.exports.allowed.hosts&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;hadoop01 rw;hadoop02 rw;hadoop03 rw;&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;hadoop01:50090&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;2&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;file:/home/hadoop/cloud/hadoop-2.6.4/tmp/dfs/name&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;file:/home/hadoop/cloud/hadoop-2.6.4/tmp/dfs/data&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.webhdfs.enabled&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;<span class="literal">true</span>&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        <span class="comment">## add options here</span></span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;dfs.client.block.write.replace-datanode-on-failure.enable&lt;/name&gt;</span><br><span class="line">&lt;value&gt;<span class="literal">true</span>&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.client.block.write.replace-datanode-on-failure.policy&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;NEVER&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.namenode.fs-limits.max-component-length&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;255&lt;/value&gt;</span><br><span class="line">                &lt;description&gt;Defines the maximum number of bytes <span class="keyword">in</span> UTF-8 encoding <span class="keyword">in</span> each</span><br><span class="line">                    component of a path.  A value of 0 will <span class="built_in">disable</span> the check.&lt;/description&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.namenode.fs-limits.max-directory-items&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;6000000&lt;/value&gt;</span><br><span class="line">                &lt;description&gt;Defines the maximum number of items that a directory may</span><br><span class="line">                    contain. Cannot <span class="built_in">set</span> the property to a value less than 1 or more than</span><br><span class="line">                    6400000.&lt;/description&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.namenode.fs-limits.min-block-size&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;1048576&lt;/value&gt;</span><br><span class="line">                &lt;description&gt;Minimum block size <span class="keyword">in</span> bytes, enforced by the Namenode at create</span><br><span class="line">                    time. This prevents the accidental creation of files with tiny block</span><br><span class="line">                    sizes (and thus many blocks), <span class="built_in">which</span> can degrade performance.&lt;/description&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.namenode.fs-limits.max-blocks-per-file&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;1048576&lt;/value&gt;</span><br><span class="line">                &lt;description&gt;Maximum number of blocks per file, enforced by the Namenode on</span><br><span class="line">                    write. This prevents the creation of extremely large files <span class="built_in">which</span> can</span><br><span class="line">                    degrade performance.&lt;/description&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.namenode.fs-limits.max-xattrs-per-inode&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;32&lt;/value&gt;</span><br><span class="line">                &lt;description&gt;</span><br><span class="line">                    Maximum number of extended attributes per inode.</span><br><span class="line">                &lt;/description&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.namenode.fs-limits.max-xattr-size&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;16384&lt;/value&gt;</span><br><span class="line">                &lt;description&gt;</span><br><span class="line">                    The maximum combined size of the name and value of an extended attribute</span><br><span class="line">                    <span class="keyword">in</span> bytes. It should be larger than 0, and less than or equal to maximum</span><br><span class="line">                    size hard <span class="built_in">limit</span> <span class="built_in">which</span> is 32768.</span><br><span class="line">                &lt;/description&gt;</span><br><span class="line">       &lt;/property&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.datanode.max.transfer.threads&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;8192&lt;/value&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改主目录下 etc/httpfs-env.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/home/hadoop/cloud/jdk1.8.0_92/</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HTTPFS_HOME=/home/hadoop/cloud/hadoop-2.6.4/</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HTTPFS_CONFIG=/home/hadoop/cloud/hadoop-2.6.4/etc/hadoop</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> CATALINA_BASE=/home/hadoop/cloud/hadoop-2.6.4/share/hadoop/httpfs/tomcat</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HTTPFS_LOG=<span class="variable">$&#123;HTTPFS_HOME&#125;</span>/httpfs/logs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HTTPFS_TEMP=<span class="variable">$&#123;HTTPFS_HOME&#125;</span>/httpfs/temp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HTTPFS_HTTP_PORT=14000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HTTPFS_ADMIN_PORT=`expr <span class="variable">$&#123;HTTPFS_HTTP_PORT&#125;</span> + 1`</span><br></pre></td></tr></table></figure></li><li><p>修改 etc/hadoop/slavers</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop01</span><br><span class="line">hadoop02</span><br><span class="line">hadoop03</span><br></pre></td></tr></table></figure><p><span style="color:red">以上只是部分配置，其中hadoop01是默认的主节点，默认配置的主机</span></p><ul><li><p>启动hadoop</p><ul><li>首先需要启动zookeeper</li><li>格式化hdfs： bin/hdfs namenode -format</li><li>启动hdfs和yarn： sbin/start-all.sh,启动成功master出现NameNode，SecondaryNameNode，ResourceManger进程，slave节点出现DataNode和NodeManager<br><strong>注意事项：如果增加了多个ip映射，那么有可能提醒是否需要添加host到ssh表，这种情况框需要重新设置ssh互通</strong></li></ul></li><li><p>web查看<br>hdfs: <a href="https://hadoop01:50070/" target="_blank" rel="noopener">https://hadoop01:50070/</a><br>yarn: <a href="https://hadoop01:8088/" target="_blank" rel="noopener">https://hadoop01:8088/</a></p></li></ul><p>遇到的问题：<br>主节点上启动start-all.sh, 只有主节点的NameNode和SecondaryNameNode和DataNode启动，从节点的DataNode没有启动</p><p>重启部分坏死节点：<br>bin/Hadoop-daemon.sh start DataNode<br>bin/Hadoop-daemon.sh start jobtracker</p><p>动态加入新节点：<br>bin/Hadoop-daemon.sh –config ./conf start DataNode<br>bin/Hadoop-daemon.sh –config ./conf start tasktracker</p><p>更新配置文件命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> `seq 2 3`; <span class="keyword">do</span> scp /home/hadoop/cloud/hadoop-2.6.4/etc/hadoop/* hadoop@hadoop0<span class="variable">$ip</span>:/home/hadoop/cloud/hadoop-2.6.4/etc/hadoop/; <span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>更新环境变量：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> `seq 2 3`; <span class="keyword">do</span> scp /home/hadoop/.bashrc hadoop@hadoop0<span class="variable">$ip</span>:/home/hadoop/; <span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><h3 id="安装HBase"><a href="#安装HBase" class="headerlink" title="安装HBase"></a>安装HBase</h3><ul><li>下载安装包，解压到 /home/hadoop/cloud 目录下</li><li>修改～/.bashrc文件，添加HBASE_HOME环境变量；</li><li><p>修改 conf/hbase-env.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/home/hadoop/cloud/jdk1.8.0_92/</span><br><span class="line"><span class="built_in">export</span> HBASE_CLASSPATH=/opt/hbase/conf  (extral classpath like java, Optional)</span><br><span class="line"><span class="comment"># 此配置信息，设置由zk集群管理，故为false  </span></span><br><span class="line"><span class="built_in">export</span> HBASE_MANAGES_ZK=<span class="literal">false</span>  </span><br><span class="line"><span class="built_in">export</span> HBASE_HOME=/opt/hbase  (Optional)</span><br><span class="line"><span class="comment">#Hbase日志目录  </span></span><br><span class="line"><span class="built_in">export</span> HBASE_LOG_DIR=<span class="variable">$HBASE_HOME</span>/logs(Optional)</span><br></pre></td></tr></table></figure></li><li><p>修改 conf/hbase-site.xml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs://hbase01:9000/hbase&lt;/value&gt;</span><br><span class="line">        &lt;description&gt;The directory shared by region servers.&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hbase.zookeeper.property.clientPort&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;2181&lt;/value&gt;</span><br><span class="line">        &lt;description&gt;Property from ZooKeeper config zoo.cfg. The port at <span class="built_in">which</span> the clients will connect.</span><br><span class="line">        &lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hbase.master.info.bindAddress&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;192.168.100.101&lt;/value&gt;</span><br><span class="line">        &lt;description&gt;HBase Master web ui <span class="built_in">bind</span> address&lt;/description&gt; **必须填写master节点地址**</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;zookeeper.session.timeout&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;60000&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hbase01,hbase02,hbase03&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hbase.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/home/hadoop/cloud/hbase-1.2.4/data/tmp&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;<span class="literal">true</span>&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/home/hadoop/cloud/hbase-1.2.4/zookeeper&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hbase.zookeeper.property.maxClientCnxns&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;300&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.client.block.write.replace-datanode-on-failure.enable&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;<span class="literal">true</span>&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.client.block.write.replace-datanode-on-failure.policy&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;NEVER&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改 regionservers</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hbase01</span><br><span class="line">hbase02  <span class="comment">#设置regionserver的节点</span></span><br><span class="line">hbase03</span><br></pre></td></tr></table></figure></li><li><p>同步配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> `seq 2 3`; <span class="keyword">do</span> scp /home/hadoop/cloud/hbase-1.2.4/conf/* hadoop@hadoop0<span class="variable">$ip</span>:/home/hadoop/cloud/hbase-1.2.4/conf/; <span class="keyword">done</span></span><br></pre></td></tr></table></figure></li><li><p>启动hbase</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bin/start-hbase.sh</span><br><span class="line">启动后，jps可以看到有这两个进程</span><br><span class="line">HRegionServer</span><br><span class="line">HMaster</span><br></pre></td></tr></table></figure></li><li><p>启动Hbase Shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hbase shell</span><br></pre></td></tr></table></figure></li><li><p>访问HBase UI<br>查看hbase管理界面<a href="http://192.168.181.66:16010" target="_blank" rel="noopener">http://192.168.181.66:16010</a></p></li><li><p>hbase日常维护<br>参考链接：<a href="https://xiongraorao.github.io/2017/03/09/Hbase%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/#more">Hbase基本操作命令</a></p></li></ul><blockquote><p><span style="color:red;font-size: 26px;font-weight: bold">注意hbase集群安装的大坑</span></p><ol><li>hbase-site.xml必须添加hbase.master.info.bindAddress配置项，设置为master节点的ip地址</li><li>设置/etc/hosts文件，注释掉 127.0.1.1 hostname这一行，替换成局域网ip hostname，否则HRegionServer 无法链接Master节点</li></ol></blockquote><p>错误参考链接：<a href="http://www.cnblogs.com/colorfulkoala/archive/2012/07/09/2583841.html" target="_blank" rel="noopener">http://www.cnblogs.com/colorfulkoala/archive/2012/07/09/2583841.html</a></p><h3 id="安装kafka"><a href="#安装kafka" class="headerlink" title="安装kafka"></a>安装kafka</h3><p>参考链接：<a href="http://121.42.164.108/index.php/2017/03/08/ubuntu14-04-stormkafkazookeeperhdfs/" target="_blank" rel="noopener">kafka</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装ubuntu&quot;&gt;&lt;a href=&quot;#安装ubuntu&quot; class=&quot;headerlink&quot; title=&quot;安装ubuntu&quot;&gt;&lt;/a&gt;安装ubuntu&lt;/h2&gt;&lt;p&gt;在windows上使用ultraISO软件来刻录Ubuntu系统安装盘，设置U盘启动，安装系
      
    
    </summary>
    
      <category term="解决方案" scheme="https://xiongraorao.github.io/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="hadoop" scheme="https://xiongraorao.github.io/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/hadoop/"/>
    
    
      <category term="caffe" scheme="https://xiongraorao.github.io/tags/caffe/"/>
    
      <category term="深度学习" scheme="https://xiongraorao.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="大数据" scheme="https://xiongraorao.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="cuda" scheme="https://xiongraorao.github.io/tags/cuda/"/>
    
      <category term="opencv" scheme="https://xiongraorao.github.io/tags/opencv/"/>
    
      <category term="分布式" scheme="https://xiongraorao.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu制作UbuntuLiveCD+备份系统镜像教程</title>
    <link href="https://xiongraorao.github.io/2017/03/03/Ubuntu%E5%88%B6%E4%BD%9CUbuntuLiveCD-%E5%A4%87%E4%BB%BD%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F%E6%95%99%E7%A8%8B/"/>
    <id>https://xiongraorao.github.io/2017/03/03/Ubuntu制作UbuntuLiveCD-备份系统镜像教程/</id>
    <published>2017-03-03T07:50:08.000Z</published>
    <updated>2018-06-08T09:10:07.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装UbuntuLiveCD"><a href="#安装UbuntuLiveCD" class="headerlink" title="安装UbuntuLiveCD"></a>安装UbuntuLiveCD</h2><blockquote><p>准备：U盘，ubuntu官方镜像文件</p></blockquote><h3 id="windows解决方案"><a href="#windows解决方案" class="headerlink" title="windows解决方案"></a>windows解决方案</h3><ul><li>安装UltralSO，打开ubuntu镜像文件，写入U盘</li><li>安装UNetBootin，打开Ubuntu镜像文件，写入U盘</li></ul><h3 id="linux解决方案"><a href="#linux解决方案" class="headerlink" title="linux解决方案"></a>linux解决方案</h3><ul><li>插入U盘</li><li>sudo fdisk -l</li><li>cd ubuntu-iso的目录</li><li>sudo dd if=ubuntu-14.04.5-desktop-amd64.iso of=/dev/sdX(sdX表示插入的U盘)</li></ul><h2 id="备份系统镜像"><a href="#备份系统镜像" class="headerlink" title="备份系统镜像"></a>备份系统镜像</h2><p>linux提供的dd命令可以直接复制磁盘的数据</p><ul><li>使用U盘启动UbuntuLiveCD，类似WinPE系统</li><li>sudo fdisk -l /dev/sdX(sdX代表你要克隆的磁盘)<br><img src="/images/ubuntu系统备份镜像-1.png" alt="磁盘分区图"><br>如图所示，linux系统有三个分区分别是sda8 sda9 sda10,其中sda8 是交换分区，不用备份，只需要备份sda9和sda10空间</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dd bs=512 count=1953523712 skip=1646948352 <span class="keyword">if</span>=/dev/sda of=savedPath/ghost.img</span><br></pre></td></tr></table></figure><ul><li>将ghost.img恢复到新硬盘</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=savedPath/ghost.img of=/dev/sda</span><br></pre></td></tr></table></figure><ul><li>不要直接在计算机上用本地磁盘启动系统后执行dd命令生成本地磁盘的镜像。而应该用livecd启动计算机。因此计算机运行时会对系统盘产生大量写操作。 直接对运行中的系统盘生成的镜像，在恢复到其他硬盘上时，很可能会无法启动！</li></ul><h3 id="使用gzip进行压缩和解压缩"><a href="#使用gzip进行压缩和解压缩" class="headerlink" title="使用gzip进行压缩和解压缩"></a>使用gzip进行压缩和解压缩</h3><p>gzip参数：<br>-c 表示输出到stdout<br>-d  表示解压缩<br>-1 表示最快压缩<br>-9 表示最好压缩<br>默认使用的是-6压缩级别</p><p>dd备份命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dd bs=512 count=1953523712 skip=1646948352 <span class="keyword">if</span>=/dev/sda | gzip -6 &gt; /ghost.img.gz</span><br></pre></td></tr></table></figure></p><p>dd还原命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -dc /ghost.img.gz.gz | dd of=/dev/sda</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装UbuntuLiveCD&quot;&gt;&lt;a href=&quot;#安装UbuntuLiveCD&quot; class=&quot;headerlink&quot; title=&quot;安装UbuntuLiveCD&quot;&gt;&lt;/a&gt;安装UbuntuLiveCD&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;准备：U盘，ubu
      
    
    </summary>
    
      <category term="解决方案" scheme="https://xiongraorao.github.io/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="ubuntu" scheme="https://xiongraorao.github.io/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/ubuntu/"/>
    
    
      <category term="ubuntu" scheme="https://xiongraorao.github.io/tags/ubuntu/"/>
    
      <category term="教程" scheme="https://xiongraorao.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
