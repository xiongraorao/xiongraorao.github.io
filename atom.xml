<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>在路上</title>
  
  <subtitle>stay hungry, stay foolish!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xraorao.top/"/>
  <updated>2018-07-02T12:16:05.781Z</updated>
  <id>http://xraorao.top/</id>
  
  <author>
    <name>Xiong Raorao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>黑苹果仿冒声卡驱动AppleALC</title>
    <link href="http://xraorao.top/2018/07/02/%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%BB%BF%E5%86%92%E5%A3%B0%E5%8D%A1%E9%A9%B1%E5%8A%A8AppleALC/"/>
    <id>http://xraorao.top/2018/07/02/黑苹果仿冒声卡驱动AppleALC/</id>
    <published>2018-07-02T11:58:33.000Z</published>
    <updated>2018-07-02T12:16:05.781Z</updated>
    
    <content type="html"><![CDATA[<p>参考教程：  </p><ul><li><a href="https://www.jianshu.com/p/29a74f0664f1" target="_blank" rel="noopener">黑苹果定制声卡驱动（ALC892为例)</a></li><li><a href="https://blog.daliansky.net/Use-AppleALC-sound-card-to-drive-the-correct-posture-of-AppleHDA.html" target="_blank" rel="noopener">使用AppleALC声卡仿冒驱动AppleHDA的正确姿势</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1685213-1-1.html" target="_blank" rel="noopener">傻瓜式仿冒声卡驱动第二季（仿冒ALC892)</a></li><li><a href="https://www.haolie.net/thread-664.htm" target="_blank" rel="noopener">[教程] AppleALC使用和修改教程</a></li></ul><p>资源链接：  </p><ul><li><a href="https://github.com/vit9696/AppleALC" target="_blank" rel="noopener">vit9696/AppleALC</a></li><li><a href="https://github.com/acidanthera/Lilu" target="_blank" rel="noopener">acidanthera/Lilu</a></li><li><a href="https://github.com/daliansky/dell7000/tree/master/hda-tools" target="_blank" rel="noopener">HDA 工具</a></li><li><a href="https://pan.baidu.com/s/1ge40mR5#list/path=%2Fmac%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6%2F%E5%A3%B0%E5%8D%A1%E5%B7%A5%E5%85%B7%2F%E5%B7%A5%E5%85%B7&amp;parentPath=%2Fmac%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6%2F%E5%A3%B0%E5%8D%A1%E5%B7%A5%E5%85%B7" target="_blank" rel="noopener">zlib 转换器</a></li></ul><p><strong>注意事项：</strong></p><p>该教程可以通过AppleALC修改驱动，然后通过Clover 的方式注入Layout，也可以直接在原生AppleHDA上面修改。</p><p><a href="/download/AppleHDA-10.14.kext.zip">AppleHDA-10.14.kext.zip</a></p><p>clover注意要设置一个参数：FixHPET,否则无法加载AppleHDA</p><p>附：ALC269VC 的confidData的数据格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">id_modified:40</span><br><span class="line">01271C40 01271D01 01271EA0 01271F90 </span><br><span class="line">01471C10 01471D01 01471E17 01471F90 01470C02 </span><br><span class="line">01571C20 01571D10 01571E21 01571F00 </span><br><span class="line">01871C30 01871D10 01871E81 01871F00</span><br><span class="line"></span><br><span class="line">oneline:</span><br><span class="line">01271C40 01271D01 01271EA0 01271F90 01471C10 01471D01 01471E17 01471F90 01470C02 01571C20 01571D10 01571E21 01571F00 01871C30 01871D10 01871E81 01871F00</span><br></pre></td></tr></table></figure><p>每组数字构成：<br>Address+Node+71+[c/d/e/f]+描述数字<br>描述数字每组一共有8个<br>分别表示：<br>1 优先级<br>耳机优先级一定要低于内置扬声器，外置麦克风一定要低于内置麦克风<br>2 lineout 为f，其余0<br>3 接口颜色<br>4 接口为 0，表示当接口被检测到时使用。如果是笔记本的话内建的麦克风和扬声器要设成1，即当耳机插入时，内建扬声器静音，耳机0 接口被检测到就是用耳机。<br>5 接口功能信息<br>6 链接装置类型<br>7 接口类型<br>0为插入接口的，如外置麦克风、耳机等。<br>(如果codec_dump出来有 [N/A] 的就是无用的port，数字为4。)<br>9为给笔记本內建，像内置扬声器、内置麦克风等<br>8 接口位置</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考教程：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/29a74f0664f1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;黑苹果定制声卡驱动（ALC892为例)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a 
      
    
    </summary>
    
      <category term="笔记" scheme="http://xraorao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="mac" scheme="http://xraorao.top/categories/%E7%AC%94%E8%AE%B0/mac/"/>
    
    
      <category term="笔记" scheme="http://xraorao.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="黑苹果" scheme="http://xraorao.top/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>ssh反向代理新姿势</title>
    <link href="http://xraorao.top/2018/07/02/ssh%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%96%B0%E5%A7%BF%E5%8A%BF/"/>
    <id>http://xraorao.top/2018/07/02/ssh反向代理新姿势/</id>
    <published>2018-07-02T09:28:36.000Z</published>
    <updated>2018-07-02T11:57:00.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="ssh-的端口转发"><a href="#ssh-的端口转发" class="headerlink" title="ssh 的端口转发"></a>ssh 的端口转发</h2><p>应用链接方向： 从应用的client到应用的server端<br>ssh链接方向：ssh client –&gt; ssh server</p><ol><li>本地转发(local forwarding)</li></ol><p>SSH链接方向和本地链接方向一致</p><pre><code>ssh -L &lt;local port&gt;:&lt;remote host&gt;:&lt;remote port&gt; &lt;SSH hostname&gt;</code></pre><p><img src="http://img610.ph.126.net/-ifAtproB7491sZsVf1gYQ==/1689131335242809359.jpg" alt="ssh local forwarding"></p><p>本地转发会在本地机器上监听一个端口，所有访问这个端口的数据都会通过SSH隧道传输到远程主机的对应端口上, 最后将数据返回到客户端，完成整个转发过程</p><p>由于本地转发绑定的地址是lookback接口，因此绑定的local port只能在本机访问，不能让其他的client访问，如果想实现其他的client也可以访问的话，需要在ssh host 的 sshd_config 文件中添加一个参数 “GatewayPorts yes”，或者直接使用 -g 命令</p><ol start="2"><li>远程转发(local forwarding)</li></ol><p>SSH链接方向和本地方向不一致，就是远程转发</p><pre><code>ssh -R &lt;local port&gt;:&lt;remote host&gt;:&lt;remote port&gt; &lt;SSH hostname&gt;</code></pre><p>远程转发会在远程主机上面监听一个端口，所有访问远程主机的端口的数据都会被转发到本地对应的端口上,ssh反向代理(隧道)技术就是这样实现的</p><p><img src="http://img623.ph.126.net/AM7N_HSE8y4XDkYqACKM5A==/1938518164608052599.jpg" alt="ssh remote forwarding"></p><p>例如实现远程服务器A的1234端口映射到本机的22端口，实现远程服务器访问本地的22端口</p><pre><code>ssh -R 1234:localhost:22  username@ServerA</code></pre><ol start="3"><li>动态转发(dynamic forwarding)</li></ol><p>指定一个本地机器 “动态的’’ 应用程序端口转发. 工作原理是这样的, 本地机器上分配了一个 socket 侦听 port 端口, 一旦这个端口上有了连接, 该连接就经过安全通道转发出去, 根据应用程序的协议可以判断出远程主机将和哪里连接. 目前支持 SOCKS4 协议, 将充当 SOCKS4 服务器. 只有 root 才能转发特权端口. 可以在配置文件中指定动态端口的转发.</p><pre><code>ssh -D &lt;local port&gt; &lt;SSH Server&gt;</code></pre><h1 id="ssh-端口转发参数"><a href="#ssh-端口转发参数" class="headerlink" title="ssh 端口转发参数"></a>ssh 端口转发参数</h1><p>ssh的三个强大的端口转发命令：</p><p>转发到远端：ssh -C -f -N -g -L 本地端口:目标IP:目标端口 用户名@目标IP</p><p>转发到本地：ssh -C -f -N -g –R 本地端口:目标IP:目标端口 用户名@目标IP</p><p>ssh -C -f -N -g -D listen_port user@Tunnel_Host</p><p>-C：压缩数据传输。</p><p>-f ：后台认证用户/密码，通常和-N连用，不用登录到远程主机。</p><p>-N ：不执行脚本或命令，通常与-f连用。</p><p>-g ：在-L/-R/-D参数中，允许远程主机连接到建立的转发的端口，如果不加这个参数，只允许本地主机建立连接。</p><p>-L 本地端口:目标IP:目标端口</p><p>将本地机(客户机)的某个端口转发到远端指定机器的指定端口. 工作原理是这样的, 本地机器上分配了一个 socket 侦听 port 端口, 一旦这个端口上有了连接, 该连接就经过安全通道转发出去, 同时远程主机和 host 的 hostport 端口建立连接. 可以在配置文件中指定端口的转发. 只有 root 才能转发特权端口. IPv6 地址用另一种格式说明: port/host/hostport</p><p>-R本地端口:目标IP:目标端口</p><p>将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口. 工作原理是这样的, 远程主机上分配了一个 socket 侦听 port 端口, 一旦这个端口上有了连接, 该连接就经过安全通道转向出去, 同时本地主机和 host 的 hostport 端口建立连接. 可以在配置文件中指定端口的转发. 只有用 root 登录远程主机才能转发特权端口. IPv6 地址用另一种格式说明: port/host/hostport</p><p>-p ：被登录的ssd服务器的sshd服务端口。</p><p>-D port</p><p>指定一个本地机器 “动态的’’ 应用程序端口转发. 工作原理是这样的, 本地机器上分配了一个 socket 侦听 port 端口, 一旦这个端口上有了连接, 该连接就经过安全通道转发出去, 根据应用程序的协议可以判断出远程主机将和哪里连接. 目前支持 SOCKS4 协议, 将充当 SOCKS4 服务器. 只有 root 才能转发特权端口. 可以在配置文件中指定动态端口的转发.</p><h1 id="实现内网端口转发"><a href="#实现内网端口转发" class="headerlink" title="实现内网端口转发"></a>实现内网端口转发</h1><p>问题： 内网有服务器器A, 无公网IP，现有公网服务器B，如何实现在外网情况下链接服务器B的某个端口访问到A的服务</p><table><thead><tr><th>host</th><th>类型</th><th>ip</th><th>port</th></tr></thead><tbody><tr><td>A</td><td>内网</td><td>192.168.1.3</td><td>1234</td></tr><tr><td>B</td><td>外网</td><td><a href="http://www.123.com" target="_blank" rel="noopener">www.123.com</a></td><td>5678</td></tr></tbody></table><p>通过ssh的反向代理可以实现B服务器的5678 端口绑定在A服务器的1234端口上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录到A服务器</span></span><br><span class="line">ssh -C -f -N -g -R 5678:127.0.0.1:1234 username@www.123.com</span><br></pre></td></tr></table></figure><h1 id="实现内网VPN服务"><a href="#实现内网VPN服务" class="headerlink" title="实现内网VPN服务"></a>实现内网VPN服务</h1><p>问题： 内网有服务器器A, 无公网IP，现有公网服务器B，如何实现在外网情况下访问到内网的所有服务</p><table><thead><tr><th>host</th><th>类型</th><th>ip</th><th>port</th></tr></thead><tbody><tr><td>A</td><td>内网</td><td>192.168.1.3</td><td>192.168.1.0/24:*</td></tr><tr><td>B</td><td>外网</td><td><a href="http://www.123.com" target="_blank" rel="noopener">www.123.com</a></td><td>5678</td></tr></tbody></table><p>解决方案： shadowsocks + ssh远程转发</p><ol><li>A机器安装shadowsock 服务端</li></ol><p><a href="http://xraorao.top/2018/06/25/ShadowsocksR%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/">shadowsocksR一键安装</a></p><ol start="2"><li><p>A机器做远程转发</p><p> ssh -C -f -N -g -R  5678:127.0.0.1:shadowsocks_server_port <a href="mailto:username@www.123.com" target="_blank" rel="noopener">username@www.123.com</a> </p></li><li><p>VPN访问</p><p> 安装shadowsocks客户端，链接后配置socks5代理，就可以链接到内网的任何服务了</p></li></ol><h1 id="autossh–强大而稳定的解决方案"><a href="#autossh–强大而稳定的解决方案" class="headerlink" title="autossh–强大而稳定的解决方案"></a>autossh–强大而稳定的解决方案</h1><p>ssh隧道非常容易断掉，在做远程转发的时候，有时候往往无法链接服务器，因此需要一个稳定的SSH链接，autossh就能实现SSH的断线自动重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 配置好客户端到远程服务的ssh免密码连接</span></span><br><span class="line"></span><br><span class="line">autossh -f -M 55888 -NR *:10013:localhost:22 hadoop@oceanai.com.cn</span><br><span class="line"></span><br><span class="line">usage: autossh [-V] [-M monitor_port[:echo_port]] [-f] [SSH_OPTIONS]</span><br><span class="line"></span><br><span class="line">    -M specifies monitor port. Overrides the environment</span><br><span class="line">       variable AUTOSSH_PORT. 0 turns monitoring loop off.</span><br><span class="line">       Alternatively, a port <span class="keyword">for</span> an <span class="built_in">echo</span> service on the remote</span><br><span class="line">       machine may be specified. (Normally port 7.)</span><br><span class="line">    -f run <span class="keyword">in</span> background (autossh handles this, and does not</span><br><span class="line">       pass it to ssh.)</span><br><span class="line">    -V <span class="built_in">print</span> autossh version and <span class="built_in">exit</span>.</span><br></pre></td></tr></table></figure><p>设置crontab任务，实现代理的自检查和重启功能，基本不会断连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">crontab -e </span><br><span class="line">*/1 * * * * bash /home/hadoop/autossh/monitor-auto-ssh.sh</span><br><span class="line">* * * * * sleep 30; bash /home/hadoop/autossh/monitor-auto-ssh.sh</span><br><span class="line"></span><br><span class="line">vim /home/hadoop/autossh/monitor-auto-ssh.sh</span><br><span class="line"></span><br><span class="line">---- </span><br><span class="line">#! /bin/sh</span><br><span class="line"></span><br><span class="line">PROCESS_NAME=&apos;55566&apos;</span><br><span class="line">PROCESS_PATH=&apos;/home/hadoop/autossh&apos;</span><br><span class="line">START_PROCESS=&quot;autossh -f -M 55567 -NR 55566:localhost:22 hadoop@www.123.com&quot;</span><br><span class="line">VPN_PROCESS=&quot;autossh -f -M 55577 -NR 10012:localhost:13838 hadoop@www.123.com&quot;</span><br><span class="line">VPN_PROCESS_NAME=&quot;10012&quot;</span><br><span class="line">#PORT_TRANS=&quot;ssh -C -f -N -g -R 8888:127.0.0.1:8888 hadoop@www.123.com&quot;</span><br><span class="line">#PORT_TRANS_NAME=&quot;8888:127.0.0.1:8888&quot;</span><br><span class="line"></span><br><span class="line">proc_num()                      #查询进程数量  </span><br><span class="line">&#123;  </span><br><span class="line">    num=`ps -ef | grep $&#123;PROCESS_NAME&#125; | grep -v grep | wc -l`  </span><br><span class="line">    return $num  </span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line">proc_num2()</span><br><span class="line">&#123;</span><br><span class="line">    num=`ps -ef | grep $&#123;VPN_PROCESS_NAME&#125; | grep -v grep | wc -l`  </span><br><span class="line">    return $num</span><br><span class="line">&#125; </span><br><span class="line">proc_num    </span><br><span class="line">number=$?</span><br><span class="line">proc_num2</span><br><span class="line">number2=$?</span><br><span class="line">if [ $number -eq 0 ]            #如果进程数量为0  </span><br><span class="line">then                            #重新启动服务</span><br><span class="line">    echo &quot;Restarting $&#123;PROCESS_NAME&#125; ...&quot;</span><br><span class="line">    echo $(date &apos;+%Y-%m-%d %T&apos;) &gt;&gt; $&#123;PROCESS_PATH&#125;/restart.log</span><br><span class="line">    ($&#123;START_PROCESS&#125;) &amp; </span><br><span class="line">    echo &quot;over&quot;</span><br><span class="line">elif [ $number2 -eq 2 ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;ssh proxy has been started!&quot;</span><br><span class="line">fi</span><br><span class="line">   </span><br><span class="line">if [ $number2 -eq 0 ]            #如果进程数量为0  </span><br><span class="line">then                            #重新启动服务</span><br><span class="line">    echo &quot;Restarting $&#123;VPN_PROCESS_NAME&#125; ...&quot;</span><br><span class="line">    echo $(date &apos;+%Y-%m-%d %T&apos;) &gt;&gt; $&#123;PROCESS_PATH&#125;/restart.log</span><br><span class="line">    ($&#123;VPN_PROCESS&#125;) &amp;</span><br><span class="line">    echo &quot;over&quot;</span><br><span class="line">elif [ $number -eq 2 ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;shadow proxy has been started!&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h1&gt;&lt;h2 id=&quot;ssh-的端口转发&quot;&gt;&lt;a href=&quot;#ssh-的端口转发&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="笔记" scheme="http://xraorao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="网络" scheme="http://xraorao.top/categories/%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="笔记" scheme="http://xraorao.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ssh" scheme="http://xraorao.top/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>ShadowsocksR一键安装脚本</title>
    <link href="http://xraorao.top/2018/06/25/ShadowsocksR%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/"/>
    <id>http://xraorao.top/2018/06/25/ShadowsocksR一键安装脚本/</id>
    <published>2018-06-25T02:56:31.000Z</published>
    <updated>2018-06-25T03:07:39.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ShadowsocksR一键安装脚本"><a href="#ShadowsocksR一键安装脚本" class="headerlink" title="ShadowsocksR一键安装脚本"></a>ShadowsocksR一键安装脚本</h1><p>默认配置：<br>服务器端口：自己设定（如不设定，默认从 9000-19999 之间随机生成）<br>密码：自己设定（如不设定，默认为 teddysun.com）<br>加密方式：自己设定（如不设定，默认为 aes-256-cfb）<br>协议（Protocol）：自己设定（如不设定，默认为 origin）<br>混淆（obfs）：自己设定（如不设定，默认为 plain）</p><p>客户端下载：<br><a href="https://github.com/shadowsocks" target="_blank" rel="noopener">github shadowsock</a></p><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh</span><br><span class="line">chmod +x shadowsocksR.sh</span><br><span class="line">./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</span><br></pre></td></tr></table></figure><h1 id="卸载步骤"><a href="#卸载步骤" class="headerlink" title="卸载步骤"></a>卸载步骤</h1><pre><code>./shadowsocksR.sh uninstall</code></pre><h1 id="多用户配置"><a href="#多用户配置" class="headerlink" title="多用户配置"></a>多用户配置</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line"><span class="attr">"server_ipv6"</span>: <span class="string">"[::]"</span>,</span><br><span class="line"><span class="attr">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line"><span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line"><span class="attr">"port_password"</span>:&#123;</span><br><span class="line">    <span class="attr">"8989"</span>:<span class="string">"password1"</span>,</span><br><span class="line">    <span class="attr">"8990"</span>:<span class="string">"password2"</span>,</span><br><span class="line">    <span class="attr">"8991"</span>:<span class="string">"password3"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line"><span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line"><span class="attr">"protocol"</span>: <span class="string">"origin"</span>,</span><br><span class="line"><span class="attr">"protocol_param"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"obfs"</span>: <span class="string">"plain"</span>,</span><br><span class="line"><span class="attr">"obfs_param"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"redirect"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"dns_ipv6"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"fast_open"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"workers"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ShadowsocksR一键安装脚本&quot;&gt;&lt;a href=&quot;#ShadowsocksR一键安装脚本&quot; class=&quot;headerlink&quot; title=&quot;ShadowsocksR一键安装脚本&quot;&gt;&lt;/a&gt;ShadowsocksR一键安装脚本&lt;/h1&gt;&lt;p&gt;默认配置：&lt;
      
    
    </summary>
    
      <category term="笔记" scheme="http://xraorao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://xraorao.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="shadowsocks" scheme="http://xraorao.top/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>groovy学习笔记</title>
    <link href="http://xraorao.top/2018/06/22/groovy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://xraorao.top/2018/06/22/groovy学习笔记/</id>
    <published>2018-06-22T07:02:19.000Z</published>
    <updated>2018-06-22T12:42:34.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Groovy是一种基于Java平台的面向对象语言。 Groovy 1.0于2007年1月2日发布，其中Groovy 2.4是当前的主要版本。 Groovy通过Apache License v 2.0发布。</p><p>Groovy的特点<br>Groovy中有以下特点:</p><ul><li>同时支持静态和动态类型。</li><li>支持运算符重载。</li><li>本地语法列表和关联数组。</li><li>对正则表达式的本地支持。</li><li>种标记语言，如XML和HTML原生支持。</li><li>Groovy对于Java开发人员来说很简单，因为Java和Groovy的语法非常相似。</li><li>您可以使用现有的Java库。</li><li>Groovy扩展了java.lang.Object。</li></ul><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>groovy 大部分的语法和java相同，并且支持静态类型。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> x = <span class="number">5</span></span><br><span class="line">x = <span class="string">"jack"</span></span><br><span class="line">println x</span><br></pre></td></tr></table></figure><h2 id="数值和表达式"><a href="#数值和表达式" class="headerlink" title="数值和表达式"></a>数值和表达式</h2><ul><li>支持的数据类型：<br>byte short int long float double char boolean String 同java 对应的类封装类型</li></ul><p>其中整数是Intgerger类的实例，有小数部分的数据是BigDecimal类的实例</p><ul><li>特殊运算符：</li></ul><p>范围运算符：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> range = <span class="number">0.</span><span class="number">.5</span></span><br><span class="line">println range <span class="comment">// 输出： [0,1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><p><strong>groovy 支持运算符的<a href="https://www.cnblogs.com/rollenholt/archive/2013/10/02/3349047.html" target="_blank" rel="noopener">重载</a></strong></p><p><strong>动态类型：</strong></p><p>def variable_name<br>动态类型在运行时确定，不在编译的时候确定，类似java的多态</p><h2 id="字符串和正则表达式"><a href="#字符串和正则表达式" class="headerlink" title="字符串和正则表达式"></a>字符串和正则表达式</h2><h3 id="字符串字面值"><a href="#字符串字面值" class="headerlink" title="字符串字面值"></a>字符串字面值</h3><p>单引号：所见即所得<br>双引号：解释性字符串<br>三引号：解释性字符串 多行文本用这个</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> age=<span class="number">25</span></span><br><span class="line"><span class="string">'My age is $&#123;age&#125;'</span>    <span class="comment">//My age is $&#123;age&#125;</span></span><br><span class="line"><span class="string">"My age is $&#123;age&#125;"</span>    <span class="comment">//My age is 25</span></span><br><span class="line"><span class="string">"""//My age is $&#123;age&#125;"""</span>    <span class="comment">//My age is 25</span></span><br><span class="line"><span class="string">"""My </span></span><br><span class="line"><span class="string">age </span></span><br><span class="line"><span class="string">is \$&#123;age&#125;"""</span>    <span class="comment">//My age is $&#123;age&#125;</span></span><br></pre></td></tr></table></figure><h3 id="字符串索引"><a href="#字符串索引" class="headerlink" title="字符串索引"></a>字符串索引</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> greeting=<span class="string">'Hello World'</span></span><br><span class="line">greeting[<span class="number">4</span>]        <span class="comment">//o</span></span><br><span class="line">greeting[<span class="number">-1</span>]    <span class="comment">//d</span></span><br><span class="line">greeting[<span class="number">1.</span><span class="number">.2</span>]    <span class="comment">//el</span></span><br><span class="line">greeting[<span class="number">1.</span>.&lt;<span class="number">3</span>]        <span class="comment">//el, 等价于greeting[1..2]</span></span><br><span class="line">greeting[<span class="number">4.</span><span class="number">.2</span>]        <span class="comment">//oll</span></span><br><span class="line">greeting[<span class="number">4</span>,<span class="number">1</span>,<span class="number">6</span>]        <span class="comment">//oew</span></span><br></pre></td></tr></table></figure><p>groovy 中的字符串是有序序列，单个字符可以通过位置访问，支持负索引。</p><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><p>参考链接：<a href="https://www.w3cschool.cn/groovy/groovy_strings.html" target="_blank" rel="noopener">groovy字符串</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> greeting=<span class="string">'Hello world'</span></span><br><span class="line"><span class="string">'Hello'</span>+<span class="string">'world'</span>        <span class="comment">//Helloworld</span></span><br><span class="line"><span class="string">'Hello'</span>*<span class="number">3</span>            <span class="comment">//HelloHelloHello</span></span><br><span class="line">greeting-<span class="string">'o world'</span>    <span class="comment">//Hell</span></span><br><span class="line">greeting.size()        <span class="comment">//11</span></span><br><span class="line">greeting.length()    <span class="comment">//11</span></span><br><span class="line">greeting.count(<span class="string">'o'</span>)        <span class="comment">//2</span></span><br><span class="line">greeting.contains(<span class="string">'ell'</span>)    <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>索引类似java String 的 charAt()方法获取指定位置的字符</p><h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><p>def message=’Hello’<br>message.center(11)    //返回长度为11，左右两边均使用空格填充的字符串<br>message.center(3)<br>message.center(11,’#’)<br>message.eachMatch(‘.’)</p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>~’regex’定义正则表达式</p><p>def regex=~’cheese’</p><p>if(‘cheesecake’=~’cheese’) //左边String对象和右边的正则匹配，返回布尔值</p><p>==~ 精确匹配 ‘cheesecake’==~’cheese’</p><p>\\在正则中表示一个反斜杠字符<br>类似于java中正则的使用，用单引号括起<br>也可以用js的方法，直接使用，不用引号</p><p>1 def matcher=”\$abc.”=~\\$(.<em>)\.<br>2 def matcher=”\$abc.”=~/\$(.</em>)./</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> methodName() &#123; </span><br><span class="line">   <span class="comment">//Method code </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不用显式指定参数名字</span></span><br><span class="line"><span class="keyword">def</span> methodName(parameter1, parameter2, parameter3) &#123; </span><br><span class="line">   <span class="comment">// Method code goes here </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认参数</span></span><br><span class="line"><span class="keyword">def</span> someMethod(para1,para2=<span class="number">0</span>,para3=<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">// Method code goes here </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值</span></span><br><span class="line"><span class="keyword">return</span> 可选，省略了，代码的最后一条语句的值就是方法的返回值</span><br></pre></td></tr></table></figure><p>groovy 定义方法时不用显示指定参数类型</p><h2 id="groovy-列表、映射、范围"><a href="#groovy-列表、映射、范围" class="headerlink" title="groovy 列表、映射、范围"></a>groovy 列表、映射、范围</h2><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>在java list基础上进行了一些扩展</p><p>[11，12，13，14] - 整数值列表<br>[‘Angular’，’Groovy’，’Java’] - 字符串列表<br>[1，2，[3，4]，5] - 嵌套列表<br>[‘Groovy’，21，2.11] - 异构的对象引用列表<br>[] - 一个空列表</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> list = [<span class="string">'hello'</span>, <span class="number">12</span>, <span class="number">1.5</span>]</span><br><span class="line">println list[<span class="number">0.</span><span class="number">.1</span>]</span><br><span class="line">list &lt;&lt; <span class="string">'world'</span> </span><br><span class="line">println list[<span class="number">0.</span>.<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出如下：</span></span><br><span class="line">[hello, <span class="number">12</span>]</span><br><span class="line">[hello, <span class="number">12</span>, <span class="number">1.5</span>, world]</span><br></pre></td></tr></table></figure><p> &lt;&lt;  把新元素追加到列表末尾 调用#leftShift</p><ul><li>连接两个列表          调用#plus</li></ul><ul><li>从列表删除元素        调用#minus<br>number[1]=[33,44]        调用#putAt</li></ul><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><p>类似 java 的Map</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1. 访问 调用getAt</span></span><br><span class="line"><span class="keyword">def</span> names=[‘ken’:’Barclay,’John’:’Savage’] </span><br><span class="line"><span class="keyword">def</span> divisors=[<span class="number">4</span>:[<span class="number">2</span>],<span class="number">6</span>:[<span class="number">3</span>,<span class="number">2</span>],<span class="number">12</span>:[<span class="number">6</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>]] </span><br><span class="line">names[‘Ken’] <span class="comment">//第一种访问写法 </span></span><br><span class="line">names.Ken <span class="comment">//第二种访问写法 </span></span><br><span class="line">divisors[<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 赋值 调用putAt</span></span><br><span class="line">divisors[<span class="number">6</span>]=[<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 空映射</span></span><br><span class="line">[:] 空映射</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 映射方法</span></span><br><span class="line"><span class="keyword">def</span> map=[<span class="string">'ken'</span>:<span class="number">2745</span>,<span class="string">'john'</span>:<span class="number">2746</span>,<span class="string">'sally'</span>:<span class="number">2742</span>]</span><br><span class="line">map.get(<span class="string">'david'</span>,<span class="number">9999</span>)    <span class="comment">//9999</span></span><br><span class="line">map.get(<span class="string">'sally'</span>)        <span class="comment">//2742</span></span><br><span class="line">map.keySet()            <span class="comment">//[david,ken,sally,john]</span></span><br><span class="line">mp[<span class="string">'ken'</span>]                <span class="comment">//2745</span></span><br><span class="line">mp.values.asList()</span><br></pre></td></tr></table></figure><h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><p>1..10 - 包含范围的示例<br>1 .. &lt;10 - 独占范围的示例, 排除最后一个数值<br>‘a’..’x’ - 范围也可以由字符组成<br>10..1 - 范围也可以按降序排列<br>‘x’..’a’ - 范围也可以由字符组成并按降序排列。</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>如果不声明public/private等访问权限的话，Groovy中类及其变量默认都是public的。</p><p>在使用默认修饰符的时候，自动生成隐藏的getter和setter方法，不过也可以直接访问</p><p>其余和java差不多</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包，英文叫Closure，是Groovy中非常重要的一个数据类型或者说一种概念了。闭包，是一种数据类型，它代表了一段可执行的代码。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> aClosure = &#123;<span class="comment">//闭包是一段代码，所以需要用花括号括起来..  </span></span><br><span class="line">    String param1, <span class="keyword">int</span> param2 -&gt;  <span class="comment">//这个箭头很关键。箭头前面是参数定义，箭头后面是代码  </span></span><br><span class="line">    println<span class="string">"this is code"</span> <span class="comment">//这是代码，最后一句是返回值，  </span></span><br><span class="line">   <span class="comment">//也可以使用return，和Groovy中普通函数一样  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>closure 的定义格式为：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> xxx = &#123;paramters -&gt; code&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//或者  </span></span><br><span class="line"><span class="keyword">def</span> xxx = &#123;无参数，纯code&#125;</span><br></pre></td></tr></table></figure><p>闭包的访问：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aClosure.call(<span class="string">"this is string"</span>,<span class="number">100</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment">//或者  </span></span><br><span class="line">aClosure(<span class="string">"this is string"</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>闭包的默认参数，it, 类似 this</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> fun2 = &#123;</span><br><span class="line">    it-&gt; <span class="string">"dsdsd"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">println( fun2.call())</span><br></pre></td></tr></table></figure><p>闭包默认参数的覆盖</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> fun3 = &#123;</span><br><span class="line">    -&gt; <span class="string">"dsdsd"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">println( fun3.call())</span><br><span class="line">fun3.call(<span class="string">"d"</span>)  <span class="comment">//执行这个方法的时候就会报错</span></span><br></pre></td></tr></table></figure><h3 id="闭包和函数的区别"><a href="#闭包和函数的区别" class="headerlink" title="闭包和函数的区别"></a>闭包和函数的区别</h3><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h2 id="特征-trait"><a href="#特征-trait" class="headerlink" title="特征(trait)"></a>特征(trait)</h2><p>特征是语言的构造，允许</p><ul><li>行为的组成</li><li>接口的运行时实现</li><li>与静态类型检查/编译的兼容性</li></ul><p>traint 可以被看做是承载默认实现和状态的接口</p><p>traint 的实现</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> &#123;</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">      Student st = <span class="keyword">new</span> Student();</span><br><span class="line">      st.StudentID = <span class="number">1</span>;</span><br><span class="line">      st.Marks1 = <span class="number">10</span>; </span><br><span class="line">      println(st.DisplayMarks());</span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Marks</span> &#123;</span> </span><br><span class="line">   <span class="keyword">int</span> Marks1;</span><br><span class="line">   <span class="keyword">void</span> DisplayMarks() &#123;</span><br><span class="line">      println(<span class="string">"Display Marks"</span>);</span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Marks</span> &#123;</span> </span><br><span class="line">   <span class="keyword">int</span> StudentID</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>traint 用于行为的构成：</p><p>特征可以用于以受控的方式实现多重继承，避免<a href="https://www.cnblogs.com/lenomirei/p/5490714.html" target="_blank" rel="noopener">钻石问题</a>。<br>在下面的代码示例中，我们定义了两个特征 - Marks和Total。我们的Student类实现了两个特征。由于学生类扩展了这两个特征，它能够访问这两种方法 - DisplayMarks和DisplayTotal。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> &#123;</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">      Student st = <span class="keyword">new</span> Student();</span><br><span class="line">      st.StudentID = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      println(st.DisplayMarks());</span><br><span class="line">      println(st.DisplayTotal()); </span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Marks</span> &#123;</span></span><br><span class="line">   <span class="keyword">void</span> DisplayMarks() &#123;</span><br><span class="line">      println(<span class="string">"Marks1"</span>);</span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Total</span> &#123;</span></span><br><span class="line">   <span class="keyword">void</span> DisplayTotal() &#123; </span><br><span class="line">      println(<span class="string">"Total"</span>);</span><br><span class="line">   &#125; </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Marks</span>,<span class="title">Total</span> &#123;</span></span><br><span class="line">   <span class="keyword">int</span> StudentID </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展特征</p><p>特征可能扩展另一个特征，在这种情况下，必须使用extends关键字。在下面的代码示例中，我们使用Marks trait扩展了Total trait。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> &#123;</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">      Student st = <span class="keyword">new</span> Student();</span><br><span class="line">      st.StudentID = <span class="number">1</span>;</span><br><span class="line">      println(st.DisplayMarks());</span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Marks</span> &#123;</span></span><br><span class="line">   <span class="keyword">void</span> DisplayMarks() &#123;</span><br><span class="line">      println(<span class="string">"Marks1"</span>);</span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Total</span> <span class="keyword">extends</span> <span class="title">Marks</span> &#123;</span></span><br><span class="line">   <span class="keyword">void</span> DisplayMarks() &#123;</span><br><span class="line">      println(<span class="string">"Total"</span>);</span><br><span class="line">   &#125; </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Total</span> &#123;</span></span><br><span class="line">   <span class="keyword">int</span> StudentID </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总的来说，特征可以实现接口，可以被类实现，可以继承其他的特征，相比java, groovy的这一个特性相当于实现了多继承</p><h2 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h2><p>MarkupBuilder用于构造整个XML文档。通过首先创建XML文档类的对象来创建XML文档</p><p>xml 构建</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> groovy.xml.MarkupBuilder </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> &#123;</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">      <span class="keyword">def</span> mB = <span class="keyword">new</span> MarkupBuilder()</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Compose the builder</span></span><br><span class="line">      mB.collection(<span class="string">shelf :</span> <span class="string">'New Arrivals'</span>) &#123;</span><br><span class="line">         movie(<span class="string">title :</span> <span class="string">'Enemy Behind'</span>)</span><br><span class="line">         type(<span class="string">'War, Thriller'</span>)</span><br><span class="line">         format(<span class="string">'DVD'</span>)</span><br><span class="line">         year(<span class="string">'2003'</span>)</span><br><span class="line">         rating(<span class="string">'PG'</span>)</span><br><span class="line">         stars(<span class="number">10</span>)</span><br><span class="line">         description(<span class="string">'Talk about a US-Japan war'</span>) </span><br><span class="line">      &#125;</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到如下结果</span></span><br><span class="line"></span><br><span class="line">&lt;collection shelf = <span class="string">'New Arrivals'</span>&gt; </span><br><span class="line">   &lt;movie title = <span class="string">'Enemy Behind'</span> /&gt; </span><br><span class="line">      &lt;type&gt;War, Thriller&lt;/type&gt; </span><br><span class="line">      &lt;format&gt;DVD&lt;/format&gt; </span><br><span class="line">      &lt;year&gt;2003&lt;/year&gt; </span><br><span class="line">      &lt;rating&gt;PG&lt;/rating&gt; </span><br><span class="line">      &lt;stars&gt;10&lt;/stars&gt; </span><br><span class="line">      &lt;description&gt;Talk about a US-Japan war&lt;/description&gt; </span><br><span class="line">   &lt;/movie&gt; </span><br><span class="line">&lt;/collection&gt;</span><br></pre></td></tr></table></figure><p>xml 解析</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> groovy.xml.MarkupBuilder </span><br><span class="line"><span class="keyword">import</span> groovy.util.*</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> &#123;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123; </span><br><span class="line"></span><br><span class="line">      <span class="keyword">def</span> parser = <span class="keyword">new</span> XmlParser()</span><br><span class="line">      <span class="keyword">def</span> doc = parser.parse(<span class="string">"D:Movies.xml"</span>);</span><br><span class="line"></span><br><span class="line">      doc.movie.each&#123;</span><br><span class="line">         bk-&gt;</span><br><span class="line">         print(<span class="string">"Movie Name:"</span>)</span><br><span class="line">         println <span class="string">"$&#123;bk['@title']&#125;"</span></span><br><span class="line"></span><br><span class="line">         print(<span class="string">"Movie Type:"</span>)</span><br><span class="line">         println <span class="string">"$&#123;bk.type[0].text()&#125;"</span></span><br><span class="line"></span><br><span class="line">         print(<span class="string">"Movie Format:"</span>)</span><br><span class="line">         println <span class="string">"$&#123;bk.format[0].text()&#125;"</span></span><br><span class="line"></span><br><span class="line">         print(<span class="string">"Movie year:"</span>)</span><br><span class="line">         println <span class="string">"$&#123;bk.year[0].text()&#125;"</span></span><br><span class="line"></span><br><span class="line">         print(<span class="string">"Movie rating:"</span>)</span><br><span class="line">         println <span class="string">"$&#123;bk.rating[0].text()&#125;"</span></span><br><span class="line"></span><br><span class="line">         print(<span class="string">"Movie stars:"</span>)</span><br><span class="line">         println <span class="string">"$&#123;bk.stars[0].text()&#125;"</span></span><br><span class="line"></span><br><span class="line">         print(<span class="string">"Movie description:"</span>)</span><br><span class="line">         println <span class="string">"$&#123;bk.description[0].text()&#125;"</span></span><br><span class="line">         println(<span class="string">"*******************************"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><table><thead><tr><th>功能</th><th>对象</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>JsonSlurper    | JsonSlurper是一个将JSON文本或阅读器内容解析为Groovy数据的类结构，例如地图，列表和原始类型，如整数，双精度，布尔和字符串。<br>JsonOutput | 此方法负责将Groovy对象序列化为JSON字符串。</p><p>json 解析</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">http.request( GET, TEXT ) &#123;</span><br><span class="line">   headers.Accept = <span class="string">'application/json'</span></span><br><span class="line">   headers.<span class="string">'User-Agent'</span> = USER_AGENT</span><br><span class="line"></span><br><span class="line">   response.success = &#123; </span><br><span class="line">      res, rd -&gt;  </span><br><span class="line">      <span class="keyword">def</span> jsonText = rd.text </span><br><span class="line"></span><br><span class="line">      <span class="comment">//Setting the parser type to JsonParserLax</span></span><br><span class="line">      <span class="keyword">def</span> parser = <span class="keyword">new</span> JsonSlurper().setType(JsonParserType.LAX)</span><br><span class="line">      <span class="keyword">def</span> jsonResp = parser.parseText(jsonText)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析文本数据</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> &#123;</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">      <span class="keyword">def</span> jsonSlurper = <span class="keyword">new</span> JsonSlurper()</span><br><span class="line">      <span class="keyword">def</span> object = jsonSlurper.parseText(<span class="string">'&#123; "name": "John", "ID" : "1"&#125;'</span>) </span><br><span class="line"></span><br><span class="line">      println(object.name);</span><br><span class="line">      println(object.ID);</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析整数列表</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> &#123;</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">      <span class="keyword">def</span> jsonSlurper = <span class="keyword">new</span> JsonSlurper()</span><br><span class="line">      Object lst = jsonSlurper.parseText(<span class="string">'&#123; "List": [2, 3, 4, 5] &#125;'</span>)</span><br><span class="line">      lst.each &#123; println it &#125;</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析基本数据类型列表</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> &#123;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">      <span class="keyword">def</span> jsonSlurper = <span class="keyword">new</span> JsonSlurper()</span><br><span class="line">      <span class="keyword">def</span> obj = jsonSlurper.parseText <span class="string">''' &#123;"Integer": 12, "fraction": 12.55, "double": 12e13&#125;'''</span></span><br><span class="line"></span><br><span class="line">      println(obj.Integer);</span><br><span class="line">      println(obj.fraction);</span><br><span class="line">      println(obj.<span class="keyword">double</span>); </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>json 输出</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> groovy.json.JsonOutput </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> &#123;</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">      <span class="keyword">def</span> output = JsonOutput.toJson([<span class="string">name:</span> <span class="string">'John'</span>, <span class="string">ID:</span> <span class="number">1</span>])</span><br><span class="line">      println(output);  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"John"</span>,<span class="string">"ID"</span>:<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作用于普通 groovy 对象</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> &#123;</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">      <span class="keyword">def</span> output = JsonOutput.toJson([ <span class="keyword">new</span> Student(<span class="string">name:</span> <span class="string">'John'</span>,<span class="string">ID:</span><span class="number">1</span>),</span><br><span class="line">         <span class="keyword">new</span> Student(<span class="string">name:</span> <span class="string">'Mark'</span>,<span class="string">ID:</span><span class="number">2</span>)])</span><br><span class="line">      println(output);  </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line">   String name</span><br><span class="line">   <span class="keyword">int</span> ID; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DSLS"><a href="#DSLS" class="headerlink" title="DSLS"></a>DSLS</h1><p>Groovy允许在顶层语句的方法调用的参数周围省略括号。这被称为“命令链”功能。这个扩展的工作原理是允许一个人链接这种无括号的方法调用，在参数周围不需要括号，也不需要链接调用之间的点。</p><p>DSL或域特定语言旨在简化以Groovy编写的代码，使得它对于普通用户变得容易理解。以下示例显示了具有域特定语言的确切含义。</p><p>参考资料：</p><ul><li><a href="https://blog.csdn.net/zhaoyanjun6/article/details/70313790" target="_blank" rel="noopener">Groovy 使用完全解析</a>  </li><li><a href="https://blog.csdn.net/qjbagu/article/details/49725905" target="_blank" rel="noopener">Groovy基础——接口的实现方式</a></li><li><a href="https://www.w3cschool.cn/groovy/groovy_dsls.html" target="_blank" rel="noopener">Groovy教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;Groovy是一种基于Java平台的面向对象语言。 Groovy 1.0于2007年1月2日发布，其中Groovy 2.4是当前的主要版本。
      
    
    </summary>
    
      <category term="编程" scheme="http://xraorao.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="groovy" scheme="http://xraorao.top/categories/%E7%BC%96%E7%A8%8B/groovy/"/>
    
    
      <category term="groovy" scheme="http://xraorao.top/tags/groovy/"/>
    
  </entry>
  
  <entry>
    <title>数据传输的加密</title>
    <link href="http://xraorao.top/2018/06/22/%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E7%9A%84%E5%8A%A0%E5%AF%86/"/>
    <id>http://xraorao.top/2018/06/22/数据传输的加密/</id>
    <published>2018-06-22T01:34:50.000Z</published>
    <updated>2018-06-22T02:50:07.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>加密算法首先分为两种：单向加密、双向加密</p><p><strong>单向加密</strong>是不可逆的，只能加密，不能解密，钥匙即本身。通常用来传输类似用户名和密码，直接将加密后的数据提交到后台，因为后台不需要知道用户名和密码，可以直接将收到的加密后的数据存储到数据库。</p><p><strong>双向加密</strong>通常分为<strong>对称加密</strong>和<strong>非对称加密</strong>。对称加密指的是，加密和解密使用的是同一把秘钥。非对称加密指的是，加密和解密双方事先生成一对秘钥，使用其中的一把作为公钥用来加密信息，并且只能使用对应的私钥进行解密信息。这样可以避免钥匙的传输风险了。</p><h1 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h1><ul><li>几种对称性加密算法：<code>AES</code>,<code>DES</code>,<code>3DES</code></li></ul><p>DES是一种分组数据加密技术（先将数据分成固定长度的小数据块，之后进行加密），速度较快，适用于大量数据加密，而3DES是一种基于DES的加密算法，使用3个不同密匙对同一个分组数据块进行3次加密，如此以使得密文强度更高。</p><p>相较于DES和3DES算法而言，AES算法有着更高的速度和资源使用效率，安全级别也较之更高了，被称为下一代加密标准。</p><ul><li>几种非对称性加密算法：<code>RSA</code>,<code>DSA</code>,<code>ECC</code></li></ul><p>RSA和DSA的安全性及其它各方面性能都差不多，而ECC较之则有着很多的性能优越，包括处理速度，带宽要求，存储空间等等。</p><p>RSA 通常采用1024位，ECC 160 位, AES 128 位</p><ul><li>几种线性散列算法（签名算法，单向加密，不可逆加密）：<code>MD5</code>,<code>SHA1</code>,<code>SHA-2</code>,<code>HMAC</code></li></ul><p>这几种算法只生成一串不可逆的密文，经常用其效验数据传输过程中是否经过修改，因为相同的生成算法对于同一明文只会生成唯一的密文，若相同算法生成的密文不同，则证明传输数据进行过了修改。通常在数据传说过程前，使用MD5和SHA1算法均需要发送和接收数据双方在数据传送之前就知道密匙生成算法，而HMAC与之不同的是需要生成一个密匙，发送方用此密匙对数据进行摘要处理（生成密文），接收方再利用此密匙对接收到的数据进行摘要处理，再判断生成的密文是否相同。</p><p>MD5即Message-Digest Algorithm 5（信息-摘要算法 5），用于确保信息传输完整一致，目前广泛用于错误检查，例如种子下载的碎片完整性。输入不定长的数据，输出为128位的hash值。</p><p>SHA-1: SHA-1在许多安全协议中广为使用，包括TLS和SSL、PGP、SSH、S/MIME和IPsec，曾被视为是MD5（更早之前被广为使用的散列函数）的后继者。但SHA-1的安全性如今被密码学家严重质疑。</p><p>SHA-2: SHA-224、SHA-256、SHA-384，和SHA-512并称为SHA-2。<br>输出的hash的位数不一样。</p><p>参考文档：</p><ul><li><a href="https://www.cnblogs.com/sunxuchu/p/5483956.html" target="_blank" rel="noopener">各种加密算法比较</a>  </li><li><a href="http://www.mahaixiang.cn/internet/1233.html" target="_blank" rel="noopener">HTTP和HTTPS的区别</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;加密算法首先分为两种：单向加密、双向加密&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;单向加密&lt;/strong&gt;是不可逆的，只能加密，不能解密，钥匙即本身
      
    
    </summary>
    
    
      <category term="加密" scheme="http://xraorao.top/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>docker 远程构建</title>
    <link href="http://xraorao.top/2018/06/20/docker-%E8%BF%9C%E7%A8%8B%E6%9E%84%E5%BB%BA/"/>
    <id>http://xraorao.top/2018/06/20/docker-远程构建/</id>
    <published>2018-06-20T07:01:58.000Z</published>
    <updated>2018-06-20T07:13:16.727Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-远程连接"><a href="#docker-远程连接" class="headerlink" title="docker 远程连接"></a>docker 远程连接</h1><p>docker server和client是分开的，因此支持远程连接</p><h1 id="dockerd-设置"><a href="#dockerd-设置" class="headerlink" title="dockerd 设置"></a>dockerd 设置</h1><p>方法1： 修改 /etc/default/docker 文件</p><pre><code>DOCKER_OPTS=&quot;-H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375&quot; </code></pre><p>方法2： 修改 /etc/systemd/system/docker.service 文件</p><pre><code>ExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375</code></pre><p>重启docker服务</p><pre><code>systemctl daemon-reload &amp;&amp; systemctl restart docker</code></pre><h1 id="TSL-认证"><a href="#TSL-认证" class="headerlink" title="TSL 认证"></a>TSL 认证</h1><p>如果主机在公网环境，则需要使用TSL认证</p><p>参考资料：</p><ul><li><a href="https://www.jianshu.com/p/7ba1a93e6de4" target="_blank" rel="noopener">Docker Daemon连接方式详解</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;docker-远程连接&quot;&gt;&lt;a href=&quot;#docker-远程连接&quot; class=&quot;headerlink&quot; title=&quot;docker 远程连接&quot;&gt;&lt;/a&gt;docker 远程连接&lt;/h1&gt;&lt;p&gt;docker server和client是分开的，因此支持远程连接&lt;
      
    
    </summary>
    
    
      <category term="docker" scheme="http://xraorao.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>黑苹果安装记录</title>
    <link href="http://xraorao.top/2018/06/20/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
    <id>http://xraorao.top/2018/06/20/黑苹果安装记录/</id>
    <published>2018-06-20T06:26:50.000Z</published>
    <updated>2018-06-23T02:27:16.251Z</updated>
    
    <content type="html"><![CDATA[<p>笔记本配置：</p><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:left">详情</th></tr></thead><tbody><tr><td style="text-align:left"></td></tr></tbody></table><p>型号 | 神舟战神Z6-i78154S2<br>CPU  | Intel-core i7-4720HQ<br>核心显卡 | Intel Graphics HD 4600<br>独显 | NVIDIA GTX 960M</p><p>这是我的<a href="/download/EFI.zip">Config</a>文件</p><p>软件准备：</p><ul><li>transMac 烧录镜像</li><li>DiskGenius 硬盘分区工具</li></ul><p>BIOS + MBR 转 GPT + EFI</p><ol><li><p>使用U盘 PE 系统，将硬盘MBR分区表备份出来</p></li><li><p>使用DG 软件将MBR 转为 GPT 分区</p></li><li><p>挂载ESP分区,很关键，不然无法启动系统</p><pre><code>bcdboot c:\windows /s X: /f uefi /l zh-cn </code></pre></li></ol><p>其中X为你指派的ESP分区盘符。（修复UEfi也可借助工具）</p><ol start="4"><li>查看ESP分区是否已经写入了efi等启动文件</li></ol><p>参考链接：<a href="http://diy.zol.com.cn/609/6094015.html" target="_blank" rel="noopener">免重装系统 手把手教你MBR转GPT分区表</a></p><p>已经驱动的硬件：</p><ul><li>显卡</li><li>声卡</li><li>键盘</li><li>背光亮度</li><li>麦克风</li><li>摄像头</li></ul><p>无解：</p><ul><li>无线网卡，准备换一个博通的</li><li>蓝牙</li></ul><p>修复黑苹果和windows系统时间不同步的问题：<br>bios 时钟设置UTC时间，mac OS 自动识别到UTC+8的时间，但是windows无法变成UTC+8, 因此需要在windows上面执行如下指令：</p><pre><code>Reg add HKLM\SYSTEM\CurrentControlSet\Control\TimeZoneInformation /v RealTimeIsUniversal /t REG_DWORD /d 1</code></pre><p>修复黑苹果睡眠重启问题：<a href="http://bbs.pcbeta.com/viewthread-1569975-1-1.html" target="_blank" rel="noopener">参考链接</a></p><p>参考链接：</p><ul><li><a href="https://forum.51nb.com/forum.php?mod=viewthread&amp;tid=1754497&amp;extra=" target="_blank" rel="noopener">修改屏幕亮度的快捷键</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;笔记本配置：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;项目&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;详情&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td s
      
    
    </summary>
    
    
      <category term="mac" scheme="http://xraorao.top/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Cloudera和CDH5的安装</title>
    <link href="http://xraorao.top/2018/06/15/Cloudera%E5%92%8CCDH5%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>http://xraorao.top/2018/06/15/Cloudera和CDH5的安装/</id>
    <published>2018-06-15T00:20:02.000Z</published>
    <updated>2018-06-15T00:22:01.414Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><h3 id="1-安装Oracel-JDK（所有节点）"><a href="#1-安装Oracel-JDK（所有节点）" class="headerlink" title="1.安装Oracel JDK（所有节点）"></a>1.安装Oracel JDK（所有节点）</h3><p>查看cloudera官网上堆系统的要求安装jdk版本，<a href="https://www.cloudera.com/documentation/enterprise/release-notes/topics/rn_consolidated_pcm.html#concept_dcw_m5v_jz" target="_blank" rel="noopener">查看链接</a><br>CDH5.11.X要求JDK1.7u55 or higher 、JDK1.8u31 or higher，<strong>要求集群所有机器的JDK版本一致</strong></p><h3 id="2-安装Mysql-（主节点）"><a href="#2-安装Mysql-（主节点）" class="headerlink" title="2.安装Mysql （主节点）"></a>2.安装Mysql （主节点）</h3><p>集群中至少有一台机器安装mysql，建议安装在主节点机器上。安装mysql<a href="http://blog.csdn.net/chenpy/article/details/50344085" target="_blank" rel="noopener">参考链接</a></p><ul><li><p>mysql配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置mysql数据库远程连接</span></span><br><span class="line">$ mysql -uroot -p123456</span><br><span class="line">mysql&gt;grant all privileges on *.* to <span class="string">'root'</span>@<span class="string">'%'</span> identified by <span class="string">'123456'</span> with grant option;</span><br><span class="line">mysql&gt;flush privileges;</span><br><span class="line">$ sudo vi /etc/mysql/my.conf</span><br><span class="line"><span class="built_in">bind</span>-address=127.0.0.1 注释掉</span><br><span class="line">$ sudo service mysql restart</span><br></pre></td></tr></table></figure></li><li><p>生成CDH5所需数据库</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> amon <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> amon.* <span class="keyword">to</span> <span class="string">'amon'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'amon'</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> rman <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> rman.* <span class="keyword">to</span> <span class="string">'rman'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'rman'</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> metastore <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> metastore.* <span class="keyword">to</span> <span class="string">'hive'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'hive'</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> sentry <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> sentry.* <span class="keyword">to</span> <span class="string">'sentry'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'sentry'</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">nav</span> <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> nav.* <span class="keyword">to</span> <span class="string">'nav'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'nav'</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> navms <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> navms.* <span class="keyword">to</span> <span class="string">'navms'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'navms'</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> hue <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8 <span class="keyword">default</span> <span class="keyword">collate</span> utf8_general_ci;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> hue.* <span class="keyword">to</span> <span class="string">'hue'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'hue'</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.schemata;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> oozie;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> oozie.* <span class="keyword">to</span> <span class="string">'oozie'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'oozie'</span>;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> oozie.* <span class="keyword">to</span> <span class="string">'oozie'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'oozie'</span>;</span><br></pre></td></tr></table></figure><h3 id="3-网络配置-（所有节点）"><a href="#3-网络配置-（所有节点）" class="headerlink" title="3.网络配置 （所有节点）"></a>3.网络配置 （所有节点）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.修改hostname</span></span><br><span class="line">sudo vi /etc/hostsname ==&gt; cloud01,cloud02,cloud03</span><br><span class="line"><span class="comment"># 2. 修改ip映射</span></span><br><span class="line">sudo vi /etc/hosts </span><br><span class="line">==&gt; example: </span><br><span class="line">192.168.1.1 cloud01[,other name]</span><br><span class="line">192.168.1.3 cloud02[,other name]</span><br><span class="line">192.168.1.3 cloud03[,other name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 关闭防火墙</span></span><br><span class="line">sudo apt-get install ufw -y</span><br><span class="line">sudo ufw stop</span><br><span class="line">sudo ufw status //查看防火墙状态</span><br></pre></td></tr></table></figure><h3 id="3-设置SSH无密码访问"><a href="#3-设置SSH无密码访问" class="headerlink" title="3.设置SSH无密码访问"></a>3.设置SSH无密码访问</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.生成密钥对，集群所有机器上执行命令</span></span><br><span class="line">ssh-keygen -t rsa  //默认生成两个文件 ~/.ssh/id_rsa ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.选择集群一台机器，例如cloud01,假设集群有5台机器</span></span><br><span class="line">root@cloud01:~<span class="comment"># for ip in `seq 1 5`;do scp root@cloud0$ip:~/.ssh/id_rsa.pub ~/.ssh/rsa_temp &amp;&amp; cat ~/.ssh/rsa_temp &gt;&gt; ~/.ssh/authorized_keys;done //此时会在~/.ssh/目录下生成authorizied_keys文件</span></span><br><span class="line">root@cloud01:~<span class="comment"># for ip in `seq 2 5`;do scp ~/.ssh/authorized_keys root@cloud0$ip:~/.ssh/;done //复制authorizedkeys到其他的主机中</span></span><br><span class="line">root@cloud01:~<span class="comment"># rm ~/.ssh/rsa_temp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.SSH服务器配置</span></span><br><span class="line">root@cloud01:~<span class="comment"># vi /etc/ssh/sshd_config</span></span><br><span class="line">PermitRootLogin yes //修改默认的without password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.重启SSH服务</span></span><br><span class="line">sudo service sshd restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.免密码登录失败原因</span></span><br><span class="line">1、权限问题</span><br><span class="line"></span><br><span class="line">.ssh目录，以及/home/当前用户 需要700权限，参考以下操作调整</span><br><span class="line"></span><br><span class="line">sudo chmod 700 ~/.ssh</span><br><span class="line"></span><br><span class="line">sudo chmod 700 /home/当前用户</span><br><span class="line"></span><br><span class="line">.ssh目录下的authorized_keys文件需要600或644权限，参考以下操作调整</span><br><span class="line"></span><br><span class="line">sudo chmod 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><h3 id="4-配置NTP时间同步服务（所有节点）"><a href="#4-配置NTP时间同步服务（所有节点）" class="headerlink" title="4.配置NTP时间同步服务（所有节点）"></a>4.配置NTP时间同步服务（所有节点）</h3><ul><li>时间服务器配置（主节点）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有节点安装ntp服务</span></span><br><span class="line">sudo apt-get install ntp</span><br><span class="line"><span class="comment">#查看服务是否启动</span></span><br><span class="line">service --status-all</span><br><span class="line">[+]表示启动</span><br><span class="line"></span><br><span class="line"><span class="comment">#选择cloud01作为时间同步服务器</span></span><br><span class="line">ssh cloud01</span><br><span class="line">sudo vi /etc/ntp.conf</span><br><span class="line">=====</span><br><span class="line">1. 修改server</span><br><span class="line">server [IP or hostname] [prefer]</span><br><span class="line">在 server 后端可以接 IP 或主机名，个人比较喜欢使用 IP 来设定， perfer 表示『优先使用』的服务器。</span><br><span class="line">server 2.cn.pool.ntp.org prefer</span><br><span class="line">server 0.asia.pool.ntp.org prefer</span><br><span class="line">server 3.asia.pool.ntp.org prefer</span><br><span class="line">2. 修改本地server</span><br><span class="line"><span class="comment">#让NTP Server和其自身保持同步，如果在/etc/ntp.conf中定义的server都不可用时，将使用local时间作为ntp服务提供给ntp客户端</span></span><br><span class="line">server 127.127.1.0</span><br><span class="line">fudge 127.127.1.0 stratum 5</span><br><span class="line">3.  restrict管理时间服务器权限</span><br><span class="line"><span class="comment">#不允许来自公网上ipv4和ipv6客户端的访问</span></span><br><span class="line">restrict -4 default kod notrap nomodify nopeer noquery</span><br><span class="line">restrict -6 default kod notrap nomodify nopeer noquery</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">restrict 192.168.1.0 mask 255.255.255.0 nomodify notrap</span><br><span class="line">=====</span><br></pre></td></tr></table></figure><ul><li>请求对时客户端配置（其他节点）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装ntp服务</span></span><br><span class="line">sudo apt-get install ntp</span><br><span class="line">sudo vi /etc/ntp.conf</span><br><span class="line"><span class="comment">#去掉之前默认的server</span></span><br><span class="line">server 192.168.1.1（时间服务器的ip）</span><br><span class="line">fudge 192.168.1.1 stratum 5</span><br></pre></td></tr></table></figure><ul><li>对时操作</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 使用ntp服务对时</span><br><span class="line">$ sudo service ntp stop</span><br><span class="line">$ sudo ntpdate 时间服务器ip</span><br><span class="line">$ sudo service ntp start</span><br><span class="line"></span><br><span class="line">2.查看时间状态</span><br><span class="line">$ timedatectl status</span><br><span class="line">$ sudo ntpq -p</span><br><span class="line"></span><br><span class="line">3.更换时区</span><br><span class="line">$ sudo tzselect</span><br></pre></td></tr></table></figure><h3 id="5-修改source-list"><a href="#5-修改source-list" class="headerlink" title="5.修改source.list"></a>5.修改source.list</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.增加两个源</span></span><br><span class="line">deb [arch=amd64] http://archive.cloudera.com/cm5/ubuntu/trusty/amd64/cm trusty-cm5 contrib</span><br><span class="line">deb-src http://archive.cloudera.com/cm5/ubuntu/trusty/amd64/cm trusty-cm5 contrib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.更新</span></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h2 id="2-安装CDH"><a href="#2-安装CDH" class="headerlink" title="2.安装CDH"></a>2.安装CDH</h2><h3 id="1-下载CDH安装包（主节点）"><a href="#1-下载CDH安装包（主节点）" class="headerlink" title="1.下载CDH安装包（主节点）"></a>1.<a href="https://www.cloudera.com/documentation/enterprise/release-notes/topics/cm_vd.html" target="_blank" rel="noopener">下载</a>CDH安装包（主节点）</h3><p>Ubuntu14.04下载<a href="https://archive.cloudera.com/cm5/cm/5/cloudera-manager-trusty-cm5.11.1_amd64.tar.gz" target="_blank" rel="noopener">链接</a>（CM5.11）<br>cloudera-manager<a href="http://archive.cloudera.com/cm5/cm/5/" target="_blank" rel="noopener">下载链接</a><br>CDH5<a href="http://archive.cloudera.com/cdh5/parcels/" target="_blank" rel="noopener">下载链接</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 1.解压安装包</span></span><br><span class="line">sudo mkdir /opt/cloudera-manager</span><br><span class="line">sudo tar xzf cloudera-manager*.tar.gz -C /opt/cloudera-manager</span><br><span class="line"><span class="comment"># 假设$CMF_DEFAULTS=/opt/cloudera-manager/cm-5.11.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.初始化数据库</span></span><br><span class="line">sudo <span class="variable">$CMF_DEFAULTS</span>/share/cmf/schema/scm_prepare_database.sh mysql cm -hMasterNode -uroot -p123456 --scm-host MasterNode scm scm scm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.修改angent配置</span></span><br><span class="line">sudo vi <span class="variable">$CMF_DEFAULTS</span>/etc/cloudera-scm-agent/config.ini </span><br><span class="line">server_host = MasterNode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.复制cloudera-manager到其他主机</span></span><br><span class="line">root@cloud01:~<span class="comment"># for $ip in `seq 2 5`;do scp -r $CMF_DEFAULTS/ root@cloud0$ip:/opt/</span></span><br></pre></td></tr></table></figure></p><h3 id="2-为CDH创建用户（所有节点）"><a href="#2-为CDH创建用户（所有节点）" class="headerlink" title="2.为CDH创建用户（所有节点）"></a>2.为CDH创建用户（所有节点）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@cloud01:~<span class="comment"># useradd --system --home=$CMF_DEFAULTS/run/cloudera-scm-server --no-create-home --shell=/bin/false --comment "Cloudera SCM User" cloudera-scm</span></span><br></pre></td></tr></table></figure><h3 id="3-创建相关文件夹（主节点）"><a href="#3-创建相关文件夹（主节点）" class="headerlink" title="3.创建相关文件夹（主节点）"></a>3.创建相关文件夹（主节点）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir /var/lib/cloudera-scm-server</span><br><span class="line">$ sudo chown cloudera-scm:cloudera-scm /var/lib/cloudera-scm-server</span><br></pre></td></tr></table></figure><h3 id="4-准备Parcels，用于安装CDH5"><a href="#4-准备Parcels，用于安装CDH5" class="headerlink" title="4.准备Parcels，用于安装CDH5"></a>4.准备Parcels，用于安装CDH5</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 1.主节点放置CDH5 Parcel 库文件</span></span><br><span class="line">$ sudo mkdir -p /opt/cloudera/parcel-repo</span><br><span class="line">$ sudo chown cloudera-scm:cloudera-scm /opt/cloudera/parcel-repo</span><br><span class="line">$ sudo mv /path/to/CDH5.parcel /opt/cloudera/parcel-repo/ </span><br><span class="line">$ sudo mv /path/to/CDH5.parcel.sha1 /opt/cloudera/parcel-repo/CDH5.parcel.sha</span><br><span class="line">$ sudo mv /path/to/manifest.json /opt/cloudera/parcel-repo/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.所有节点创建parcels目录</span></span><br><span class="line">$ sudo mkdir -p /opt/cloudera/parcels</span><br><span class="line">$ sudo chown cloudera-scm:cloudera-scm /opt/cloudera/parcels</span><br></pre></td></tr></table></figure><h3 id="5-启动cloudera-scm-服务"><a href="#5-启动cloudera-scm-服务" class="headerlink" title="5.启动cloudera scm 服务"></a>5.启动cloudera scm 服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 主节点启动server服务</span></span><br><span class="line">$ root@cloud01:~<span class="comment"># /$CMF_DEFAULTS/etc/init.d/cloudera-scm-server start</span></span><br><span class="line">//server启动日志/var/<span class="built_in">log</span>/cloudera-scm-server/cloudera-scm-server.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 所有节点启动agent服务</span></span><br><span class="line">$ root@cloud01:~<span class="comment"># /$CMF_DEFAULTS/etc/init.d/cloudera-scm-agent start</span></span><br><span class="line">//agent启动日志/var/<span class="built_in">log</span>/cloudera-scm-agent/cloudera-scm-agent.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.设置机器重启自动运行服务</span></span><br><span class="line">$ cp <span class="variable">$CMF_DEFAULTS</span>/etc/init.d/cloudera-scm-server /etc/init.d/cloudera-scm-server</span><br><span class="line">$ update-rc.d cloudera-scm-server defaults</span><br><span class="line"></span><br><span class="line">$ cp <span class="variable">$CMF_DEFAULTS</span>/etc/init.d/cloudera-scm-agent /etc/init.d/cloudera-scm-agent</span><br><span class="line">$ update-rc.d cloudera-scm-agent defaults</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.取消自动重启</span></span><br><span class="line">$ sudo update-rc.d -f cloudera-scm-agent remove</span><br></pre></td></tr></table></figure><p>tips:这一步如果没有完成好，会导致后面的cloudera-manager agent安装出错，<br>推荐顺序<br>启动/opt目录下的agent服务<br>设置步骤3，<strong>但不要使用service 命令启动</strong><br>安装完成后，可以去掉自动重启（执行步骤4）</p><h3 id="6-CDH5网页配置"><a href="#6-CDH5网页配置" class="headerlink" title="6.CDH5网页配置"></a>6.CDH5网页配置</h3><ul><li>打开<a href="http://clouder-server-host:7180" target="_blank" rel="noopener">http://clouder-server-host:7180</a></li><li>默认密码是admin</li><li>选择免费版本，不需要安装JDK</li><li>root用户登录，提前将集群机器的root密码设置一样，并且打通root用户的ssh登录</li></ul><h3 id="7-安装kafka服务"><a href="#7-安装kafka服务" class="headerlink" title="7.安装kafka服务"></a>7.安装kafka服务</h3><p>1.下载kafka parcel，在线或者<a href="https://archive.cloudera.com/kafka/parcels/latest/" target="_blank" rel="noopener">离线</a>都可以，然后在集群所有机器中分发激活Kafka Parcel</p><p>2.集群添加kafka服务<br>若提示，或者错误日志中提示Java Heap空间太小：<br>Missing required value: Destination Broker List<br>Missing required value: Source Broker List</p><p>可按如下方法配置后重试即可：<br>a. 填写Source Brokers List<br>填写Kafka Broker所在节点构成的列表（用逗号分隔），如下（本文在所有节点部署了Kafka Broker）：<br>master:9092,slave1:9092,slave2:9092,slave3:9092,slave4:9092</p><p>b. 填写Destination Brokers List<br>若添加了Kafka MirrorMaker，则可填写其所在节点构成的列表；若未添加Kafka MirrorMaker，可填写任意服务器即可，如下：<br>master:9092,slave1:9092,slave2:9092,slave3:9092,slave4:9092<br>或：<br>example.com:9092</p><p>c. 修改Java Heap Size<br>填写上面列表后，点击继续，出错后，Kafka服务未启动。返回集群配置，打卡Kafka服务配置页，查找“Java Heap Size of Broker”项，将对大小从50MB修改为256MB。<br>d. 配置Topic Whitelist<br>配置Topic Whitelist项为正则表达式：(?!x)x，保存更改。然后添加角色实例，重新配置即可。<br>参考链接：adding a Kafka service failed</p><h2 id="3-CDH5安装常见问题"><a href="#3-CDH5安装常见问题" class="headerlink" title="3.CDH5安装常见问题"></a>3.CDH5安装常见问题</h2><h3 id="1-主机检查警告"><a href="#1-主机检查警告" class="headerlink" title="1. 主机检查警告"></a>1. 主机检查警告</h3><p><img src="http://images2015.cnblogs.com/blog/1150091/201704/1150091-20170425193926303-554555577.png" alt="此处输入图片的描述"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">第一个警告：</span><br><span class="line"></span><br><span class="line"> Cloudera 建议将 /proc/sys/vm/swappiness 设置为 10。当前设置为 60。使用 sysctl 命令在运行时更改该设置并编辑 /etc/sysctl.conf 以在重启后保存该设置。 </span><br><span class="line"></span><br><span class="line"> echo 10 &gt; /proc/sys/vm/swappiness</span><br><span class="line"></span><br><span class="line">这样操作重启机器还是还原，要永久改变</span><br><span class="line"></span><br><span class="line">vim   /etc/sysctl.conf</span><br><span class="line">vm.swappiness=10</span><br><span class="line"> </span><br><span class="line"> 第二个警告，提示执行命令：</span><br><span class="line"></span><br><span class="line"> echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line"></span><br><span class="line"> echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"></span><br><span class="line">执行完毕，重启后，警告依然，暂时不处理</span><br></pre></td></tr></table></figure></p><h3 id="2-mysql数据库生成报错"><a href="#2-mysql数据库生成报错" class="headerlink" title="2.mysql数据库生成报错"></a>2.mysql数据库生成报错</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.主要是系统的java环境中没有连接数据库的包，因此需要手动把包拷贝到系统目录</span></span><br><span class="line">$ sudo cp mysql-connector-*.jar /usr/share/java/mysql-connector-java.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.设置mysql远程登录和访问权限问题</span></span><br><span class="line">mysql&gt;grant all privileges on . to ‘root’@’%’ identified by ‘youpassword’ with grant option;</span><br><span class="line">mysql&gt;flush privileges;</span><br><span class="line">$ sudo vi /etc/mysql/my.conf</span><br><span class="line">comment <span class="built_in">bind</span>-address = 127.0.0.1</span><br><span class="line">$ sudo service mysql restart</span><br></pre></td></tr></table></figure><h3 id="3-kafka安装问题"><a href="#3-kafka安装问题" class="headerlink" title="3.kafka安装问题"></a>3.kafka安装问题</h3><p>参考官方教程，分配Kafka parcel包，第一次安装会遇到问题，解决方案如下：<br><a href="http://www.aboutyun.com/thread-19903-1-1.html" target="_blank" rel="noopener">http://www.aboutyun.com/thread-19903-1-1.html</a></p><h3 id="4-参考链接"><a href="#4-参考链接" class="headerlink" title="4.参考链接"></a>4.参考链接</h3><p><a href="http://www.cnblogs.com/codedevelop/p/6762555.html" target="_blank" rel="noopener">http://www.cnblogs.com/codedevelop/p/6762555.html</a></p><h3 id="5-agent启动报错"><a href="#5-agent启动报错" class="headerlink" title="5.agent启动报错"></a>5.agent启动报错</h3><p>ProtocolError: &lt;ProtocolError for 127.0.0.1/RPC2: 401 Unauthorized&gt;<br>resolution:<br>Steps to find and kill the process:<br>1) Find the port which is used by supervisor: </p><blockquote><p>ps aux |grep supervisor<br>2) kill the port<br>sudo kill -9 <port number=""> </port></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-准备工作&quot;&gt;&lt;a href=&quot;#1-准备工作&quot; class=&quot;headerlink&quot; title=&quot;1.准备工作&quot;&gt;&lt;/a&gt;1.准备工作&lt;/h2&gt;&lt;h3 id=&quot;1-安装Oracel-JDK（所有节点）&quot;&gt;&lt;a href=&quot;#1-安装Oracel-JDK（所有
      
    
    </summary>
    
      <category term="解决方案" scheme="http://xraorao.top/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="cloudera" scheme="http://xraorao.top/tags/cloudera/"/>
    
  </entry>
  
  <entry>
    <title>jenkins使用</title>
    <link href="http://xraorao.top/2018/06/12/jenkins%E4%BD%BF%E7%94%A8/"/>
    <id>http://xraorao.top/2018/06/12/jenkins使用/</id>
    <published>2018-06-12T06:18:19.000Z</published>
    <updated>2018-06-20T02:20:31.082Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://jenkins.io/doc/book/getting-started/" target="_blank" rel="noopener">jenkins</a> 是一个自动化集成工具，可以实现对程序员完全透明化，只需要专注于自己的业务代码即可</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>准备工作：<br>硬件条件：256 MB of RAM + 1 GB of drive space<br>软件条件：JRE 8 docker</p><h2 id="docker-方式安装"><a href="#docker-方式安装" class="headerlink" title="docker 方式安装"></a>docker 方式安装</h2><ol><li><p><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">install docker</a></p></li><li><p>安装jenkins</p></li></ol><blockquote><p>启动 docker container<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \ </span><br><span class="line">  -u root \ </span><br><span class="line">  --rm \  </span><br><span class="line">  -d \ </span><br><span class="line">  -p 8080:8080 \ </span><br><span class="line">  -p 50000:50000 \ </span><br><span class="line">  -v jenkins-data:/var/jenkins_home \ </span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \ </span><br><span class="line">  jenkinsci/blueocean</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><a href="http://mirrors.jenkins.io/war-stable/latest/jenkins.war" target="_blank" rel="noopener">download war file</a></p></blockquote><pre><code>java -jar jenkins.warbrows http://localhost:8080  and wait until the Unlock Jenkins page appears.</code></pre><h2 id="apt-方式安装"><a href="#apt-方式安装" class="headerlink" title="apt 方式安装"></a>apt 方式安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -</span><br><span class="line">sudo sh -c <span class="string">'echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list'</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install jenkins</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>jenkins 本身是一个持续集成部署的工具，可以和很多工具平台联动。</p><h2 id="credentials"><a href="#credentials" class="headerlink" title="credentials"></a>credentials</h2><p>credentials 主要是用来存储一些用户密码、token 这些敏感信息</p><p>配置：</p><p>Credentials &gt; Create permission <a href="https://jenkins.io/doc/book/using/using-credentials/#credential-security" target="_blank" rel="noopener">detail…</a></p><h2 id="pipeline（流水线）"><a href="#pipeline（流水线）" class="headerlink" title="pipeline（流水线）"></a>pipeline（流水线）</h2><p>环境配置：</p><ul><li>jenkins version &gt;= 2.x </li><li>pipeline plugin in jenkins</li></ul><p>定义一个流水线：通过编写Jenkinsfile 来完成流水线作业。 Jenkinsfile 采用 <a href="http://groovy-lang.org/semantics.html" target="_blank" rel="noopener">groovy</a> 语法</p><p>jenkins 支持两种类型的流水线： 一种是 Declarative Pipeline, 另一种是 scripted pipeline, 个人推荐使用第二种，简洁</p><p>使用例子：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># declarative pipeline</span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    environment &#123; </span><br><span class="line">        CC = <span class="string">'clang'</span></span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">'Build'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">'Building..'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">'Test'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">'Testing..'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">'Deploy'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">'Deploying....'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># scripted pipeline</span><br><span class="line"></span><br><span class="line">node &#123;</span><br><span class="line"></span><br><span class="line">    withEnv([<span class="string">'CC=lang'</span>]) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Build'</span>) &#123;</span><br><span class="line">        echo <span class="string">'Building....'</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Test'</span>) &#123;</span><br><span class="line">        echo <span class="string">'Building....'</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Deploy'</span>) &#123;</span><br><span class="line">        echo <span class="string">'Deploying....'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>agent/node:  instructs Jenkins to allocate an executor (on any available agent/node in the Jenkins environment) and workspace for the entire Pipeline.</p><p>环境变量：<br><a href="http://localhost:8080/pipeline-syntax/globals#env" target="_blank" rel="noopener">http://localhost:8080/pipeline-syntax/globals#env</a></p><p>常用的环境变量：<br>BUILD_ID<br>JOB_NAME<br>JENKINS_URL  </p><h3 id="pipeline-generateor"><a href="#pipeline-generateor" class="headerlink" title="pipeline generateor"></a>pipeline generateor</h3><p>click <a href="http://localhost:8080/pipeline-syntax/" target="_blank" rel="noopener">http://localhost:8080/pipeline-syntax/</a></p><p>可以看到很多帮助文档，其中Snippet Generator 用来生成scripted pipeline, Declarative Directive Generator 生成 declarative pipeline</p><h3 id="handle-credentials"><a href="#handle-credentials" class="headerlink" title="handle credentials"></a>handle credentials</h3><p>通过环境变量注入的方式, 前提是已经做好了credentials, 这里只是提供了一个读取的方法</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># secret text</span><br><span class="line">environment &#123;</span><br><span class="line">    AWS_ACCESS_KEY_ID     = credentials(<span class="string">'jenkins-aws-secret-key-id'</span>)</span><br><span class="line">    AWS_SECRET_ACCESS_KEY = credentials(<span class="string">'jenkins-aws-secret-access-key'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># username and password</span><br><span class="line">environment &#123;</span><br><span class="line">    BITBUCKET_COMMON_CREDS = credentials(<span class="string">'jenkins-bitbucket-common-creds'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">## actually environment variables</span><br><span class="line">BITBUCKET_COMMON_CREDS - contains a username and a password separated by a colon <span class="keyword">in</span> the format <span class="string">username:</span>password.</span><br><span class="line">BITBUCKET_COMMON_CREDS_USR - an additional variable containing the username component only.</span><br><span class="line">BITBUCKET_COMMON_CREDS_PSW - an additional variable containing the password component only.</span><br></pre></td></tr></table></figure><p>其他的证书获取的方法可以参考 generator</p><h3 id="handle-parameters"><a href="#handle-parameters" class="headerlink" title="handle parameters"></a>handle parameters</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    parameters &#123;</span><br><span class="line">        string(<span class="string">name:</span> <span class="string">'Greeting'</span>, <span class="string">defaultValue:</span> <span class="string">'Hello'</span>, <span class="string">description:</span> <span class="string">'How should I greet the world?'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">'Example'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">"$&#123;params.Greeting&#125; World!"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># scripted pipeline</span><br><span class="line">properties([parameters([string(<span class="string">defaultValue:</span> <span class="string">'Hello'</span>, <span class="string">description:</span> <span class="string">'How should I greet the world?'</span>, <span class="string">name:</span> <span class="string">'Greeting'</span>)])])</span><br><span class="line"></span><br><span class="line">node &#123;</span><br><span class="line">    echo <span class="string">"$&#123;params.Greeting&#125; World!"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="handle-failure"><a href="#handle-failure" class="headerlink" title="handle failure"></a>handle failure</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">'Test'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">'make check'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        always &#123;</span><br><span class="line">            junit <span class="string">'**/target/*.xml'</span></span><br><span class="line">        &#125;</span><br><span class="line">        failure &#123;</span><br><span class="line">            mail <span class="string">to:</span> team<span class="meta">@example</span>.com, <span class="string">subject:</span> <span class="string">'The Pipeline failed :('</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># scripted pipeline</span><br><span class="line">node &#123;</span><br><span class="line">    <span class="comment">/* .. snip .. */</span></span><br><span class="line">    stage(<span class="string">'Test'</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sh <span class="string">'make check'</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">            mail <span class="string">to:</span> team<span class="meta">@example</span>.com, <span class="string">subject:</span> <span class="string">'The Pipeline failed :('</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            junit <span class="string">'**/target/*.xml'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* .. snip .. */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多个-angent-node-运行"><a href="#多个-angent-node-运行" class="headerlink" title="多个 angent/node 运行"></a>多个 angent/node 运行</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent none</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">'Build'</span>) &#123;</span><br><span class="line">            agent any</span><br><span class="line">            steps &#123;</span><br><span class="line">                checkout scm</span><br><span class="line">                sh <span class="string">'make'</span></span><br><span class="line">                stash <span class="string">includes:</span> <span class="string">'**/target/*.jar'</span>, <span class="string">name:</span> <span class="string">'app'</span> </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">'Test on Linux'</span>) &#123;</span><br><span class="line">            agent &#123; </span><br><span class="line">                label <span class="string">'linux'</span></span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                unstash <span class="string">'app'</span> </span><br><span class="line">                sh <span class="string">'make check'</span></span><br><span class="line">            &#125;</span><br><span class="line">            post &#123;</span><br><span class="line">                always &#123;</span><br><span class="line">                    junit <span class="string">'**/target/*.xml'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">'Test on Windows'</span>) &#123;</span><br><span class="line">            agent &#123;</span><br><span class="line">                label <span class="string">'windows'</span></span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                unstash <span class="string">'app'</span></span><br><span class="line">                bat <span class="string">'make check'</span> </span><br><span class="line">            &#125;</span><br><span class="line">            post &#123;</span><br><span class="line">                always &#123;</span><br><span class="line">                    junit <span class="string">'**/target/*.xml'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># scripted pipeline</span><br><span class="line">stage(<span class="string">'Build'</span>) &#123;</span><br><span class="line">    node &#123;</span><br><span class="line">        checkout scm</span><br><span class="line">        sh <span class="string">'make'</span></span><br><span class="line">        stash <span class="string">includes:</span> <span class="string">'**/target/*.jar'</span>, <span class="string">name:</span> <span class="string">'app'</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stage(<span class="string">'Test'</span>) &#123;</span><br><span class="line">    node(<span class="string">'linux'</span>) &#123; </span><br><span class="line">        checkout scm</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            unstash <span class="string">'app'</span> </span><br><span class="line">            sh <span class="string">'make check'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            junit <span class="string">'**/target/*.xml'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    node(<span class="string">'windows'</span>) &#123;</span><br><span class="line">        checkout scm</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            unstash <span class="string">'app'</span></span><br><span class="line">            bat <span class="string">'make check'</span> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            junit <span class="string">'**/target/*.xml'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>stash： 捕获对应的文件，让流水线的其他angent 一起使用</p><p>label: jenkins lable expression</p><h2 id="mutibranch-pipeline"><a href="#mutibranch-pipeline" class="headerlink" title="mutibranch pipeline"></a>mutibranch pipeline</h2><p>多分支的scm 流水线 <a href="https://jenkins.io/doc/book/pipeline/multibranch/" target="_blank" rel="noopener">detail</a></p><h2 id="docker-pipeline"><a href="#docker-pipeline" class="headerlink" title="docker pipeline"></a>docker pipeline</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        docker &#123; image <span class="string">'node:7-alpine'</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">'Test'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">'node --version'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># scripted pipeline</span><br><span class="line">node &#123;</span><br><span class="line">    <span class="comment">/* Requires the Docker Pipeline plugin to be installed */</span></span><br><span class="line">    docker.image(<span class="string">'node:7-alpine'</span>).inside &#123;</span><br><span class="line">        stage(<span class="string">'Test'</span>) &#123;</span><br><span class="line">            sh <span class="string">'node --version'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缓存-docker-container-数据"><a href="#缓存-docker-container-数据" class="headerlink" title="缓存 docker container 数据"></a>缓存 docker container 数据</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        docker &#123;</span><br><span class="line">            image <span class="string">'maven:3-alpine'</span></span><br><span class="line">            args <span class="string">'-v $HOME/.m2:/root/.m2'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">'Build'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">'mvn -B'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># scripted pipeline</span><br><span class="line">node &#123;</span><br><span class="line">    <span class="comment">/* Requires the Docker Pipeline plugin to be installed */</span></span><br><span class="line">    docker.image(<span class="string">'maven:3-alpine'</span>).inside(<span class="string">'-v $HOME/.m2:/root/.m2'</span>) &#123;</span><br><span class="line">        stage(<span class="string">'Build'</span>) &#123;</span><br><span class="line">            sh <span class="string">'mvn -B'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用多容器"><a href="#使用多容器" class="headerlink" title="使用多容器"></a>使用多容器</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent none</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">'Back-end'</span>) &#123;</span><br><span class="line">            agent &#123;</span><br><span class="line">                docker &#123; image <span class="string">'maven:3-alpine'</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">'mvn --version'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">'Front-end'</span>) &#123;</span><br><span class="line">            agent &#123;</span><br><span class="line">                docker &#123; image <span class="string">'node:7-alpine'</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">'node --version'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># scripted pipeline</span><br><span class="line">node &#123;</span><br><span class="line">    <span class="comment">/* Requires the Docker Pipeline plugin to be installed */</span></span><br><span class="line"></span><br><span class="line">    stage(<span class="string">'Back-end'</span>) &#123;</span><br><span class="line">        docker.image(<span class="string">'maven:3-alpine'</span>).inside &#123;</span><br><span class="line">            sh <span class="string">'mvn --version'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stage(<span class="string">'Front-end'</span>) &#123;</span><br><span class="line">        docker.image(<span class="string">'node:7-alpine'</span>).inside &#123;</span><br><span class="line">            sh <span class="string">'node --version'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Dockerfile"><a href="#使用-Dockerfile" class="headerlink" title="使用 Dockerfile"></a>使用 Dockerfile</h3><p>Jenkins 支持从 scm 的 Dockerfile 来构建镜像并运行，而不是从镜像仓库里面拉取</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">7</span>-alpine</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add -U subversion</span></span><br></pre></td></tr></table></figure><p>Jenkinsfile<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123; dockerfile <span class="literal">true</span> &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">'Test'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">'node --version'</span></span><br><span class="line">                sh <span class="string">'svn --version'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="sidecar-解决docker-服务依赖问题"><a href="#sidecar-解决docker-服务依赖问题" class="headerlink" title="sidecar(解决docker 服务依赖问题)"></a>sidecar(解决docker 服务依赖问题)</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    checkout scm</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * In order to communicate with the MySQL server, this Pipeline explicitly</span></span><br><span class="line"><span class="comment">     * maps the port (`3306`) to a known port on the host machine.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    docker.image(<span class="string">'mysql:5'</span>).withRun(<span class="string">'-e "MYSQL_ROOT_PASSWORD=my-secret-pw" -p 3306:3306'</span>) &#123; c -&gt;</span><br><span class="line">        <span class="comment">/* Wait until mysql service is up */</span></span><br><span class="line">        sh <span class="string">'while ! mysqladmin ping -h0.0.0.0 --silent; do sleep 1; done'</span></span><br><span class="line">        <span class="comment">/* Run some tests which require MySQL */</span></span><br><span class="line">        sh <span class="string">'make check'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 docker link 来链接mysql 服务, cenos 提供了一个程序执行环境</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    checkout scm</span><br><span class="line">    docker.image(<span class="string">'mysql:5'</span>).withRun(<span class="string">'-e "MYSQL_ROOT_PASSWORD=my-secret-pw"'</span>) &#123; c -&gt;</span><br><span class="line">        docker.image(<span class="string">'mysql:5'</span>).inside(<span class="string">"--link $&#123;c.id&#125;:db"</span>) &#123;</span><br><span class="line">            <span class="comment">/* Wait until mysql service is up */</span></span><br><span class="line">            sh <span class="string">'while ! mysqladmin ping -hdb --silent; do sleep 1; done'</span></span><br><span class="line">        &#125;</span><br><span class="line">        docker.image(<span class="string">'centos:7'</span>).inside(<span class="string">"--link $&#123;c.id&#125;:db"</span>) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Run some tests which require MySQL, and assume that it is</span></span><br><span class="line"><span class="comment">             * available on the host name `db`</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            sh <span class="string">'make check'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建新的镜像"><a href="#构建新的镜像" class="headerlink" title="构建新的镜像"></a>构建新的镜像</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    checkout scm</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> customImage = docker.build(<span class="string">"my-image:$&#123;env.BUILD_ID&#125;"</span>)</span><br><span class="line"></span><br><span class="line">    customImage.inside &#123;</span><br><span class="line">        sh <span class="string">'make test'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 如何push</span><br><span class="line"></span><br><span class="line">node &#123;</span><br><span class="line">    checkout scm</span><br><span class="line">    <span class="keyword">def</span> customImage = docker.build(<span class="string">"my-image:$&#123;env.BUILD_ID&#125;"</span>)</span><br><span class="line">    customImage.push()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 如何打tag</span><br><span class="line"></span><br><span class="line">node &#123;</span><br><span class="line">    checkout scm</span><br><span class="line">    <span class="keyword">def</span> customImage = docker.build(<span class="string">"my-image:$&#123;env.BUILD_ID&#125;"</span>)</span><br><span class="line">    customImage.push()</span><br><span class="line"></span><br><span class="line">    customImage.push(<span class="string">'latest'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 自定义dockerfile, 添加 build 函数参数</span><br><span class="line"></span><br><span class="line">node &#123;</span><br><span class="line">    checkout scm</span><br><span class="line">    <span class="comment">// Builds test-image from the Dockerfile found at ./dockerfiles/test/Dockerfile.</span></span><br><span class="line">    <span class="keyword">def</span> testImage = docker.build(<span class="string">"test-image"</span>, <span class="string">"./dockerfiles/test"</span>) </span><br><span class="line"></span><br><span class="line">    testImage.inside &#123;</span><br><span class="line">        sh <span class="string">'make test'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node &#123;</span><br><span class="line">    <span class="comment">//Builds my-image:$&#123;env.BUILD_ID&#125; from the Dockerfile found at ./dockerfiles/Dockerfile.test</span></span><br><span class="line">    checkout scm</span><br><span class="line">    <span class="keyword">def</span> dockerfile = <span class="string">'Dockerfile.test'</span></span><br><span class="line">    <span class="keyword">def</span> customImage = docker.build(<span class="string">"my-image:$&#123;env.BUILD_ID&#125;"</span>, <span class="string">"-f $&#123;dockerfile&#125; ./dockerfiles"</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义-registry"><a href="#自定义-registry" class="headerlink" title="自定义 registry"></a>自定义 registry</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    checkout scm</span><br><span class="line">    docker.withRegistry(<span class="string">'https://registry.example.com'</span>) &#123;</span><br><span class="line">        docker.image(<span class="string">'my-custom-image'</span>).inside &#123;</span><br><span class="line">            sh <span class="string">'make test'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># authentication</span><br><span class="line"></span><br><span class="line">node &#123;</span><br><span class="line">    checkout scm</span><br><span class="line">    <span class="comment">//add a "Username/Password" Credentials item from the Jenkins home page</span></span><br><span class="line">    docker.withRegistry(<span class="string">'https://registry.example.com'</span>, <span class="string">'credentials-id'</span>) &#123;</span><br><span class="line">        <span class="keyword">def</span> customImage = docker.build(<span class="string">"my-image:$&#123;env.BUILD_ID&#125;"</span>)</span><br><span class="line">        <span class="comment">/* Push the container to the custom Registry */</span></span><br><span class="line">        customImage.push()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="共享库"><a href="#共享库" class="headerlink" title="共享库"></a>共享库</h3><p><a href="https://jenkins.io/doc/book/pipeline/shared-libraries/" target="_blank" rel="noopener">Extending with Shared Libraries</a></p><h3 id="pipeline-语法"><a href="#pipeline-语法" class="headerlink" title="pipeline 语法"></a>pipeline 语法</h3><p>1 Declarative Pipelines</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pipeline &#123;</span><br><span class="line">    <span class="comment">/* insert Declarative Pipeline here */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://jenkins.io/doc/book/pipeline/syntax/" target="_blank" rel="noopener">detail</a></p><h2 id="blueocean"><a href="#blueocean" class="headerlink" title="blueocean"></a>blueocean</h2><p>一款新的UI，<a href="https://jenkins.io/doc/book/blueocean" target="_blank" rel="noopener">detail</a></p><h1 id="jenkins-in-k8s"><a href="#jenkins-in-k8s" class="headerlink" title="jenkins in k8s"></a>jenkins in k8s</h1><p>Jenkins Server和slave节点直接有几种连接方式：ssh连接和jnlp连接。Kubernetes plugin插件用的是jnlp方式。这种方式是通过运行slave.jar，指定Jenkins Server的url参数和secret token参数，来建立连接。</p><p>docker 运行jenkins slave (ssh 模式)<br>这种模式docker 运行一个slave 容器跟普通物理机使用完全一致，这里不做说明。</p><p>同样可以再在同一个slave节点（docker 容器）上绑定很多个工程或者任务。</p><p>docker 运行jenkins slave (jnlp 模式)<br>Jnlp 模式的则相对应用的比较少，jnlp 是由jenkins slave节点（物理节点，虚机或者容器均可）发起连接的，<br>他 会根据配置的jenkins master的url , Jenkins连接的token和jenkins slave name( lable)来进行进行连接。</p><h1 id="jenkins-k8s-plugins的使用"><a href="#jenkins-k8s-plugins的使用" class="headerlink" title="jenkins k8s plugins的使用"></a>jenkins k8s plugins的使用</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>安装 kubernetes plugins ，进入jenkins 系统设置，如下图所示</p><p><div align="center"> <img src="/images/jenkins/jenkins-kube-plugin.jpg" width=""> </div><br></p><p><strong>注意事项：</strong> 在使用自定义的镜像的时候，因为/home/jenkins 目录被挂载到了NFS上面，因此在镜像中保留的文件全部被清空掉，kube/config文件需要通过NFS才能挂载</p><p>参考资料:</p><ul><li><a href="https://blog.csdn.net/felix_yujing/article/details/78725142" target="_blank" rel="noopener">Jenkins On Kubernetes—Jenkins上Kubernetes Plugin的使用</a>  </li><li><a href="https://blog.csdn.net/aixiaoyang168/article/details/79767649" target="_blank" rel="noopener">初试 Jenkins 使用 Kubernetes Plugin 完成持续构建与发布</a>  </li><li><a href="https://yq.aliyun.com/articles/180888" target="_blank" rel="noopener">Kubernetes集群上基于Jenkins的CI/CD流程实践</a>  </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://jenkins.io/doc/book/getting-started/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jenkins&lt;/a&gt; 是一个自动化集成工具，可以实现对程序员完全透明化，只需要专注于自己的业务代码即
      
    
    </summary>
    
      <category term="k8s" scheme="http://xraorao.top/categories/k8s/"/>
    
    
      <category term="jenkins" scheme="http://xraorao.top/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>k8s学习-1--常用命令</title>
    <link href="http://xraorao.top/2018/04/27/k8s%E5%AD%A6%E4%B9%A0-1/"/>
    <id>http://xraorao.top/2018/04/27/k8s学习-1/</id>
    <published>2018-04-27T09:30:43.000Z</published>
    <updated>2018-06-11T02:06:41.808Z</updated>
    
    <content type="html"><![CDATA[<p>k8s 采用声明式的 API , 因此许多命令可以组合使用</p><h1 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h1><p>查看资源</p><pre><code>kubectl get \&lt;resource type\&gt; | all  [-n namespace] [-o wide]</code></pre><p>查看集群</p><pre><code>kubectl cluster-info</code></pre><p>查看各组件的状态</p><pre><code>kubectl -s http://masterip:8080 get componentstatuses </code></pre><h1 id="详细信息"><a href="#详细信息" class="headerlink" title="详细信息"></a>详细信息</h1><p>查看资源的详细信息，类似docker inspect</p><pre><code>kubectl describe \&lt;resource type\&gt;</code></pre><h1 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h1><p>创建k8s资源</p><pre><code>kubectl create -f filename</code></pre><p>filename 为定义资源的yaml文件。也可以直接只用子命令 [run/namespace/secret/configmap/serviceaccount] 等直接创建相应的resource。从追踪和维护的角度出发，建议使用json或yaml的方式定义资源。</p><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><p>更新资源有以下几种方式：</p><p>1.replace</p><pre><code>kubectl replace -f filename</code></pre><p>replace命令用于对已有资源进行更新、替换。当我们需要更新resource的一些属性的时候，如果修改副本数量，增加、修改label，更改image版本，修改端口等。都可以直接修改原yaml文件，然后执行replace命令。</p><p><strong>注意名字不可以被更新</strong></p><p>2.patch</p><p>对一个已经在运行的pod进行更新操作，不会删除容器</p><p>3.edit</p><p>交互式编辑资源文件并更新</p><p>4.apply</p><p>比 pathch 和 edit 更加严格的更新操作，保留更新历史版本库</p><p>5.rolling-update</p><p>不中断更新，先产生新的 pod, 更新完成后再生成再删除旧的 pod, 直到替换掉所有的pod</p><p>6.scale</p><p>资源的扩容或缩容</p><p>7.autoscale</p><p>自动根据系统资源的情况进行扩容或缩容</p><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><pre><code>kubectl delete &lt;resource type&gt;</code></pre><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><pre><code>kubectl logs</code></pre><h1 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h1><pre><code>kubectl attach kubectl exec [-c container-name]</code></pre><h1 id="节点管理"><a href="#节点管理" class="headerlink" title="节点管理"></a>节点管理</h1><pre><code>kubectl get nodes //查看所有节点</code></pre><p>节点维护：cordon, drain, uncordon</p><ul><li>cordon: 标记节点为SchedulingDisable, 禁止新的资源被调度到该节点</li><li>drain: 将要维护的节点的pod赶到其他的节点</li><li>uncordon: 恢复维护节点到正常的工作状态</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;k8s 采用声明式的 API , 因此许多命令可以组合使用&lt;/p&gt;
&lt;h1 id=&quot;查看&quot;&gt;&lt;a href=&quot;#查看&quot; class=&quot;headerlink&quot; title=&quot;查看&quot;&gt;&lt;/a&gt;查看&lt;/h1&gt;&lt;p&gt;查看资源&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl get \
      
    
    </summary>
    
      <category term="k8s" scheme="http://xraorao.top/categories/k8s/"/>
    
    
      <category term="k8s" scheme="http://xraorao.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>大数据平台维护笔记</title>
    <link href="http://xraorao.top/2017/06/09/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E7%BB%B4%E6%8A%A4%E7%AC%94%E8%AE%B0/"/>
    <id>http://xraorao.top/2017/06/09/大数据平台维护笔记/</id>
    <published>2017-06-09T04:47:59.000Z</published>
    <updated>2018-06-08T09:10:07.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-hdfs文件迁移方法："><a href="#1-hdfs文件迁移方法：" class="headerlink" title="1.hdfs文件迁移方法："></a>1.hdfs文件迁移方法：</h2><p>参考链接：<br><a href="http://blog.csdn.net/bigkeen/article/details/51034902" target="_blank" rel="noopener">http://blog.csdn.net/bigkeen/article/details/51034902</a><br><a href="http://www.cnblogs.com/juncaoit/p/6178747.html" target="_blank" rel="noopener">http://www.cnblogs.com/juncaoit/p/6178747.html</a><br><a href="http://blog.csdn.net/weipanp/article/details/42713149" target="_blank" rel="noopener">http://blog.csdn.net/weipanp/article/details/42713149</a></p><ul><li>可以相互通信的两个集群<br>在老的hadoop集群中开启yarn和hdfs服务，新的集群开启hdfs服务即可<br>执行以下命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop distcp -i hftp://old cluster ip:50070/src directory hdfs://192.168.91.130:8020/new cluster directory</span><br></pre></td></tr></table></figure><ul><li>删除老集群的hdfs文件<br>使用hdfs命令删除文件后执行<br>hadoop dfs -expunge<br>删除对应的DataNode和namenode路径下的文件夹</li></ul><h3 id="2-多次格式化NameNode导致无法启动DataNode的解决方案"><a href="#2-多次格式化NameNode导致无法启动DataNode的解决方案" class="headerlink" title="2.多次格式化NameNode导致无法启动DataNode的解决方案"></a>2.多次格式化NameNode导致无法启动DataNode的解决方案</h3><p><a href="http://www.cnblogs.com/yeahwell/p/5642798.html" target="_blank" rel="noopener">http://www.cnblogs.com/yeahwell/p/5642798.html</a></p><h3 id="3-查看某端口被映射到端口上"><a href="#3-查看某端口被映射到端口上" class="headerlink" title="3.查看某端口被映射到端口上"></a>3.查看某端口被映射到端口上</h3><p>iptables -t nat -L -n  | grep 80<br>iptables -t nat –list   //检查nat列表信息<br>iptables -t nat -D PREROUTING 1    /Nat列表信息删除：序号从1 开始，后边以此+1.</p><p>参考链接：<a href="http://blog.csdn.net/xin_yu_xin/article/details/46416101" target="_blank" rel="noopener">http://blog.csdn.net/xin_yu_xin/article/details/46416101</a></p><h3 id="4-安装mysql"><a href="#4-安装mysql" class="headerlink" title="4.安装mysql"></a>4.安装mysql</h3><p><a href="http://blog.csdn.net/chenpy/article/details/50344085" target="_blank" rel="noopener">http://blog.csdn.net/chenpy/article/details/50344085</a></p><h3 id="5-storm-并行度"><a href="#5-storm-并行度" class="headerlink" title="5.storm 并行度"></a>5.storm 并行度</h3><p>rebalance操作：<a href="http://blog.csdn.net/jmppok/article/details/17243857" target="_blank" rel="noopener">http://blog.csdn.net/jmppok/article/details/17243857</a><br>storm并行度理解：<a href="http://www.cnblogs.com/catkins/p/5254377.html" target="_blank" rel="noopener">http://www.cnblogs.com/catkins/p/5254377.html</a></p><h3 id="6-自定义系统"><a href="#6-自定义系统" class="headerlink" title="6.自定义系统"></a>6.自定义系统</h3><p>定制Ubuntu镜像：<a href="https://www.zybuluo.com/fanisfun/note/802272" target="_blank" rel="noopener">https://www.zybuluo.com/fanisfun/note/802272</a></p><h3 id="7-cloudera-agent-启动报错解决方法"><a href="#7-cloudera-agent-启动报错解决方法" class="headerlink" title="7.cloudera-agent 启动报错解决方法"></a>7.cloudera-agent 启动报错解决方法</h3><p>错误1：ERROR    Failed to connect to previous supervisor.<br>通常是由于之前已经启动了agent残留下来的进程产生的影响，因此需要将之前的进程清除掉<br>执行命令</p><pre><code>kill -9 $(pgrep -f supervisord)然后重启，除了第一次安装要求复制cloudera-agent到系统/etc/init.d/目录下，建议放置到rc.local文件启动吧</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-hdfs文件迁移方法：&quot;&gt;&lt;a href=&quot;#1-hdfs文件迁移方法：&quot; class=&quot;headerlink&quot; title=&quot;1.hdfs文件迁移方法：&quot;&gt;&lt;/a&gt;1.hdfs文件迁移方法：&lt;/h2&gt;&lt;p&gt;参考链接：&lt;br&gt;&lt;a href=&quot;http://b
      
    
    </summary>
    
      <category term="笔记" scheme="http://xraorao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="hadoop" scheme="http://xraorao.top/categories/%E7%AC%94%E8%AE%B0/hadoop/"/>
    
    
      <category term="hadoop" scheme="http://xraorao.top/tags/hadoop/"/>
    
      <category term="大数据" scheme="http://xraorao.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>caffe相关博客</title>
    <link href="http://xraorao.top/2017/06/04/caffe%E7%9B%B8%E5%85%B3%E5%8D%9A%E5%AE%A2/"/>
    <id>http://xraorao.top/2017/06/04/caffe相关博客/</id>
    <published>2017-06-04T01:31:57.000Z</published>
    <updated>2018-06-08T09:10:07.336Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="http://blog.csdn.net/hjimce/article/details/48933813" target="_blank" rel="noopener">深度学习（六）caffe入门学习</a></li><li><a href="http://m.blog.csdn.net/blog/wu010555688/24487301" target="_blank" rel="noopener">Deep Learning模型之：CNN卷积神经网络（一）深度解析CNN - 莫小 - 博客园</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/hjimce/article/details/48933813&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深度学习（六）caffe入门学习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href
      
    
    </summary>
    
      <category term="笔记" scheme="http://xraorao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="caffe" scheme="http://xraorao.top/categories/%E7%AC%94%E8%AE%B0/caffe/"/>
    
    
      <category term="caffe" scheme="http://xraorao.top/tags/caffe/"/>
    
  </entry>
  
  <entry>
    <title>理解Linux系统/etc/init.d目录和/etc/rc.local脚本</title>
    <link href="http://xraorao.top/2017/05/24/%E7%90%86%E8%A7%A3Linux%E7%B3%BB%E7%BB%9F-etc-init-d%E7%9B%AE%E5%BD%95%E5%92%8C-etc-rc-local%E8%84%9A%E6%9C%AC/"/>
    <id>http://xraorao.top/2017/05/24/理解Linux系统-etc-init-d目录和-etc-rc-local脚本/</id>
    <published>2017-05-24T01:56:35.000Z</published>
    <updated>2018-06-08T09:10:07.353Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、关于-etc-init-d"><a href="#一、关于-etc-init-d" class="headerlink" title="一、关于/etc/init.d"></a>一、关于/etc/init.d</h2><p>如果你使用过Linux系统，那么你一定听说过init.d目录。这个目录到底是干嘛的呢？它归根结底只做了一件事情，但这件事情非同小可，是为整个系统做的，因此它非常重要。init.d目录包含许多系统各种服务的启动和停止脚本。它控制着所有从acpid到x11-common的各种事务。当然，init.d远远没有这么简单。（译者注：acpid 是linux操作系统新型电源管理标准 ；X11也叫做X Window系统，X Window系统 (X11或X)是一种位图显示的 视窗系统 。它是在 Unix 和 类Unix 操作系统 ，以及 OpenVMS 上建立图形用户界面 的标准工具包和协议，并可用于几乎已有的现代操作系统）。</p><p>当你查看/etc目录时，你会发现许多rc#.d 形式存在的目录（这里#代表一个指定的初始化级别，范围是0~6）。在这些目录之下，包含了许多对进程进行控制的脚本。这些脚本要么以”K”开头，要么以”S”开头。以K开头的脚本运行在以S开头的脚本之前。这些脚本放置的地方，将决定这些脚本什么时候开始运行。在这些目录之间，系统服务一起合作，就像运行状况良好的机器一样。然而，有时候你希望能在不使用kill 或killall 命令的情况下，能干净的启动或杀死一个进程。这就是/etc/init.d能够派上用场的地方了！</p><p>如果你在使用Fedora系统，你可以找到这个目录：/etc/rc.d/init.d。实际上无论init.d放在什么地方，它都发挥着相同的作用。</p><p>为了能够使用init.d目录下的脚本，你需要有root权限或sudo权限。每个脚本都将被作为一个命令运行，该命令的结构大致如下所示：</p><p>/etc/init.d/command 选项<br>comand是实际运行的命令，选项可以有如下几种：</p><ul><li>start</li><li>stop</li><li>reload</li><li>restart</li><li>force-reload</li></ul><p>大多数的情况下，你会使用start,stop,restart选项。例如，如果你想关闭网络，你可以使用如下形式的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> /etc/init.d/networking stop</span><br><span class="line">又比如，你改变了网络设置，并且需要重启网络。你可以使用如下命令：</span><br><span class="line">/etc/init.d/networking restart</span><br><span class="line">init.d目录下常用初始化脚本有：</span><br><span class="line"></span><br><span class="line">networking</span><br><span class="line">samba</span><br><span class="line">apache2</span><br><span class="line">ftpd</span><br><span class="line">sshd</span><br><span class="line">dovecot</span><br><span class="line">mysql</span><br></pre></td></tr></table></figure></p><p>当然，你可能有其他更多常用的脚本，这个取决于你安装了什么linux操作系统。</p><h2 id="二、关于-etc-rc-local"><a href="#二、关于-etc-rc-local" class="headerlink" title="二、关于/etc/rc.local"></a>二、关于/etc/rc.local</h2><p>rc.local也是我经常使用的一个脚本。该脚本是在系统初始化级别脚本运行之后再执行的，因此可以安全地在里面添加你想在系统启动之后执行的脚本。常见的情况是你可以再里面添加nfs挂载/mount脚本。此外，你也可以在里面添加一些调试用的脚本命令。例如，我就碰到过这种情况：samba服务总是无法正常运行，而检查发现，samba是在系统启动过程中就该启动执行的，也就是说，samba守护程序配置保证了这种功能本应该正确执行。碰到这种类似情况，一般我也懒得花大量时间去查为什么，我只需要简单的在/etc/rc.local脚本里加上这么一行：</p><pre><code>/etc/init.d/samba start</code></pre><p>这样就成功的解决了samba服务异常的问题。</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>Linux是灵活的。正因为它的灵活性，我们总是可以找到许多不同的办法来解决同一个问题。启动系统服务的例子就是一个很好的佐证。有了/etc/init.d目录下的脚本，再加上/etc/rc.local这个利器，你可以放心的确保你的服务可以完美的启动和运行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、关于-etc-init-d&quot;&gt;&lt;a href=&quot;#一、关于-etc-init-d&quot; class=&quot;headerlink&quot; title=&quot;一、关于/etc/init.d&quot;&gt;&lt;/a&gt;一、关于/etc/init.d&lt;/h2&gt;&lt;p&gt;如果你使用过Linux系统，那么你一
      
    
    </summary>
    
      <category term="IT" scheme="http://xraorao.top/categories/IT/"/>
    
      <category term="linux" scheme="http://xraorao.top/categories/IT/linux/"/>
    
    
      <category term="linux" scheme="http://xraorao.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu系统操作命令笔记（持续更新...）</title>
    <link href="http://xraorao.top/2017/05/24/%E5%8E%9F-Ubuntu%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0-%EF%BC%89/"/>
    <id>http://xraorao.top/2017/05/24/原-Ubuntu系统操作命令笔记（持续更新-）/</id>
    <published>2017-05-24T01:14:21.000Z</published>
    <updated>2018-06-08T09:10:07.348Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、修改用户密码"><a href="#1、修改用户密码" class="headerlink" title="1、修改用户密码"></a>1、修改用户密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd  =&gt;&gt;输入new-root-password</span><br></pre></td></tr></table></figure><h3 id="2、切换用户"><a href="#2、切换用户" class="headerlink" title="2、切换用户"></a>2、切换用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su username  =&gt;&gt;输入待切换用户的密码</span><br></pre></td></tr></table></figure><h3 id="3、提升权限"><a href="#3、提升权限" class="headerlink" title="3、提升权限"></a>3、提升权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su root (临时提升权限)</span><br><span class="line">sudo gedit /etc/passwd (永久提升权限)</span><br></pre></td></tr></table></figure><h3 id="4、设置环境变量"><a href="#4、设置环境变量" class="headerlink" title="4、设置环境变量"></a>4、设置环境变量</h3><ul><li>为单个用户设置（～/.bashrc）</li><li>全局设置（/etc/profile）</li><li>/etc/bashrc. 该文件是为每一个运行的shell用户执行操作，当bashshell被打开是，文件被读取</li><li>～/bash_profile: 每个用户可以使用该文件输入专用于自己的shell信息</li><li>/etc/environment: 在登录的时候操作系统使用的的第二个文件，系统在读取你的profile之前，设置文件的环境变量</li></ul><h3 id="5、ssh使用"><a href="#5、ssh使用" class="headerlink" title="5、ssh使用"></a>5、ssh使用</h3><p>1.登录远程主机<br>ssh username@host [-p port]  =&gt;input your host password<br>equals (ssh -l username host)<br>2.文件传输<br>scp username@serverhost:/serverfile /save path (download from server)<br>scp /local file username@serverhost:/server save path(upload to server)<br>从服务器下载或者上传整个目录<br>scp -r username@serverhost:/remote directory /local directory<br>scp -r /local directory username@serverhost:/remote directory<br>3.开启无密码ssh登录<br>client A; server B</p><ul><li>A: ssh-keygen -t rsa (三次回车，在～/.ssh目录下生成id_ras，id_rsa.pub两个文件，分别是私钥和公钥)</li><li>A: cat ~/.ssh/id_ras.pub &gt;&gt; ~/.ssh/authorized-keys（复制公钥到文件authorized-keys）</li><li>A: scp ~/.ssh/id_rsa.pub XXX@remotehost:/home/XXX/id_rsa.pub</li><li>B: cat ~/id_rsa.pub &gt;&gt;~/.ssh/authorized_keys(追加公钥到服务器的authorizied_keys文件中，<strong>注意登录到远程服务器操作此步骤</strong>)</li><li>A: ssh-add  ~/.ssh/id_rsa (添加私钥)</li><li>更改权限: chmod 700 ~/.ssh; chmod 600 ~/.ssh/authorized_keys</li></ul><h3 id="6、更改文件权限和所有者"><a href="#6、更改文件权限和所有者" class="headerlink" title="6、更改文件权限和所有者"></a>6、更改文件权限和所有者</h3><p>chmod [options] mode files/directory<br>mode=u,g,o 7=4读+2写+1执行，u用户，g，用户组，o，其他<br>+，-表示增加或者删除权限r,w,x表示读，写，执行三种权限，对应上面的三个数字。加上-R参数后就可以修改整个目录的文件的权限了。<br>chown username file/directory 更改文件的所有者</p><h3 id="7、系统查看指令"><a href="#7、系统查看指令" class="headerlink" title="7、系统查看指令"></a>7、系统查看指令</h3><p>tail -n number file 查看文件末尾number行<br>cat file 查看文件所有内容<br>ls -lh查看文件详细情<br>du -lh查看单独文件的大小<br>df -lh查看磁盘分区<br>gnome-system-monitor 查看资源管理器</p><h3 id="8、用户和用户组管理"><a href="#8、用户和用户组管理" class="headerlink" title="8、用户和用户组管理"></a>8、用户和用户组管理</h3><p><a href="http://www.cnblogs.com/xd502djj/archive/2011/11/23/2260094.html" target="_blank" rel="noopener">http://www.cnblogs.com/xd502djj/archive/2011/11/23/2260094.html</a></p><h3 id="9、修改locale"><a href="#9、修改locale" class="headerlink" title="9、修改locale"></a>9、修改locale</h3><p><a href="http://dgd2010.blog.51cto.com/1539422/1684813" target="_blank" rel="noopener">http://dgd2010.blog.51cto.com/1539422/1684813</a><br><a href="http://blog.csdn.net/myweishanli/article/details/23576847" target="_blank" rel="noopener">http://blog.csdn.net/myweishanli/article/details/23576847</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、修改用户密码&quot;&gt;&lt;a href=&quot;#1、修改用户密码&quot; class=&quot;headerlink&quot; title=&quot;1、修改用户密码&quot;&gt;&lt;/a&gt;1、修改用户密码&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="IT" scheme="http://xraorao.top/categories/IT/"/>
    
      <category term="linux" scheme="http://xraorao.top/categories/IT/linux/"/>
    
    
      <category term="笔记" scheme="http://xraorao.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ubuntu" scheme="http://xraorao.top/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu端口转发</title>
    <link href="http://xraorao.top/2017/05/23/ubuntu%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
    <id>http://xraorao.top/2017/05/23/ubuntu端口转发/</id>
    <published>2017-05-23T13:11:44.000Z</published>
    <updated>2018-06-08T09:10:07.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-内网有一台公网服务器"><a href="#1-内网有一台公网服务器" class="headerlink" title="1. 内网有一台公网服务器"></a>1. 内网有一台公网服务器</h1><p><a href="http://blog.csdn.net/gobitan/article/details/50696641" target="_blank" rel="noopener">iptables方法</a></p><h1 id="2-内网没有公网服务器，只有云服务器"><a href="#2-内网没有公网服务器，只有云服务器" class="headerlink" title="2. 内网没有公网服务器，只有云服务器"></a>2. 内网没有公网服务器，只有云服务器</h1><blockquote><p>思路：利用ssh反向代理实现内网穿透</p></blockquote><p>准备工作：<br>假设内网有机器A(192.168.1.2),机器B(192.168.1.3),机器A机器B在一个局域网内，但是只有机器A能够访问互联网，本身没有静态公网IP,机器B可以访问机器A，但是无法访问互联网。另外有一台可访问的云服务器C(公网IP: 104.28.39.108)</p><p>目的：实现在任意有网络的地方访问服务器A和服务器B</p><ol><li>将机器A的ssh公钥复制到机器C的authorized_keys，实现A到C的免密码登陆</li><li>在机器A执行如下脚本：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch /home/hadoop/autossh/monitor-auto-ssh.sh &amp;&amp; chmod +x /home/hadoop/autossh/monitor-auto-ssh.sh</span><br><span class="line">vim /home/hadoop/autossh/monitor-auto-ssh.sh</span><br></pre></td></tr></table></figure><p>monitor-auto-ssh.sh内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check every 30 seconds</span></span><br><span class="line"><span class="comment"># crontab -e</span></span><br><span class="line"><span class="comment"># */1 * * * * bash /home/hadoop/autossh/monitor-auto-ssh.sh</span></span><br><span class="line"><span class="comment"># * * * * * sleep 30; bash /home/hadoop/autossh/monitor-auto-ssh.sh</span></span><br><span class="line"></span><br><span class="line">PROCESS_NAME=<span class="string">'55566'</span></span><br><span class="line">PROCESS_PATH=<span class="string">'/home/hadoop/autossh'</span></span><br><span class="line">START_PROCESS=<span class="string">"autossh -f -M 55567 -NR 55566:localhost:22 hadoop@104.28.39.108"</span></span><br><span class="line">VPN_PROCESS=<span class="string">"autossh -f -M 55577 -NR 10012:localhost:13838 hadoop@104.28.39.108"</span></span><br><span class="line">VPN_PROCESS_NAME=<span class="string">"10012"</span></span><br><span class="line"><span class="comment">#PORT_TRANS="ssh -C -f -N -g -R 8888:127.0.0.1:8888 hadoop@39.108.120.127"</span></span><br><span class="line"><span class="comment">#PORT_TRANS_NAME="8888:127.0.0.1:8888"</span></span><br><span class="line"></span><br><span class="line">proc_num()                      <span class="comment">#查询进程数量  </span></span><br><span class="line">&#123;  </span><br><span class="line">    num=`ps -ef | grep <span class="variable">$&#123;PROCESS_NAME&#125;</span> | grep -v grep | wc -l`  </span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$num</span>  </span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line">proc_num2()</span><br><span class="line">&#123;</span><br><span class="line">    num=`ps -ef | grep <span class="variable">$&#123;VPN_PROCESS_NAME&#125;</span> | grep -v grep | wc -l`  </span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$num</span></span><br><span class="line">&#125;</span><br><span class="line">proc_num    </span><br><span class="line">number=$?</span><br><span class="line">proc_num2</span><br><span class="line">number2=$?</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$number</span> -eq 0 ]            <span class="comment">#如果进程数量为0  </span></span><br><span class="line"><span class="keyword">then</span>                            <span class="comment">#重新启动服务</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Restarting <span class="variable">$&#123;PROCESS_NAME&#125;</span> ..."</span></span><br><span class="line">    <span class="built_in">echo</span> $(date <span class="string">'+%Y-%m-%d %T'</span>) &gt;&gt; <span class="variable">$&#123;PROCESS_PATH&#125;</span>/restart.log</span><br><span class="line">    (<span class="variable">$&#123;START_PROCESS&#125;</span>) &amp;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"over"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$number2</span> -eq 2 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"ssh proxy has been started!"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$number2</span> -eq 0 ]            <span class="comment">#如果进程数量为0  </span></span><br><span class="line"><span class="keyword">then</span>                            <span class="comment">#重新启动服务</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Restarting <span class="variable">$&#123;VPN_PROCESS_NAME&#125;</span> ..."</span></span><br><span class="line">    <span class="built_in">echo</span> $(date <span class="string">'+%Y-%m-%d %T'</span>) &gt;&gt; <span class="variable">$&#123;PROCESS_PATH&#125;</span>/restart.log</span><br><span class="line">    (<span class="variable">$&#123;VPN_PROCESS&#125;</span>) &amp;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"over"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$number</span> -eq 2 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"shadow proxy has been started!"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><ol start="3"><li>机器A执行定时检查任务，确保ssh隧道断开自动重连</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># check every 30 seconds</span></span><br><span class="line">crontab -e</span><br><span class="line">*/1 * * * * bash /home/hadoop/autossh/monitor-auto-ssh.sh</span><br><span class="line">* * * * * sleep 30; bash /home/hadoop/autossh/monitor-auto-ssh.sh</span><br></pre></td></tr></table></figure><ol start="4"><li>服务器C需要在云网络安全组开放55566和10012两个端口，这两个端口分别通过隧道反向代理A机器的22号端口和13838端口</li></ol><h3 id="外网访问方式"><a href="#外网访问方式" class="headerlink" title="外网访问方式"></a>外网访问方式</h3><ol><li><p>ssh 指定机器C的55566端口就可以连接到A机器了，通过A机器可以跳转到B机器，实现间接链接</p></li><li><p>搭建VPN。在机器A上安装<a href="https://shadowsocks.be/9.html" target="_blank" rel="noopener">shadowsocks服务器端</a>，并且设置端口为13838（要和脚本中的端口保持一致），然后客户端机器安装<a href="https://github.com/shadowsocks/shadowsocks/releases" target="_blank" rel="noopener">shadowsocks客户端</a>,代理服务器地址为104.28.39.108，端口为10012，用户名和密码从A机器上获取。</p></li></ol><p>至此，代理服务器搭建完毕，设置shadowsocks全局代理模式，默认将本地127.0.0.1的1080端口的请求全部转发到C服务器上的10012端口，而C服务器的10012端口通过autossh反向代理到了A机器的13838端口，从而实现了从外网任何一台可以上网的设备远程连接到没有公网环境的内网服务器A和服务器B，能够访问内网的任何服务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-内网有一台公网服务器&quot;&gt;&lt;a href=&quot;#1-内网有一台公网服务器&quot; class=&quot;headerlink&quot; title=&quot;1. 内网有一台公网服务器&quot;&gt;&lt;/a&gt;1. 内网有一台公网服务器&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.ne
      
    
    </summary>
    
      <category term="解决方案" scheme="http://xraorao.top/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="ubuntu" scheme="http://xraorao.top/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/ubuntu/"/>
    
    
      <category term="ubuntu" scheme="http://xraorao.top/tags/ubuntu/"/>
    
      <category term="iptable" scheme="http://xraorao.top/tags/iptable/"/>
    
      <category term="端口转发" scheme="http://xraorao.top/tags/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu14.04下 Cloudera Manager和CDH5.11的配置</title>
    <link href="http://xraorao.top/2017/05/23/Cloudera%20Manager%E5%92%8CCDH5-11%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>http://xraorao.top/2017/05/23/Cloudera Manager和CDH5-11的配置/</id>
    <published>2017-05-23T03:25:25.000Z</published>
    <updated>2018-06-08T09:10:07.333Z</updated>
    
    <content type="html"><![CDATA[<p>本教程用于搭建Clodera Manager和CDH5的大数据分析平台的搭建工作</p><h2 id="1-参考链接："><a href="#1-参考链接：" class="headerlink" title="1.参考链接："></a>1.参考链接：</h2><p><a href="http://www.cnblogs.com/codedevelop/p/6762555.html" target="_blank" rel="noopener">http://www.cnblogs.com/codedevelop/p/6762555.html</a> （博客园）<br><a href="http://blog.csdn.net/a921122/article/details/51939692" target="_blank" rel="noopener">http://blog.csdn.net/a921122/article/details/51939692</a> （csdn）<br><a href="http://blog.csdn.net/hualiu163/article/details/46659375" target="_blank" rel="noopener">http://blog.csdn.net/hualiu163/article/details/46659375</a> （CDH5.33 详细）<br><a href="http://www.aboutyun.com/thread-9075-1-1.html" target="_blank" rel="noopener">http://www.aboutyun.com/thread-9075-1-1.html</a> （在线安装，不推荐）</p><p>基本思路：<br>集群主机ip配置，关闭防火墙，设置ssh无密码登录，统一root密码，集群时间同步，安装oracle jdk，主节点安装mysql，并初始化scm数据库，下载parcel包，进入控制台设置等</p><h2 id="2-注意的问题："><a href="#2-注意的问题：" class="headerlink" title="2.注意的问题："></a>2.注意的问题：</h2><p>jdbc的问题：<br>安装hive时，需要将mysql驱动包复制到/opt/cloudera/parcels/CDH/lib/hive/lib/目录下，并且需要把mysql驱动复制到/usr/share/java/mysql-connector-java.jar下</p><p>目录权限问题，ssh免密码登录问题，mysql远程访问设置。。。</p><p>注意要添加root用户的访问host，不然后面初始化会出问题<br>grant all privileges on <em>.</em> to ‘root‘@’n1’ identified by ‘xxxx’ with grant option;</p><h2 id="3、官方安装教程"><a href="#3、官方安装教程" class="headerlink" title="3、官方安装教程"></a>3、官方安装教程</h2><p>官方手动安装教程（强烈建议按照官方教程来操作，可以少走很多坑，阿西吧）：<br><a href="https://www.cloudera.com/documentation/enterprise/latest/topics/cm_ig_install_path_c.html#id_v4k_pnn_25" target="_blank" rel="noopener">https://www.cloudera.com/documentation/enterprise/latest/topics/cm_ig_install_path_c.html#id_v4k_pnn_25</a><br>system requirement:<br><a href="https://www.cloudera.com/downloads/manager/5-11-0.html" target="_blank" rel="noopener">https://www.cloudera.com/downloads/manager/5-11-0.html</a></p><h2 id="4-主节点安装mysql5-6"><a href="#4-主节点安装mysql5-6" class="headerlink" title="4.主节点安装mysql5.6"></a>4.主节点安装mysql5.6</h2><p>在线安装：<a href="http://blog.csdn.net/chenpy/article/details/50344085" target="_blank" rel="noopener">http://blog.csdn.net/chenpy/article/details/50344085</a><br>离线安装：<a href="http://blog.csdn.net/linlinv3/article/details/51774040" target="_blank" rel="noopener">http://blog.csdn.net/linlinv3/article/details/51774040</a><br>注意要设置远程登录（具体参照官方教程：<a href="https://www.cloudera.com/documentation/enterprise/latest/topics/cm_ig_mysql.html#cmig_topic_5_5_2" target="_blank" rel="noopener">MySQL设置</a>）</p><p>创建数据库：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> amon <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> amon.* <span class="keyword">to</span> <span class="string">'amon'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'amon'</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> rman <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> rman.* <span class="keyword">to</span> <span class="string">'rman'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'rman'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> metastore <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> metastore.* <span class="keyword">to</span> <span class="string">'hive'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'hive'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> sentry <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> sentry.* <span class="keyword">to</span> <span class="string">'sentry'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'sentry'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">nav</span> <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> nav.* <span class="keyword">to</span> <span class="string">'nav'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'nav'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> navms <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> navms.* <span class="keyword">to</span> <span class="string">'navms'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'navms'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> hue <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8 <span class="keyword">default</span> <span class="keyword">collate</span> utf8_general_ci;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> hue.* <span class="keyword">to</span> <span class="string">'hue'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'hue'</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.schemata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> oozie;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> oozie.* <span class="keyword">to</span> <span class="string">'oozie'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'oozie'</span>;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> oozie.* <span class="keyword">to</span> <span class="string">'oozie'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'oozie'</span>;</span><br></pre></td></tr></table></figure></p><p>master节点交换内存设置：<br><a href="http://blog.chinaunix.net/uid-20051192-id-3557817.html" target="_blank" rel="noopener">http://blog.chinaunix.net/uid-20051192-id-3557817.html</a></p><p>这里注意下，官网教程上面的reboot后自动启动的命令有点问题，直接启动和命令启动的时候运行的进程不一致<br>update-rc.d -f cloudera-scm-server remove<br>update-rc.d -f cloudera-scm-agent remove<br>貌似不能随便去掉这个过程，否则后面又会出现这个问题</p><p>安装kafka的问题：<br>首先参考官方教程，分配kafka parcel包，然后安装，第一次安装会遇到问题，解决方案如下：<br><a href="http://www.aboutyun.com/thread-19903-1-1.html" target="_blank" rel="noopener">http://www.aboutyun.com/thread-19903-1-1.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本教程用于搭建Clodera Manager和CDH5的大数据分析平台的搭建工作&lt;/p&gt;
&lt;h2 id=&quot;1-参考链接：&quot;&gt;&lt;a href=&quot;#1-参考链接：&quot; class=&quot;headerlink&quot; title=&quot;1.参考链接：&quot;&gt;&lt;/a&gt;1.参考链接：&lt;/h2&gt;&lt;p&gt;&lt;a
      
    
    </summary>
    
      <category term="解决方案" scheme="http://xraorao.top/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="hadoop" scheme="http://xraorao.top/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/hadoop/"/>
    
    
      <category term="hadoop" scheme="http://xraorao.top/tags/hadoop/"/>
    
      <category term="CDH5" scheme="http://xraorao.top/tags/CDH5/"/>
    
      <category term="Cloudera Manager" scheme="http://xraorao.top/tags/Cloudera-Manager/"/>
    
  </entry>
  
  <entry>
    <title>linux服务器时间同步</title>
    <link href="http://xraorao.top/2017/04/25/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/"/>
    <id>http://xraorao.top/2017/04/25/linux服务器时间同步/</id>
    <published>2017-04-25T10:57:24.000Z</published>
    <updated>2018-06-08T09:10:07.340Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ubuntu下服务器时间同步"><a href="#Ubuntu下服务器时间同步" class="headerlink" title="Ubuntu下服务器时间同步"></a>Ubuntu下服务器时间同步</h3><h4 id="1-时间服务器配置"><a href="#1-时间服务器配置" class="headerlink" title="1.时间服务器配置"></a>1.时间服务器配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#服务器cloud01,cloud02,cloud03都安装ntp服务</span></span><br><span class="line">sudo apt-get install ntp</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看服务是否启动</span></span><br><span class="line">service --status-all</span><br><span class="line">[+]表示启动</span><br><span class="line"></span><br><span class="line"><span class="comment">#选择cloud01作为时间同步服务器</span></span><br><span class="line">ssh cloud01</span><br><span class="line">sudo vi /etc/ntp.conf</span><br><span class="line">=====</span><br><span class="line">1. 修改server</span><br><span class="line">server [IP or hostname] [prefer]</span><br><span class="line">在 server 后端可以接 IP 或主机名，个人比较喜欢使用 IP 来设定， perfer 表示『优先使用』的服务器。</span><br><span class="line">server 2.cn.pool.ntp.org prefer</span><br><span class="line">server 0.asia.pool.ntp.org prefer</span><br><span class="line">server 3.asia.pool.ntp.org prefer</span><br><span class="line"></span><br><span class="line">2. 修改本地server</span><br><span class="line"><span class="comment">#让NTP Server和其自身保持同步，如果在/etc/ntp.conf中定义的server都不可用时，将使用local时间作为ntp服务提供给ntp客户端</span></span><br><span class="line">server 127.127.1.0</span><br><span class="line">fudge 127.127.1.0 stratum 5</span><br><span class="line"></span><br><span class="line">3.  restrict管理时间服务器权限</span><br><span class="line"><span class="comment">#不允许来自公网上ipv4和ipv6客户端的访问</span></span><br><span class="line">restrict -4 default kod notrap nomodify nopeer noquery</span><br><span class="line">restrict -6 default kod notrap nomodify nopeer noquery</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">restrict 192.168.1.0 mask 255.255.255.0 nomodify notrap</span><br><span class="line">=====</span><br></pre></td></tr></table></figure><h4 id="2-请求对时客户端配置"><a href="#2-请求对时客户端配置" class="headerlink" title="2.请求对时客户端配置"></a>2.请求对时客户端配置</h4><p>这里cloud02和cloud03分别是客户端<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装ntp服务</span></span><br><span class="line">sudo apt-get install ntp</span><br><span class="line">sudo vi /etc/ntp.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#去掉之前默认的server</span></span><br><span class="line">server 192.168.1.1（时间服务器的ip）</span><br><span class="line">fudge 192.168.1.1 stratum 5</span><br></pre></td></tr></table></figure></p><h4 id="3-客户端和时间服务器同步"><a href="#3-客户端和时间服务器同步" class="headerlink" title="3.客户端和时间服务器同步"></a>3.客户端和时间服务器同步</h4><ul><li><p>使用ntpdate更新时间</p><h1 id="注意要停止ntp服务才能使用ntpdate更新时间"><a href="#注意要停止ntp服务才能使用ntpdate更新时间" class="headerlink" title="注意要停止ntp服务才能使用ntpdate更新时间"></a>注意要停止ntp服务才能使用ntpdate更新时间</h1><p>sudo ntpdate 192.168.1.1<br>sudo hwclock –systohc #将系统时间写入硬件时间<br>sudo hwclock –hctosys #将硬件时间写入系统时间</p></li><li><p>使用ntpd更新时间<br>sudo service ntp start #启动ntp进程，自动逐渐同步时间</p></li></ul><h4 id="4-查看时间状态"><a href="#4-查看时间状态" class="headerlink" title="4.查看时间状态"></a>4.查看时间状态</h4><p>timedatectl status<br>sudo ntpq -p</p><h4 id="5-更换时区"><a href="#5-更换时区" class="headerlink" title="5.更换时区"></a>5.更换时区</h4><p>sudo tzselect</p><h3 id="常见错误解决方案"><a href="#常见错误解决方案" class="headerlink" title="常见错误解决方案"></a>常见错误解决方案</h3><ol><li>no server suitable for synchronization found<br>参考链接：<a href="http://www.blogjava.net/spray/archive/2008/07/10/213964.html" target="_blank" rel="noopener">http://www.blogjava.net/spray/archive/2008/07/10/213964.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Ubuntu下服务器时间同步&quot;&gt;&lt;a href=&quot;#Ubuntu下服务器时间同步&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu下服务器时间同步&quot;&gt;&lt;/a&gt;Ubuntu下服务器时间同步&lt;/h3&gt;&lt;h4 id=&quot;1-时间服务器配置&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="解决方案" scheme="http://xraorao.top/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="linux" scheme="http://xraorao.top/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/linux/"/>
    
    
      <category term="linux" scheme="http://xraorao.top/tags/linux/"/>
    
      <category term="ntp" scheme="http://xraorao.top/tags/ntp/"/>
    
  </entry>
  
  <entry>
    <title>mysql命令</title>
    <link href="http://xraorao.top/2017/04/24/mysql%E5%91%BD%E4%BB%A4/"/>
    <id>http://xraorao.top/2017/04/24/mysql命令/</id>
    <published>2017-04-24T11:50:40.000Z</published>
    <updated>2018-06-08T09:10:07.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、mysql的安装"><a href="#1、mysql的安装" class="headerlink" title="1、mysql的安装"></a>1、mysql的安装</h2><p><a href="https://www.cnblogs.com/xinjing-jingxin/p/8025805.html" target="_blank" rel="noopener">linux下mysql安装-博客园</a></p><h2 id="2、用户管理"><a href="#2、用户管理" class="headerlink" title="2、用户管理"></a>2、用户管理</h2><p>启动服务：<br>net start mysqld<br>链接数据库：<br>mysql -uroot -p<br>修改root用户密码：<br>mysqladmin -u root password “new_password”;</p><h3 id="2-1新建用户"><a href="#2-1新建用户" class="headerlink" title="2.1新建用户"></a>2.1新建用户</h3><p>mysql -uroot -p //登录mysql<br>mysql&gt; insert into mysql.user(Host,User,Password) values(“localhost”,”test”,password(“1234”));<br>//localhost表示只能在本机登录，改为”%”则可以远程登录</p><p>或者：<br>mysql&gt; CREATE USER ‘username‘@’host’ IDENTIFIED BY ‘password’;</p><h3 id="2-2用户授权"><a href="#2-2用户授权" class="headerlink" title="2.2用户授权"></a>2.2用户授权</h3><p>grant 权限 on 数据库.* to ‘username‘@’host’ identified by ‘password’<br>权限：select, update, all, delete, create, drop</p><h3 id="2-3删除用户"><a href="#2-3删除用户" class="headerlink" title="2.3删除用户"></a>2.3删除用户</h3><p>Delete FROM user Where User=’test’ and Host=’localhost’;<br>flush privileges;<br>drop database 用户数据库名;<br>drop user 用户名@’%’<br>drop user 用户名@‘localhost’</p><h3 id="2-4修改用户密码"><a href="#2-4修改用户密码" class="headerlink" title="2.4修改用户密码"></a>2.4修改用户密码</h3><p>mysql&gt;update mysql.user set password=password(‘新密码’) where User=”test” and Host=”localhost”;<br>mysql&gt;flush privileges;</p><p>在5.7版本的mysql中，没有“password”这个字段，因此需要使用“authentication_string”这个字段来替换“password”字段</p><p>或者采用以下命令：ALTER USER ‘root‘@’localhost’IDENTIFIED<br> BY ‘<strong><em>**</em></strong>‘</p><h3 id="2-5撤销用户权限"><a href="#2-5撤销用户权限" class="headerlink" title="2.5撤销用户权限"></a>2.5撤销用户权限</h3><p>REVOKE 权限 ON databasename.tablename FROM ‘username‘@’host’;</p><h3 id="2-6常用命令"><a href="#2-6常用命令" class="headerlink" title="2.6常用命令"></a>2.6常用命令</h3><p>show databases;//列出所有数据库<br>use ‘databasename’;//切换数据库<br>show tables;//列出所有表<br>describe tablename;//显示数据表结构<br>drop database 数据库名;//删除数据库<br>drop database 表名;//删除表</p><h3 id="2-7重置root密码"><a href="#2-7重置root密码" class="headerlink" title="2.7重置root密码"></a>2.7重置root密码</h3><ul><li>修改安装目录下的my.ini文件，添加一行：skip-grant-tables</li><li><p>重启mysql服务：<br>windows(管理员模式):net stop mysql; net start mysql;</p></li><li><p>mysql -uroot -p(直接回车登录)</p></li><li>update mysql.user set authentication_string=password(‘新密码’) where User=”root”</li><li>注释my.ini文件中skip-grant-tables这一行</li><li>重启mysql服务</li></ul><h2 id="3-常见问题"><a href="#3-常见问题" class="headerlink" title="3.常见问题"></a>3.常见问题</h2><ul><li><p>远程连接问题：</p><blockquote><p>解决方案如下：<br>1、授权<br>mysql&gt;grant all privileges on <em>.</em>  to  ‘root‘@’%’  identified by ‘youpassword’  with grant option;<br>mysql&gt;flush privileges;<br>2、修改/etc/mysql/my.conf<br>找到bind-address = 127.0.0.1这一行,注释即可</p></blockquote></li><li><p>重启mysql服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># service mysqld start (5.0版本是mysqld)</span></span><br><span class="line">[root@szxdb etc]<span class="comment"># service mysql start (5.5.7版本是mysql)</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、mysql的安装&quot;&gt;&lt;a href=&quot;#1、mysql的安装&quot; class=&quot;headerlink&quot; title=&quot;1、mysql的安装&quot;&gt;&lt;/a&gt;1、mysql的安装&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/xinji
      
    
    </summary>
    
      <category term="笔记" scheme="http://xraorao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="mysql" scheme="http://xraorao.top/categories/%E7%AC%94%E8%AE%B0/mysql/"/>
    
    
      <category term="mysql" scheme="http://xraorao.top/tags/mysql/"/>
    
      <category term="数据库" scheme="http://xraorao.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>java核心技术（一）</title>
    <link href="http://xraorao.top/2017/04/21/java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://xraorao.top/2017/04/21/java核心技术（一）/</id>
    <published>2017-04-21T01:06:51.000Z</published>
    <updated>2018-06-08T09:10:07.337Z</updated>
    
    <content type="html"><![CDATA[<h3 id="java基本程序设计结构"><a href="#java基本程序设计结构" class="headerlink" title="java基本程序设计结构"></a>java基本程序设计结构</h3><h4 id="1-java字符串"><a href="#1-java字符串" class="headerlink" title="1.java字符串"></a>1.java字符串</h4><ol><li><p>java编译器让不可变的字符串共享，所有的不可变字符串会存放在公共的存储池中，字符串变量指向存储池中的字符串的相应位置。类似于c++中的字符串指针，一旦字符串没人用，java自动回收机制会自动回收该字符串。</p></li><li><p>如何判断String字符串是否为空？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">1</span>: 判断java字符串是否为空</span><br><span class="line">======</span><br><span class="line"><span class="keyword">if</span>(str.length()==<span class="number">0</span>)</span><br><span class="line">或 <span class="keyword">if</span>(str.equals(<span class="string">""</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: 判断是否为<span class="keyword">null</span></span><br><span class="line">======</span><br><span class="line"><span class="keyword">if</span>(str == <span class="keyword">null</span>)</span><br><span class="line">这两种方式不一样，<span class="keyword">null</span>表示当前的String变量没有与对象关联。</span><br></pre></td></tr></table></figure></li><li><p>常用String API</p><ul><li>trim() 去掉原始字符串头尾空格</li><li>lasetIndexOf(String str) 返回str匹配的第一个子串的开始位置</li><li>toLowerCase() toUpperCase()</li></ul></li></ol><h4 id="2-java输入输出"><a href="#2-java输入输出" class="headerlink" title="2.java输入输出"></a>2.java输入输出</h4><ol><li><p>读取文本输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String name = in.nextLine();<span class="comment">//输入如果有空格采用该种方法</span></span><br><span class="line">String sex = in.next();<span class="comment">//输入空格隔开调用该方法</span></span><br><span class="line"><span class="keyword">int</span> age = in.nextInt();<span class="comment">//读取整数,nextDouble类似返回双精度浮点数</span></span><br></pre></td></tr></table></figure></li><li><p>读取密码输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Console cons = System.console();<span class="comment">//console对象每次只能读取一行输入</span></span><br><span class="line">String user = cons.readLine(<span class="string">"User name: "</span>);</span><br><span class="line"><span class="keyword">char</span>[] passwd = cons.readPassword(<span class="string">"Password: "</span>);</span><br></pre></td></tr></table></figure></li><li><p>大数值的计算<br>java的基本数据类型：</p></li></ol><table><thead><tr><th>类型</th><th>字节</th></tr></thead><tbody><tr><td>int</td><td>4</td></tr><tr><td>short</td><td>2</td></tr><tr><td>logn</td><td>8</td></tr><tr><td>byte</td><td>1</td></tr><tr><td>float</td><td>4</td></tr><tr><td>double</td><td>8</td></tr></tbody></table><p>NaN：当数据溢出时显示无穷大</p><p>java提供了BigInteger和BigDecimal两个类，可以处理包含任意长度数字序列的数值，分别实现了任意精度的整数运算和浮点数运算。</p><ol start="4"><li>java数组<br>for each循环: for(T element: collection<t>){};<br>匿名数组 new String[] {“ss”,”rr”};<br><strong>java中允许数组长度为0，但数组长度为0不等于null</strong><br>new elementType[0];// 不是null<br>数组拷贝：Arrays.copyOf(T[] arrayVar, int lenth);</t></li></ol><h4 id="java对象和类"><a href="#java对象和类" class="headerlink" title="java对象和类"></a>java对象和类</h4><ol><li><p>java运行内存管理<br><a href="http://www.importnew.com/21463.html" target="_blank" rel="noopener">http://www.importnew.com/21463.html</a><br><a href="http://www.cnblogs.com/gw811/archive/2012/10/18/2730117.html" target="_blank" rel="noopener">http://www.cnblogs.com/gw811/archive/2012/10/18/2730117.html</a><br><a href="http://blog.csdn.net/hairetz/article/details/4141043/" target="_blank" rel="noopener">堆和栈的区别</a></p></li><li><p>访问时间<br>Date()类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">date.getTime();<span class="comment">// = System.currentTimeMillis()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//还可以使用 LocalDate()和Calendar()这两个类</span></span><br></pre></td></tr></table></figure></li><li><p>java编译<br>javac 类名.java<br>java有两种编译方式：显示编译和隐式编译。显示编译某个文件时，如果该文件调用了其他的类，则会对引用的类进行编译操作，如果被引用的类被修改了，则会重新编译新版本的.class文件</p></li><li><p>java封装<br>java类的成员都应该设置为私有的，否则很危险。通常使用共有的方法来对私有成员进行读写。成员方法大部分设计为共有方法，一旦设计成公有的，不能随便删除，因为其他的代码可能依赖它。</p></li><li><p>静态导入包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.*;</span><br><span class="line">out.println(<span class="string">"hello world!"</span>);<span class="comment">//静态导入包，不用加类名前缀就可以直接访问方法。</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;java基本程序设计结构&quot;&gt;&lt;a href=&quot;#java基本程序设计结构&quot; class=&quot;headerlink&quot; title=&quot;java基本程序设计结构&quot;&gt;&lt;/a&gt;java基本程序设计结构&lt;/h3&gt;&lt;h4 id=&quot;1-java字符串&quot;&gt;&lt;a href=&quot;#1-ja
      
    
    </summary>
    
      <category term="笔记" scheme="http://xraorao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="java" scheme="http://xraorao.top/categories/%E7%AC%94%E8%AE%B0/java/"/>
    
    
      <category term="java" scheme="http://xraorao.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java设计模式（三）：行为型模式</title>
    <link href="http://xraorao.top/2017/04/07/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://xraorao.top/2017/04/07/java设计模式（三）：行为型模式/</id>
    <published>2017-04-07T14:39:29.000Z</published>
    <updated>2018-06-11T05:17:59.586Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接：<br><a href="http://www.cnblogs.com/maowang1991/archive/2013/04/15/3023236.html" target="_blank" rel="noopener">Java开发中的23种设计模式详解(转)</a><br><a href="http://blog.csdn.net/u013142781/article/details/50816245" target="_blank" rel="noopener">Java经典设计模式之五大创建型模式（附实例和详解）</a></p><p>行为型模式细分为如下11种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p><p>行为型模式(Behavioral Pattern)是对在不同的对象之间划分责任和算法的抽象化。</p><p>行为型模式不仅仅关注类和对象的结构，而且重点关注它们之间的相互作用。</p><p>先来张图，看看这11中模式的关系：</p><p>第一类：通过父类与子类的关系进行实现。第二类：两个类之间。第三类：类的状态。第四类：通过中间类</p><p><div align="center"> <img src="/images/design-pattern-behavior.jpg" width=""> </div><br></p><h2 id="1-策略模式"><a href="#1-策略模式" class="headerlink" title="1. 策略模式"></a>1. 策略模式</h2><p>策略模式定义了一系列算法，并将每个算法封装起来，使他们可以相互替换，且算法的变化不会影响到使用算法的客户。需要设计一个接口，为一系列实现类提供统一的方法，多个实现类实现该接口，设计一个抽象类（可有可无，属于辅助类），提供辅助函数，关系图如下：</p><p><div align="center"> <img src="http://dl.iteye.com/upload/attachment/0083/1213/2319a2c3-7ebd-3ee3-b389-1548074ea9c6.jpg" width=""> </div><br></p><p>图中ICalculator提供统一的方法，<br>AbstractCalculator是辅助类，提供辅助方法，接下来，依次实现下每个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICalculator</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String exp)</span></span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCalculator</span> </span>&#123;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] split(String exp,String opt)&#123;  </span><br><span class="line">        String array[] = exp.split(opt);  </span><br><span class="line">        <span class="keyword">int</span> arrayInt[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];  </span><br><span class="line">        arrayInt[<span class="number">0</span>] = Integer.parseInt(array[<span class="number">0</span>]);  </span><br><span class="line">        arrayInt[<span class="number">1</span>] = Integer.parseInt(array[<span class="number">1</span>]);  </span><br><span class="line">        <span class="keyword">return</span> arrayInt;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"># 3个实现类</span><br><span class="line">## 加法</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plus</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span> <span class="keyword">implements</span> <span class="title">ICalculator</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String exp)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> arrayInt[] = split(exp,<span class="string">"\\+"</span>);  </span><br><span class="line">        <span class="keyword">return</span> arrayInt[<span class="number">0</span>]+arrayInt[<span class="number">1</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">## 减法</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Minus</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span> <span class="keyword">implements</span> <span class="title">ICalculator</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String exp)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> arrayInt[] = split(exp,<span class="string">"-"</span>);  </span><br><span class="line">        <span class="keyword">return</span> arrayInt[<span class="number">0</span>]-arrayInt[<span class="number">1</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">## 乘法</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Multiply</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span> <span class="keyword">implements</span> <span class="title">ICalculator</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String exp)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> arrayInt[] = split(exp,<span class="string">"\\*"</span>);  </span><br><span class="line">        <span class="keyword">return</span> arrayInt[<span class="number">0</span>]*arrayInt[<span class="number">1</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"># 测试类</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyTest</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        String exp = <span class="string">"2+8"</span>;  </span><br><span class="line">        ICalculator cal = <span class="keyword">new</span> Plus();  </span><br><span class="line">        <span class="keyword">int</span> result = cal.calculate(exp);  </span><br><span class="line">        System.out.println(result);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>策略模式的决定权在用户，系统本身提供不同算法的实现，新增或者删除算法，对各种算法做封装。因此，策略模式多用在算法决策系统中，外部用户只需要决定用哪个算法即可。</p><h2 id="2-模板方法模式"><a href="#2-模板方法模式" class="headerlink" title="2. 模板方法模式"></a>2. 模板方法模式</h2><p>一个抽象类中，有一个主方法，再定义1…n个方法，可以是抽象的，也可以是实际的方法，定义一个类，继承该抽象类，重写抽象方法，通过调用抽象类，实现对子类的调用，先看个关系图：</p><p><div align="center"> <img src="http://dl.iteye.com/upload/attachment/0083/1215/c3d57775-ddf9-302b-9dfe-c65967518d3c.jpg" width=""> </div><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCalculator</span> </span>&#123;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">/*主方法，实现对本类其它方法的调用*/</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String exp,String opt)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> array[] = split(exp,opt);  </span><br><span class="line">        <span class="keyword">return</span> calculate(array[<span class="number">0</span>],array[<span class="number">1</span>]);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">/*被子类重写的方法*/</span>  </span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] split(String exp,String opt)&#123;  </span><br><span class="line">        String array[] = exp.split(opt);  </span><br><span class="line">        <span class="keyword">int</span> arrayInt[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];  </span><br><span class="line">        arrayInt[<span class="number">0</span>] = Integer.parseInt(array[<span class="number">0</span>]);  </span><br><span class="line">        arrayInt[<span class="number">1</span>] = Integer.parseInt(array[<span class="number">1</span>]);  </span><br><span class="line">        <span class="keyword">return</span> arrayInt;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plus</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> num1 + num2;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyTest</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        String exp = <span class="string">"8+8"</span>;  </span><br><span class="line">        AbstractCalculator cal = <span class="keyword">new</span> Plus();  </span><br><span class="line">        <span class="keyword">int</span> result = cal.calculate(exp, <span class="string">"\\+"</span>);  </span><br><span class="line">        System.out.println(result);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-观察者模式"><a href="#3-观察者模式" class="headerlink" title="3. 观察者模式"></a>3. 观察者模式</h2><p>观察者模式很好理解，类似于邮件订阅和RSS订阅，当我们浏览一些博客或wiki时，经常会看到RSS图标，就这的意思是，当你订阅了该文章，如果后续有更新，会及时通知你。其实，简单来讲就一句话：当一个对象变化时，其它依赖该对象的对象都会收到通知，并且随着变化！对象之间是一种一对多的关系。先来看看关系图：</p><p><div align="center"> <img src="http://dl.iteye.com/upload/attachment/0083/1233/d588525c-fbad-3040-971c-69b2716c67a4.jpg" width=""> </div><br></p><p>MySubject类就是我们的主对象，Observer1和Observer2是依赖于MySubject的对象，当MySubject变化时，Observer1和Observer2必然变化。AbstractSubject类中定义着需要监控的对象列表，可以对其进行修改：增加或删除被监控对象，且当MySubject变化时，负责通知在列表内存在的对象。我们看实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer1</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"observer1 has received!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer2</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"observer2 has received!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">/*增加观察者*/</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Observer observer)</span></span>;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">/*删除观察者*/</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(Observer observer)</span></span>;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">/*通知所有的观察者*/</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">/*自身的操作*/</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Vector&lt;Observer&gt; vector = <span class="keyword">new</span> Vector&lt;Observer&gt;();  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Observer observer)</span> </span>&#123;  </span><br><span class="line">        vector.add(observer);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(Observer observer)</span> </span>&#123;  </span><br><span class="line">        vector.remove(observer);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        Enumeration&lt;Observer&gt; enumo = vector.elements();  </span><br><span class="line">        <span class="keyword">while</span>(enumo.hasMoreElements())&#123;  </span><br><span class="line">            enumo.nextElement().update();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySubject</span> <span class="keyword">extends</span> <span class="title">AbstractSubject</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"update self!"</span>);  </span><br><span class="line">        notifyObservers();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"># test</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverTest</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Subject sub = <span class="keyword">new</span> MySubject();  </span><br><span class="line">        sub.add(<span class="keyword">new</span> Observer1());  </span><br><span class="line">        sub.add(<span class="keyword">new</span> Observer2());  </span><br><span class="line">        sub.operation();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-迭代子模式"><a href="#4-迭代子模式" class="headerlink" title="4. 迭代子模式"></a>4. 迭代子模式</h2><p>顾名思义，迭代器模式就是顺序访问聚集中的对象，一般来说，集合中非常常见，如果对集合类比较熟悉的话，理解本模式会十分轻松。这句话包含两层意思：一是需要遍历的对象，即聚集对象，二是迭代器对象，用于对聚集对象进行遍历访问。我们看下关系图：</p><p><div align="center"> <img src="http://dl.iteye.com/upload/attachment/0083/1217/f7571a69-3c85-3fe1-b781-e460563a40a8.jpg" width=""> </div><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span> </span>&#123;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">iterator</span><span class="params">()</span></span>;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">/*取得集合元素*/</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span>;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">/*取得集合大小*/</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>&#123;  </span><br><span class="line">    <span class="comment">//前移  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">previous</span><span class="params">()</span></span>;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//后移  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span></span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//取得第一个元素  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">first</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCollection</span> <span class="keyword">implements</span> <span class="title">Collection</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String string[] = &#123;<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>,<span class="string">"E"</span>&#125;;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">iterator</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyIterator(<span class="keyword">this</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> string[i];  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> string.length;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Collection collection;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pos = -<span class="number">1</span>;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyIterator</span><span class="params">(Collection collection)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.collection = collection;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">previous</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(pos &gt; <span class="number">0</span>)&#123;  </span><br><span class="line">            pos--;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> collection.get(pos);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(pos&lt;collection.size()-<span class="number">1</span>)&#123;  </span><br><span class="line">            pos++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> collection.get(pos);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(pos&lt;collection.size()-<span class="number">1</span>)&#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">first</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        pos = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">return</span> collection.get(pos);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Collection collection = <span class="keyword">new</span> MyCollection();  </span><br><span class="line">        Iterator it = collection.iterator();  </span><br><span class="line">          </span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;  </span><br><span class="line">            System.out.println(it.next());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出A B C D E</p><h2 id="5-责任链模式"><a href="#5-责任链模式" class="headerlink" title="5. 责任链模式"></a>5. 责任链模式</h2><p>有多个对象，每个对象持有对下一个对象的引用，这样就会形成一条链，请求在这条链上传递，直到某一对象决定处理该请求。但是发出者并不清楚到底最终那个对象会处理该请求，所以，责任链模式可以实现，在隐瞒客户端的情况下，对系统进行动态的调整。先看看关系图：</p><p><div align="center"> <img src="http://dl.iteye.com/upload/attachment/0083/1219/729a82ce-0987-347c-a4f1-bf64dee59ddb.jpg" width=""> </div><br></p><p>Abstracthandler类提供了get和set方法，方便MyHandle类设置和修改引用对象，MyHandle类是核心，实例化后生成一系列相互持有的对象，构成一条链。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Handler</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHandler</span> </span>&#123;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> Handler handler;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Handler <span class="title">getHandler</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> handler;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHandler</span><span class="params">(Handler handler)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.handler = handler;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">AbstractHandler</span> <span class="keyword">implements</span> <span class="title">Handler</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyHandler</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(name+<span class="string">"deal!"</span>);  </span><br><span class="line">        <span class="keyword">if</span>(getHandler()!=<span class="keyword">null</span>)&#123;  </span><br><span class="line">            getHandler().operator();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        MyHandler h1 = <span class="keyword">new</span> MyHandler(<span class="string">"h1"</span>);  </span><br><span class="line">        MyHandler h2 = <span class="keyword">new</span> MyHandler(<span class="string">"h2"</span>);  </span><br><span class="line">        MyHandler h3 = <span class="keyword">new</span> MyHandler(<span class="string">"h3"</span>);  </span><br><span class="line">  </span><br><span class="line">        h1.setHandler(h2);  </span><br><span class="line">        h2.setHandler(h3);  </span><br><span class="line">  </span><br><span class="line">        h1.operator();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p>h1deal!<br>h2deal!<br>h3deal!</p><p>此处强调一点就是，链接上的请求可以是一条链，可以是一个树，还可以是一个环，模式本身不约束这个，需要我们自己去实现，同时，在一个时刻，命令只允许由一个对象传给另一个对象，而不允许传给多个对象。</p><h2 id="6-命令模式"><a href="#6-命令模式" class="headerlink" title="6. 命令模式"></a>6. 命令模式</h2><p>命令模式很好理解，举个例子，司令员下令让士兵去干件事情，从整个事情的角度来考虑，司令员的作用是，发出口令，口令经过传递，传到了士兵耳朵里，士兵去执行。这个过程好在，三者相互解耦，任何一方都不用去依赖其他人，只需要做好自己的事儿就行，司令员要的是结果，不会去关注到底士兵是怎么实现的。我们看看关系图：</p><p><div align="center"> <img src="http://dl.iteye.com/upload/attachment/0083/1239/98cda4fc-00b1-300d-a25b-63229f0f1cbd.jpg" width=""> </div><br></p><p>Invoker是调用者（司令员），Receiver是被调用者（士兵），MyCommand是命令，实现了Command接口，持有接收对象，看实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exe</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exe</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        receiver.action();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"command received!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> Command command;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Invoker</span><span class="params">(Command command)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.command = command;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        command.exe();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Receiver receiver = <span class="keyword">new</span> Receiver();  </span><br><span class="line">        Command cmd = <span class="keyword">new</span> MyCommand(receiver);  </span><br><span class="line">        Invoker invoker = <span class="keyword">new</span> Invoker(cmd);  </span><br><span class="line">        invoker.action();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出： command received!</p><p>这个很好理解，命令模式的目的就是达到命令的发出者和执行者之间解耦，实现请求和执行分开，熟悉Struts的同学应该知道，Struts其实就是一种将请求和呈现分离的技术，其中必然涉及命令模式的思想！*</p><h2 id="7-备忘录模式"><a href="#7-备忘录模式" class="headerlink" title="7. 备忘录模式"></a>7. 备忘录模式</h2><p>主要目的是保存一个对象的某个状态，以便在适当的时候恢复对象，个人觉得叫备份模式更形象些，通俗的讲下：假设有原始类A，A中有各种属性，A可以决定需要备份的属性，备忘录类B是用来存储A的一些内部状态，类C呢，就是一个用来存储备忘录的，且只能存储，不能修改等操作。做个图来分析一下：</p><p><div align="center"> <img src="http://dl.iteye.com/upload/attachment/0083/1223/853d5c5a-9b7b-3341-a72e-abd3cbc3c81f.jpg" width=""> </div><br></p><p>Original类是原始类，里面有需要保存的属性value及创建一个备忘录类，用来保存value值。Memento类是备忘录类，Storage类是存储备忘录的类，持有Memento类的实例，该模式很好理解。直接看源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Original</span> </span>&#123;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> String value;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> value;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.value = value;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Original</span><span class="params">(String value)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.value = value;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(value);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">(Memento memento)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.value = memento.getValue();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> String value;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(String value)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.value = value;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> value;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.value = value;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Storage</span> </span>&#123;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> Memento memento;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Storage</span><span class="params">(Memento memento)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.memento = memento;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> memento;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.memento = memento;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">// 创建原始类  </span></span><br><span class="line">        Original origi = <span class="keyword">new</span> Original(<span class="string">"egg"</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 创建备忘录  </span></span><br><span class="line">        Storage storage = <span class="keyword">new</span> Storage(origi.createMemento());  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 修改原始类的状态  </span></span><br><span class="line">        System.out.println(<span class="string">"初始化状态为："</span> + origi.getValue());  </span><br><span class="line">        origi.setValue(<span class="string">"niu"</span>);  </span><br><span class="line">        System.out.println(<span class="string">"修改后的状态为："</span> + origi.getValue());  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 回复原始类的状态  </span></span><br><span class="line">        origi.restoreMemento(storage.getMemento());  </span><br><span class="line">        System.out.println(<span class="string">"恢复后的状态为："</span> + origi.getValue());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-状态模式"><a href="#8-状态模式" class="headerlink" title="8. 状态模式"></a>8. 状态模式</h2><p>核心思想就是：当对象的状态改变时，同时改变其行为，很好理解！就拿QQ来说，有几种状态，在线、隐身、忙碌等，每个状态对应不同的操作，而且你的好友也能看到你的状态，所以，状态模式就两点：1、可以通过改变状态来获得不同的行为。2、你的好友能同时看到你的变化。看图：</p><p><div align="center"> <img src="http://dl.iteye.com/upload/attachment/0083/1225/006156d2-f41f-3019-a194-b872a59ca426.jpg" width=""> </div><br></p><p>State类是个状态类，Context类可以实现切换，我们来看看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> String value;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> value;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.value = value;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"execute the first opt!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"execute the second opt!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> State state;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(State state)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.state = state;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getState</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> state;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.state = state;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (state.getValue().equals(<span class="string">"state1"</span>)) &#123;  </span><br><span class="line">            state.method1();  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state.getValue().equals(<span class="string">"state2"</span>)) &#123;  </span><br><span class="line">            state.method2();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"># test</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">          </span><br><span class="line">        State state = <span class="keyword">new</span> State();  </span><br><span class="line">        Context context = <span class="keyword">new</span> Context(state);  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">//设置第一种状态  </span></span><br><span class="line">        state.setValue(<span class="string">"state1"</span>);  </span><br><span class="line">        context.method();  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">//设置第二种状态  </span></span><br><span class="line">        state.setValue(<span class="string">"state2"</span>);  </span><br><span class="line">        context.method();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p>execute the first opt!<br>execute the second opt!</p><p>根据这个特性，状态模式在日常开发中用的挺多的，尤其是做网站的时候，我们有时希望根据对象的某一属性，区别开他们的一些功能，比如说简单的权限控制等。</p><h2 id="9-访问者模式"><a href="#9-访问者模式" class="headerlink" title="9. 访问者模式"></a>9. 访问者模式</h2><p>访问者模式把数据结构和作用于结构上的操作解耦合，使得操作集合可相对自由地演化。访问者模式适用于数据结构相对稳定算法又易变化的系统。因为访问者模式使得算法操作增加变得容易。若系统数据结构对象易于变化，经常有新的数据对象增加进来，则不适合使用访问者模式。访问者模式的优点是增加操作很容易，因为增加操作意味着增加新的访问者。访问者模式将有关行为集中到一个访问者对象中，其改变不影响系统数据结构。其缺点就是增加新的数据结构很困难。—— From 百科</p><p>简单来说，访问者模式就是一种分离对象数据结构与行为的方法，通过这种分离，可达到为一个被访问者动态添加新的操作而无需做其它的修改的效果。简单关系图：</p><p><div align="center"> <img src="http://dl.iteye.com/upload/attachment/0083/1227/96bd38f3-2888-3cc5-b90f-0e7542dc5845.jpg" width=""> </div><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Subject sub)</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Subject sub)</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"visit the subject："</span>+sub.getSubject());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSubject</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;  </span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSubject</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"love"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">          </span><br><span class="line">        Visitor visitor = <span class="keyword">new</span> MyVisitor();  </span><br><span class="line">        Subject sub = <span class="keyword">new</span> MySubject();  </span><br><span class="line">        sub.accept(visitor);      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：visit the subject：love</p><p>该模式适用场景：如果我们想为一个现有的类增加新功能，不得不考虑几个事情：<br>1、新功能会不会与现有功能出现兼容性问题？<br>2、以后会不会再需要添加？<br>3、如果类不允许修改代码怎么办？  </p><p>面对这些问题，最好的解决方法就是使用访问者模式，访问者模式适用于数据结构相对稳定的系统，把数据结构和算法解耦</p><h2 id="10-中介者模式"><a href="#10-中介者模式" class="headerlink" title="10. 中介者模式"></a>10. 中介者模式</h2><p>中介者模式也是用来降低类类之间的耦合的，因为如果类类之间有依赖关系的话，不利于功能的拓展和维护，因为只要修改一个对象，其它关联的对象都得进行修改。如果使用中介者模式，只需关心和Mediator类的关系，具体类类之间的关系及调度交给Mediator就行，这有点像spring容器的作用。先看看图：</p><p><div align="center"> <img src="http://dl.iteye.com/upload/attachment/0083/1229/f1f2cc36-ab27-32fa-9906-9cdee2c2b625.jpg" width=""> </div><br></p><p>User类统一接口，User1和User2分别是不同的对象，二者之间有关联，如果不采用中介者模式，则需要二者相互持有引用，这样二者的耦合度很高，为了解耦，引入了Mediator类，提供统一接口，MyMediator为其实现类，里面持有User1和User2的实例，用来实现对User1和User2的控制。这样User1和User2两个对象相互独立，他们只需要保持好和Mediator之间的关系就行，剩下的全由MyMediator类来维护！基本实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mediator</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createMediator</span><span class="params">()</span></span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">workAll</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMediator</span> <span class="keyword">implements</span> <span class="title">Mediator</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> User user1;  </span><br><span class="line">    <span class="keyword">private</span> User user2;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser1</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> user1;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser2</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> user2;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createMediator</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        user1 = <span class="keyword">new</span> User1(<span class="keyword">this</span>);  </span><br><span class="line">        user2 = <span class="keyword">new</span> User2(<span class="keyword">this</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">workAll</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        user1.work();  </span><br><span class="line">        user2.work();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> Mediator mediator;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mediator <span class="title">getMediator</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> mediator;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Mediator mediator)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User1</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User1</span><span class="params">(Mediator mediator)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>(mediator);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"user1 exe!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User2</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User2</span><span class="params">(Mediator mediator)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>(mediator);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"user2 exe!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Mediator mediator = <span class="keyword">new</span> MyMediator();  </span><br><span class="line">        mediator.createMediator();  </span><br><span class="line">        mediator.workAll();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">user1 exe!</span><br><span class="line">user2 exe!</span><br></pre></td></tr></table></figure><h2 id="11-解释器模式"><a href="#11-解释器模式" class="headerlink" title="11. 解释器模式"></a>11. 解释器模式</h2><p>一般主要应用在OOP开发中的编译器的开发中，所以适用面比较窄。</p><p><div align="center"> <img src="http://dl.iteye.com/upload/attachment/0083/1231/c87e402e-a355-3761-9ce3-7978956ba475.jpg" width=""> </div><br></p><p>Context类是一个上下文环境类，Plus和Minus分别是用来计算的实现，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Expression</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Context context)</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plus</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Context context)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> context.getNum1()+context.getNum2();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Minus</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Context context)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> context.getNum1()-context.getNum2();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num1;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num2;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.num1 = num1;  </span><br><span class="line">        <span class="keyword">this</span>.num2 = num2;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum1</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> num1;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum1</span><span class="params">(<span class="keyword">int</span> num1)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.num1 = num1;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum2</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> num2;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum2</span><span class="params">(<span class="keyword">int</span> num2)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.num2 = num2;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 计算9+2-8的值  </span></span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">new</span> Minus().interpret((<span class="keyword">new</span> Context(<span class="keyword">new</span> Plus()  </span><br><span class="line">                .interpret(<span class="keyword">new</span> Context(<span class="number">9</span>, <span class="number">2</span>)), <span class="number">8</span>)));  </span><br><span class="line">        System.out.println(result);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后输出正确的结果：3</p><p>基本就这样，解释器模式用来做各种各样的解释器，如正则表达式等的解释器等等！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考链接：&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/maowang1991/archive/2013/04/15/3023236.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java开发中的23种设计模式详解(转)
      
    
    </summary>
    
      <category term="笔记" scheme="http://xraorao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="java" scheme="http://xraorao.top/categories/%E7%AC%94%E8%AE%B0/java/"/>
    
    
      <category term="java" scheme="http://xraorao.top/tags/java/"/>
    
      <category term="设计模式" scheme="http://xraorao.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
